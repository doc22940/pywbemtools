===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement
===== Command Result
    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement -l
===== Command Result
    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement --localonly
===== Command Result
    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement --no_includequalifiers
===== Command Result

class CIM_ManagedElement {

    string InstanceID;

    string Caption;

    string ElementName;

    string Description;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement -c
===== Command Result
    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement --includeclassorigin
===== Command Result
    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement --includeclassorigin
===== Command Result
    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement --namespace root/PG_Interop
===== Command Result
    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement -p InstanceID -p Caption
===== Command Result
    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement -p InstanceID
===== Command Result
    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class get CIM_ManagedElement -p ""
===== Command Result
ERROR: pywbemcli -s http://localhost class get CIM_ManagedElement -p ""
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class enumerate
===== Command Result
    [Aggregation (True),
    Association (True),
    Deprecated { "CIM_OwningCollectionElement.OwningElement"},
    Description (
      "CIM_CollectionInSystem is deprecated in lieu of "
      "CIM_OwningCollectionElement, which is semantically equivalent. "
      "\nCIM_CollectionInSystem is an association used to establish a "
      "parent-child relationship between a collection and an \'owning\' "
      "System such as an AdminDomain or ComputerSystem. A single collection "
      "should not have both a CollectionInOrganization and a "
      "CollectionInSystem association."),
    UMLPackagePath ("CIM::User::Org"),
    Version ("2.37.0")]
class CIM_CollectionInSystem {

        [Aggregate (True),
        Deprecated { "CIM_OwningCollectionElement.OwningElement"},
        Description ("The parent system responsible for the collection."),
        Key (True),
        Max (1)]
    CIM_System REF Parent;

        [Deprecated { "CIM_OwningCollectionElement.OwnedElement"},
        Description ("The collection."),
        Key (True)]
    CIM_Collection REF Child;
};

    [Association (True),
    Description (
      "ReplaceableProductFRU is an association between Product and FRU that "
      "shows what Product components may be replaced. The association is one "
      "to many, conveying that a Product can have many FRUs, and that a "
      "particular instance of a FRU is only applied to one (instance of a) "
      "Product."),
    UMLPackagePath ("CIM::Core::ProductFRU"),
    Version ("2.6.0")]
class CIM_ReplaceableProductFRU {

        [Description ("The Product to which the FRU is applied."),
        Key (True),
        Max (1)]
    CIM_Product REF Product;

        [Description ("The FRU."),
        Key (True)]
    CIM_FRU REF FRU;
};

    [Association (True),
    Description (
      "ElementCapabilities represents the association between ManagedElements "
      "and their Capabilities. Note that the cardinality of the "
      "ManagedElement reference is Min(1). This cardinality mandates the "
      "instantiation of the ElementCapabilities association for the "
      "referenced instance of Capabilities. ElementCapabilities describes the "
      "existence requirements and context for the referenced instance of "
      "ManagedElement. Specifically, the ManagedElement MUST exist and "
      "provides the context for the Capabilities."),
    UMLPackagePath ("CIM::Core::Capabilities"),
    Version ("2.24.0")]
class CIM_ElementCapabilities {

        [Description (
          "Characteristics provides descriptive information about the "
          "Capabilities. when the value 2 \"Default\" is specified, the "
          "associated Capabilities shall represent the default capabilities "
          "of the associated Managed Element \nwhen the value 2 \"Default\" "
          "is not specified, the Capabilities instance may represent the "
          "default capabilities of the Managed Element\nWhen the value 3 "
          "\"Current\" is specified, the associated Capabilities shall "
          "represent the current capabilities of the associated Managed "
          "Element\nWhen the value 3 \"Current\" is not specified, the "
          "Capabilities instance may represent the current capabilities of "
          "the Managed Element."),
        ValueMap { "2", "3", "..", "32768..65535"},
        Values { "Default", "Current", "DMTF Reserved", "Vendor Specific"}]
    uint16 Characteristics[];

        [Description ("The Capabilities object associated with the element."),
        Key (True)]
    CIM_Capabilities REF Capabilities;

        [Description ("The managed element."),
        Key (True),
        Min (1)]
    CIM_ManagedElement REF ManagedElement;
};

    [Association (True),
    Deprecated { "CIM_ElementSettingData", "CIM_ElementSetting"},
    Description (
      "Note: The Profile class is being deprecated in lieu of using a "
      "ConcreteComponent relationship to indicate a hierarchy of Setting or "
      "SettingData instances. This relationship allows the reuse of the "
      "element to Setting or SettingData associations instead of defining a "
      "peer association specifically for Profiles. \nDeprecated description: "
      "ElementProfile represents the association between ManagedElements and "
      "the Profiles (collection of settings) that are defined for them. This "
      "association indicates that the settings that are collected by the "
      "Profile apply to the associated ManagedElement."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.10.0")]
class CIM_ElementProfile {

        [Deprecated { "CIM_ElementSettingData.SettingData",
          "CIM_ElementSetting.Setting"},
        Description (
          "Note: The use of this object is deprecated. Deprecated "
          "description: The Profile object that is associated with the "
          "element."),
        Key (True)]
    CIM_Profile REF Profile;

        [Deprecated { "CIM_ElementSettingData.ManagedElement",
          "CIM_ElementSetting.Element"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: The managed element."),
        Key (True)]
    CIM_ManagedElement REF ManagedElement;
};

    [Association (True),
    Description (
      "CIM_AuthorizedTarget is an association used to tie an Identity\'s or "
      "Role\'s AuthorizedPrivileges to specific target resources."),
    UMLPackagePath ("CIM::User::Privilege"),
    Version ("2.8.0")]
class CIM_AuthorizedTarget {

        [Description ("The AuthorizedPrivilege affecting the target resource."),
        Key (True)]
    CIM_AuthorizedPrivilege REF Privilege;

        [Description (
          "The target set of resources to which the AuthorizedPrivilege "
          "applies."),
        Key (True)]
    CIM_ManagedElement REF TargetElement;
};

    [Description (
      "CIM_Error is a specialized class that contains information about the "
      "severity, cause, recommended actions and other data related to the "
      "failure of a CIM Operation. Instances of this type MAY be included as "
      "part of the response to a CIM Operation."),
    Exception (True),
    Indication (True),
    UMLPackagePath ("CIM::Interop"),
    Version ("2.22.1")]
class CIM_Error {

        [Description (
          "The identifying information of the entity (i.e., the instance) "
          "generating the error. If this entity is modeled in the CIM Schema, "
          "this property contains the path of the instance encoded as a "
          "string parameter. If not modeled, the property contains some "
          "identifying string that names the entity that generated the error. "
          "The path or identifying string is formatted per the "
          "ErrorSourceFormat property."),
        ModelCorrespondence { "CIM_Error.ErrorSourceFormat"}]
    string ErrorSource;

        [Description (
          "An enumerated value that describes the probable cause of the error."),
        MappingStrings { "Recommendation.ITU|X733.Probable cause",
          "Recommendation.ITU|M3100.probableCause", "ITU-IANA-ALARM-TC"},
        ModelCorrespondence { "CIM_Error.ProbableCauseDescription"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
          "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
          "31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
          "41", "42", "43", "44", "45", "46", "47", "48", "49", "50",
          "51", "52", "53", "54", "55", "56", "57", "58", "59", "60",
          "61", "62", "63", "64", "65", "66", "67", "68", "69", "70",
          "71", "72", "73", "74", "75", "76", "77", "78", "79", "80",
          "81", "82", "83", "84", "85", "86", "87", "88", "89", "90",
          "91", "92", "93", "94", "95", "96", "97", "98", "99", "100",
          "101", "102", "103", "104", "105", "106", "107", "108", "109",
          "110", "111", "112", "113", "114", "115", "116", "117", "118",
          "119", "120", "121", "122", "123", "124", "125", "126", "127",
          "128", "129", "130", ".."},
        Values { "Unknown", "Other", "Adapter/Card Error",
          "Application Subsystem Failure", "Bandwidth Reduced",
          "Connection Establishment Error",
          "Communications Protocol Error",
          "Communications Subsystem Failure",
          "Configuration/Customization Error", "Congestion",
          "Corrupt Data", "CPU Cycles Limit Exceeded",
          "Dataset/Modem Error", "Degraded Signal",
          "DTE-DCE Interface Error", "Enclosure Door Open",
          "Equipment Malfunction", "Excessive Vibration",
          "File Format Error", "Fire Detected", "Flood Detected",
          "Framing Error", "HVAC Problem", "Humidity Unacceptable",
          "I/O Device Error", "Input Device Error", "LAN Error",
          "Non-Toxic Leak Detected", "Local Node Transmission Error",
          "Loss of Frame", "Loss of Signal", "Material Supply Exhausted",
          "Multiplexer Problem", "Out of Memory", "Output Device Error",
          "Performance Degraded", "Power Problem",
          "Pressure Unacceptable",
          "Processor Problem (Internal Machine Error)", "Pump Failure",
          "Queue Size Exceeded", "Receive Failure", "Receiver Failure",
          "Remote Node Transmission Error",
          "Resource at or Nearing Capacity", "Response Time Excessive",
          "Retransmission Rate Excessive", "Software Error",
          "Software Program Abnormally Terminated",
          "Software Program Error (Incorrect Results)",
          "Storage Capacity Problem", "Temperature Unacceptable",
          "Threshold Crossed", "Timing Problem", "Toxic Leak Detected",
          "Transmit Failure", "Transmitter Failure",
          "Underlying Resource Unavailable", "Version Mismatch",
          "Previous Alert Cleared", "Login Attempts Failed",
          "Software Virus Detected", "Hardware Security Breached",
          "Denial of Service Detected", "Security Credential Mismatch",
          "Unauthorized Access", "Alarm Received", "Loss of Pointer",
          "Payload Mismatch", "Transmission Error",
          "Excessive Error Rate", "Trace Problem", "Element Unavailable",
          "Element Missing", "Loss of Multi Frame",
          "Broadcast Channel Failure", "Invalid Message Received",
          "Routing Failure", "Backplane Failure",
          "Identifier Duplication", "Protection Path Failure",
          "Sync Loss or Mismatch", "Terminal Problem",
          "Real Time Clock Failure", "Antenna Failure",
          "Battery Charging Failure", "Disk Failure",
          "Frequency Hopping Failure", "Loss of Redundancy",
          "Power Supply Failure", "Signal Quality Problem",
          "Battery Discharging", "Battery Failure",
          "Commercial Power Problem", "Fan Failure", "Engine Failure",
          "Sensor Failure", "Fuse Failure", "Generator Failure",
          "Low Battery", "Low Fuel", "Low Water", "Explosive Gas",
          "High Winds", "Ice Buildup", "Smoke", "Memory Mismatch",
          "Out of CPU Cycles", "Software Environment Problem",
          "Software Download Failure", "Element Reinitialized",
          "Timeout", "Logging Problems", "Leak Detected",
          "Protection Mechanism Failure", "Protecting Resource Failure",
          "Database Inconsistency", "Authentication Failure",
          "Breach of Confidentiality", "Cable Tamper",
          "Delayed Information", "Duplicate Information",
          "Information Missing", "Information Modification",
          "Information Out of Sequence", "Key Expired",
          "Non-Repudiation Failure", "Out of Hours Activity",
          "Out of Service", "Procedural Error", "Unexpected Information",
          "DMTF Reserved"}]
    uint16 ProbableCause;

        [Description (
          "A free-form string describing recommended actions to take to "
          "resolve the error.")]
    string RecommendedActions[];

        [Description ("An array containing the dynamic content of the message."),
        ModelCorrespondence { "CIM_Error.MessageID", "CIM_Error.Message"}]
    string MessageArguments[];

        [Description (
          "Primary classification of the error. The following values are "
          "defined: \n2 - Communications Error. Errors of this type are "
          "principally associated with the procedures and/or processes "
          "required to convey information from one point to another. \n3 - "
          "Quality of Service Error. Errors of this type are principally "
          "associated with failures that result in reduced functionality or "
          "performance. \n4 - Software Error. Error of this type are "
          "principally associated with a software or processing fault. \n5 - "
          "Hardware Error. Errors of this type are principally associated "
          "with an equipment or hardware failure. \n6 - Environmental Error. "
          "Errors of this type are principally associated with a failure "
          "condition relating the to facility, or other environmental "
          "considerations. \n7 - Security Error. Errors of this type are "
          "associated with security violations, detection of viruses, and "
          "similar issues. \n8 - Oversubscription Error. Errors of this type "
          "are principally associated with the failure to allocate sufficient "
          "resources to complete the operation. \n9 - Unavailable Resource "
          "Error. Errors of this type are principally associated with the "
          "failure to access a required resource. \n10 -Unsupported Operation "
          "Error. Errors of this type are principally associated with "
          "requests that are not supported."),
        ModelCorrespondence { "CIM_Error.OtherErrorType"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          ".."},
        Values { "Unknown", "Other", "Communications Error",
          "Quality of Service Error", "Software Error", "Hardware Error",
          "Environmental Error", "Security Error",
          "Oversubscription Error", "Unavailable Resource Error",
          "Unsupported Operation Error", "DMTF Reserved"}]
    uint16 ErrorType;

        [Description (
          "A string defining \"Other\" values for ErrorSourceFormat. This "
          "value MUST be set to a non NULL value when ErrorSourceFormat is "
          "set to a value of 1 (\"Other\"). For all other values of "
          "ErrorSourceFormat, the value of this string must be set to NULL."),
        ModelCorrespondence { "CIM_Error.ErrorSourceFormat"}]
    string OtherErrorSourceFormat;

        [Description (
          "A free-form string containing a human-readable description of "
          "CIMStatusCode. This description MAY extend, but MUST be consistent "
          "with, the definition of CIMStatusCode."),
        MappingStrings { "DSP0201.DMTF|ERROR.DESCRIPTION|2.3",
          "DSP0200.DMTF|CIMError|1.3"},
        ModelCorrespondence { "CIM_Error.CIMStatusCode"}]
    string CIMStatusCodeDescription;

        [Description (
          "The format of the ErrorSource property is interpretable based on "
          "the value of this property. Values are defined as: \n0 - Unknown. "
          "The format is unknown or not meaningfully interpretable by a CIM "
          "client application. \n1 - Other. The format is defined by the "
          "value of the OtherErrorSourceFormat property.2 - CIMObjectPath. A "
          "CIM Object Path as defined in the CIM Infrastructure "
          "specification. Note: CIM 2.5 and earlier used the term object "
          "names."),
        ModelCorrespondence { "CIM_Error.ErrorSource",
          "CIM_Error.OtherErrorSourceFormat"},
        ValueMap { "0", "1", "2", ".."},
        Values { "Unknown", "Other", "CIMObjectPath", "DMTF Reserved"}]
    uint16 ErrorSourceFormat = 0;

        [Description (
          "The CIM status code that characterizes this instance. \nThis "
          "property defines the status codes that MAY be return by a "
          "conforming CIM Server or Listener. Note that not all status codes "
          "are valid for each operation. The specification for each operation "
          "SHOULD define the status codes that may be returned by that "
          "operation. \nThe following values for CIM status code are defined: "
          "\n1 - CIM_ERR_FAILED. A general error occurred that is not covered "
          "by a more specific error code. \n2 - CIM_ERR_ACCESS_DENIED. Access "
          "to a CIM resource was not available to the client. \n3 - "
          "CIM_ERR_INVALID_NAMESPACE. The target namespace does not exist. "
          "\n4 - CIM_ERR_INVALID_PARAMETER. One or more parameter values "
          "passed to the method were invalid. \n5 - CIM_ERR_INVALID_CLASS. "
          "The specified Class does not exist. \n6 - CIM_ERR_NOT_FOUND. The "
          "requested object could not be found. \n7 - CIM_ERR_NOT_SUPPORTED. "
          "The requested operation is not supported. \n8 - "
          "CIM_ERR_CLASS_HAS_CHILDREN. Operation cannot be carried out on "
          "this class since it has instances. \n9 - "
          "CIM_ERR_CLASS_HAS_INSTANCES. Operation cannot be carried out on "
          "this class since it has instances. \n10 - "
          "CIM_ERR_INVALID_SUPERCLASS. Operation cannot be carried out since "
          "the specified superclass does not exist. \n11 - "
          "CIM_ERR_ALREADY_EXISTS. Operation cannot be carried out because an "
          "object already exists. \n12 - CIM_ERR_NO_SUCH_PROPERTY. The "
          "specified Property does not exist. \n13 - CIM_ERR_TYPE_MISMATCH. "
          "The value supplied is incompatible with the type. \n14 - "
          "CIM_ERR_QUERY_LANGUAGE_NOT_SUPPORTED. The query language is not "
          "recognized or supported. \n15 - CIM_ERR_INVALID_QUERY. The query "
          "is not valid for the specified query language. \n16 - "
          "CIM_ERR_METHOD_NOT_AVAILABLE. The extrinsic Method could not be "
          "executed. \n17 - CIM_ERR_METHOD_NOT_FOUND. The specified extrinsic "
          "Method does not exist. \n18 - CIM_ERR_UNEXPECTED_RESPONSE. The "
          "returned response to the asynchronous operation was not expected. "
          "\n19 - CIM_ERR_INVALID_RESPONSE_DESTINATION. The specified "
          "destination for the asynchronous response is not valid. \n20 - "
          "CIM_ERR_NAMESPACE_NOT_EMPTY. The specified Namespace is not "
          "empty.\n21 - CIM_ERR_INVALID_ENUMERATION_CONTEXT. The enumeration "
          "context supplied is not valid.\n22 - "
          "CIM_ERR_INVALID_OPERATION_TIMEOUT. The specified Namespace is not "
          "empty.\n23 - CIM_ERR_PULL_HAS_BEEN_ABANDONED. The specified "
          "Namespace is not empty.\n24 - CIM_ERR_PULL_CANNOT_BE_ABANDONED. "
          "The attempt to abandon a pull operation has failed.\n25 - "
          "CIM_ERR_FILTERED_ENUMERATION_NOT_SUPPORTED. Filtered Enumeratrions "
          "are not supported.\n26 - "
          "CIM_ERR_CONTINUATION_ON_ERROR_NOT_SUPPORTED. Continue on error is "
          "not supported.\n27 - CIM_ERR_SERVER_LIMITS_EXCEEDED. The WBEM "
          "Server limits have been exceeded (e.g. memory, connections, "
          "...).\n28 - CIM_ERR_SERVER_IS_SHUTTING_DOWN. The WBEM Server is "
          "shutting down.\n29 - CIM_ERR_QUERY_FEATURE_NOT_SUPPORTED. The "
          "specified Query Feature is not supported."),
        MappingStrings { "DSP0201.DMTF|ERROR.CODE|2.3",
          "DSP0200.DMTF|CIMError|1.3"},
        ModelCorrespondence { "CIM_Error.CIMStatusCodeDescription"},
        ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
          "21", "22", "23", "24", "25", "26", "27", "28", "29", ".."},
        Values { "CIM_ERR_FAILED", "CIM_ERR_ACCESS_DENIED",
          "CIM_ERR_INVALID_NAMESPACE", "CIM_ERR_INVALID_PARAMETER",
          "CIM_ERR_INVALID_CLASS", "CIM_ERR_NOT_FOUND",
          "CIM_ERR_NOT_SUPPORTED", "CIM_ERR_CLASS_HAS_CHILDREN",
          "CIM_ERR_CLASS_HAS_INSTANCES", "CIM_ERR_INVALID_SUPERCLASS",
          "CIM_ERR_ALREADY_EXISTS", "CIM_ERR_NO_SUCH_PROPERTY",
          "CIM_ERR_TYPE_MISMATCH",
          "CIM_ERR_QUERY_LANGUAGE_NOT_SUPPORTED",
          "CIM_ERR_INVALID_QUERY", "CIM_ERR_METHOD_NOT_AVAILABLE",
          "CIM_ERR_METHOD_NOT_FOUND", "CIM_ERR_UNEXPECTED_RESPONSE",
          "CIM_ERR_INVALID_RESPONSE_DESTINATION",
          "CIM_ERR_NAMESPACE_NOT_EMPTY",
          "CIM_ERR_INVALID_ENUMERATION_CONTEXT",
          "CIM_ERR_INVALID_OPERATION_TIMEOUT",
          "CIM_ERR_PULL_HAS_BEEN_ABANDONED",
          "CIM_ERR_PULL_CANNOT_BE_ABANDONED",
          "CIM_ERR_FILTERED_ENUMERATION_NOT_SUPPORTED",
          "CIM_ERR_CONTINUATION_ON_ERROR_NOT_SUPPORTED",
          "CIM_ERR_SERVER_LIMITS_EXCEEDED",
          "CIM_ERR_SERVER_IS_SHUTTING_DOWN",
          "CIM_ERR_QUERY_FEATURE_NOT_SUPPORTED", "DMTF Reserved"}]
    uint32 CIMStatusCode;

        [Description (
          "An opaque string that uniquely identifies, within the scope of the "
          "OwningEntity, the format of the Message."),
        ModelCorrespondence { "CIM_Error.Message",
          "CIM_Error.MessageArguments"},
        Required (True)]
    string MessageID;

        [Description ("A free-form string describing the probable cause of the error."),
        ModelCorrespondence { "CIM_Error.ProbableCause"}]
    string ProbableCauseDescription;

        [Description (
          "The formatted message. This message is constructed by combining "
          "some or all of the dynamic elements specified in the "
          "MessageArguments property with the static elements uniquely "
          "identified by the MessageID in a message registry or other catalog "
          "associated with the OwningEntity."),
        ModelCorrespondence { "CIM_Error.MessageID",
          "CIM_Error.MessageArguments"}]
    string Message;

        [Description (
          "An enumerated value that describes the severity of the Indication "
          "from the notifier\'s point of view: \n0 - the Perceived Severity "
          "of the indication is unknown or indeterminate. \n1 - Other, by CIM "
          "convention, is used to indicate that the Severity\'s value can be "
          "found in the OtherSeverity property. \n2 - Information should be "
          "used when providing an informative response. \n3 - "
          "Degraded/Warning should be used when its appropriate to let the "
          "user decide if action is needed. \n4 - Minor should be used to "
          "indicate action is needed, but the situation is not serious at "
          "this time. \n5 - Major should be used to indicate action is needed "
          "NOW. \n6 - Critical should be used to indicate action is needed "
          "NOW and the scope is broad (perhaps an imminent outage to a "
          "critical resource will result). \n7 - Fatal/NonRecoverable should "
          "be used to indicate an error occurred, but it\'s too late to take "
          "remedial action. \n2 and 0 - Information and Unknown "
          "(respectively) follow common usage. Literally, the Error is purely "
          "informational or its severity is simply unknown."),
        MappingStrings { "Recommendation.ITU|X733.Perceived severity"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", ".."},
        Values { "Unknown", "Other", "Information", "Degraded/Warning",
          "Minor", "Major", "Critical", "Fatal/NonRecoverable",
          "DMTF Reserved"}]
    uint16 PerceivedSeverity;

        [Description (
          "A free-form string describing the ErrorType when 1, \"Other\", is "
          "specified as the ErrorType."),
        ModelCorrespondence { "CIM_Error.ErrorType"}]
    string OtherErrorType;

        [Description (
          "A string that uniquely identifies the entity that owns the "
          "definition of the format of the Message described in this "
          "instance. OwningEntity MUST include a copyrighted, trademarked or "
          "otherwise unique name that is owned by the business entity or "
          "standards body defining the format.")]
    string OwningEntity;
};

    [Association (True),
    Description (
      "CIM_ProductFRU is an association between Product and FRU that provides "
      "information regarding what Product components have been or are being "
      "replaced. The association is one to many, conveying that a Product can "
      "have many FRUs, and that a particular instance of a FRU is only "
      "applied to one (instance of a) Product."),
    UMLPackagePath ("CIM::Core::ProductFRU"),
    Version ("2.6.0")]
class CIM_ProductFRU {

        [Description ("The Product to which the FRU is applied."),
        Key (True),
        Max (1)]
    CIM_Product REF Product;

        [Description ("The FRU."),
        Key (True)]
    CIM_FRU REF FRU;
};

    [Association (True),
    Description (
      "CIM_Statistics is an association that relates Managed Elements to the "
      "StatisticalGroup(s) that apply to them."),
    UMLPackagePath ("CIM::Core::Statistics"),
    Version ("2.6.0")]
class CIM_Statistics {

        [Description ("The statistic information/object."),
        Key (True)]
    CIM_StatisticalInformation REF Stats;

        [Description (
          "The ManagedElement for which statistical or metric data is defined."),
        Key (True)]
    CIM_ManagedElement REF Element;
};

    [Association (True),
    Description (
      "The FromDirectorySpecification association identifies the source "
      "directory for a FileAction. When this association is used, the "
      "assumption is that the source directory already exists. This "
      "association cannot co-exist with a FromDirectoryAction association, "
      "since a FileAction can only involve a single source directory."),
    UMLPackagePath ("CIM::Application::CheckAction"),
    Version ("2.6.0")]
class CIM_FromDirectorySpecification {

        [Description ("The source directory of the Action."),
        Key (True),
        Max (1)]
    CIM_DirectorySpecification REF SourceDirectory;

        [Description ("The Action against the directory."),
        Key (True)]
    CIM_FileAction REF FileName;
};

    [Aggregation (True),
    Association (True),
    Composition (True),
    Description (
      "RecordInLog describes the aggregation or location of Log entries "
      "within a MessageLog."),
    UMLPackagePath ("CIM::System::Logs"),
    Version ("2.7.0")]
class CIM_RecordInLog {

        [Description ("The Log entry contained within the MessageLog."),
        Key (True),
        Weak (True)]
    CIM_LogRecord REF LogRecord;

        [Aggregate (True),
        Description ("The Message Log."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_MessageLog REF MessageLog;
};

    [Association (True),
    Description (
      "CollectionSetting represents the association between a "
      "CollectionOfMSEs class and the Setting classes that are defined for it."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.10.0")]
class CIM_CollectionSetting {

        [Description ("The Setting object that is associated with the Collection."),
        Key (True)]
    CIM_Setting REF Setting;

        [Description ("The CollectionOfMSEs."),
        Key (True)]
    CIM_CollectionOfMSEs REF Collection;
};

    [Abstract (True),
    Description (
      "CIM_Indication is the abstract root class for all notifications about "
      "changes in schema, objects and their data, and about events detected "
      "by providers and instrumentation. Subclasses represent specific types "
      "of notifications. \n\nTo receive an Indication, a consumer (or "
      "subscriber) must create an instance of CIM_IndicationFilter describing "
      "the criteria of the notification, an instance of "
      "CIM_ListenerDestination describing the delivery of the notification, "
      "and an instance of CIM_IndicationSubscription associating the Filter "
      "and Handler."),
    Indication (True),
    UMLPackagePath ("CIM::Event"),
    Version ("2.24.0")]
class CIM_Indication {

        [Description (
          "An identifier for the indication filter that selects this "
          "indication and causes it to be sent. This property is to be filled "
          "out by the indication sending service. The value shall be "
          "correlatable with the Name property of the instance of "
          "CIM_IndicationFilter describing the criteria of the indication. "
          "The value of the IndicationFilterName should be formatted using "
          "the following algorithm: < OrgID > : < LocalID >, where < OrgID > "
          "and < LocalID > are separated by a colon (:) and < OrgID > shall "
          "include a copyrighted, trademarked, or otherwise unique name that "
          "is owned by the business entity that is creating or defining the "
          "value or that is a registered ID assigned to the business entity "
          "by a recognized global authority. In addition, to ensure "
          "uniqueness, < OrgID > shall not contain a colon (:).When using "
          "this algorithm, the first colon to appear in the value shall "
          "appear between < OrgID > and < LocalID >. < LocalID > is chosen by "
          "the business entity and shall be used uniquely."),
        ModelCorrespondence { "CIM_IndicationFilter.Name"}]
    string IndicationFilterName;

        [Description (
          "Holds the value of the user defined severity value when "
          "\'PerceivedSeverity\' is 1 (\"Other\")."),
        ModelCorrespondence { "CIM_AlertIndication.PerceivedSeverity"}]
    string OtherSeverity;

        [Description (
          "The sequence number portion of a sequence identifier for the "
          "indication. The sequence context portion of the sequence "
          "identifier is provided by the SequenceContext property. The "
          "combination of both property values represents the sequence "
          "identifier for the indication.\nThe sequence identifier for the "
          "indication enables a CIM listener to identify duplicate "
          "indications when the CIM service attempts the delivery retry of "
          "indications, to reorder indications that arrive out-of-order, and "
          "to detect lost indications.\nIf a CIM service does not support "
          "sequence identifiers for indications, this property shall be "
          "NULL.\nIf a CIM service supports sequence identifiers for "
          "indications, this property shall be maintained by the CIM service "
          "for each registered listener destination, and its value shall "
          "uniquely identify the indication within the sequence context "
          "provided by SequenceContext. It shall start at 0 whenever the "
          "sequence context string changes. Otherwise, it shall be increased "
          "by 1 for every new indication to that listener destination, and it "
          "shall wrap to 0 when the value range is exceeded.\nWhen retrying "
          "the delivery of an indication, this property shall have the same "
          "value as in the original delivery."),
        ModelCorrespondence { "CIM_Indication.SequenceContext"}]
    sint64 SequenceNumber;

        [Description (
          "An identifier for the Indication. This property is similar to a "
          "key value in that it can be used for identification, when "
          "correlating Indications (see the CorrelatedIndications array). Its "
          "value SHOULD be unique as long as correlations are reported, but "
          "MAY be reused or left NULL if no future Indications will reference "
          "it in their CorrelatedIndications array.To ensure uniqueness, the "
          "value of IndicationIdentifier should be constructed using the "
          "following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the IndicationIdentifier or that is a recognized ID "
          "that is assigned to the business entity by a recognized global "
          "authority. (This requirement is similar to the <Schema "
          "Name>_<Class Name> structure of Schema class names.) In addition, "
          "to ensure uniqueness <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "IndicationIdentifier must appear between <OrgID> and <LocalID>. "
          "\n<LocalID> is chosen by the business entity and should not be "
          "re-used to identify different underlying (real-world) elements. "
          "\nIf the above \"preferred\" algorithm is not used, the defining "
          "entity should assure that the resulting IndicationIdentifier is "
          "not re-used across any IndicationIdentifiers that are produced by "
          "this or other providers for the NameSpace of this instance. \nFor "
          "DMTF-defined instances, the \"preferred\" algorithm should be used "
          "with the <OrgID> set to CIM."),
        MappingStrings {
          "Recommendation.ITU|X733.Notification identifier"}]
    string IndicationIdentifier;

        [Description (
          "The time and date of creation of the Indication. The property may "
          "be set to NULL if the entity creating the Indication is not "
          "capable of determining this information. Note that IndicationTime "
          "may be the same for two Indications that are generated in rapid "
          "succession.")]
    datetime IndicationTime;

        [Description (
          "The sequence context portion of a sequence identifier for the "
          "indication. The sequence number portion of the sequence identifier "
          "is provided by the SequenceNumber property. The combination of "
          "both property values represents the sequence identifier for the "
          "indication.\nThe sequence identifier for the indication enables a "
          "CIM listener to identify duplicate indications when the CIM "
          "service attempts the delivery retry of indications, to reorder "
          "indications that arrive out-of-order, and to detect lost "
          "indications.\nIf a CIM service does not support sequence "
          "identifiers for indications, this property shall be NULL.\nIf a "
          "CIM service supports sequence identifiers for indications, this "
          "property shall be maintained by the CIM service for each "
          "registered listener destination, and its value shall uniquely "
          "identify the CIM service and the indication service within the CIM "
          "service such that restarts of the CIM service and deregistration "
          "of listener destinations to the CIM service cause the value to "
          "change, without reusing earlier values for a sufficiently long "
          "time.\nWhen retrying the delivery of an indication, this property "
          "shall have the same value as in the original delivery.\nTo "
          "guarantee this uniqueness, the property value should be "
          "constructed using the following format (defined in ABNF): "
          "sequence-context = indication-service-name \"#\" "
          "cim-service-start-id \"#\" "
          "listener-destination-creation-time\nWhere: indication-service-name "
          "is the value of the Name property of the CIM_IndicationService "
          "instance responsible for delivering the indication. "
          "cim-service-start-id is an identifier that uniquely identifies the "
          "CIM service start, for example via a timestamp of the start time, "
          "or via a counter that increases for each start or restart. "
          "listener-destination-creation-time is a timestamp of the creation "
          "time of the CIM_ListenerDestination instance representing the "
          "listener destination.\nSince this format is only a recommendation, "
          "CIM clients shall treat the value as an opaque identifier for the "
          "sequence context and shall not rely on this format."),
        ModelCorrespondence { "CIM_Indication.SequenceNumber"}]
    string SequenceContext;

        [Description (
          "An enumerated value that describes the severity of the Indication "
          "from the notifier\'s point of view: \n1 - Other, by CIM "
          "convention, is used to indicate that the Severity\'s value can be "
          "found in the OtherSeverity property. \n3 - Degraded/Warning should "
          "be used when its appropriate to let the user decide if action is "
          "needed. \n4 - Minor should be used to indicate action is needed, "
          "but the situation is not serious at this time. \n5 - Major should "
          "be used to indicate action is needed NOW. \n6 - Critical should be "
          "used to indicate action is needed NOW and the scope is broad "
          "(perhaps an imminent outage to a critical resource will result). "
          "\n7 - Fatal/NonRecoverable should be used to indicate an error "
          "occurred, but it\'s too late to take remedial action. \n2 and 0 - "
          "Information and Unknown (respectively) follow common usage. "
          "Literally, the Indication is purely informational or its severity "
          "is simply unknown."),
        MappingStrings { "Recommendation.ITU|X733.Perceived severity"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", ".."},
        Values { "Unknown", "Other", "Information", "Degraded/Warning",
          "Minor", "Major", "Critical", "Fatal/NonRecoverable",
          "DMTF Reserved"}]
    uint16 PerceivedSeverity;

        [Description (
          "A list of IndicationIdentifiers whose notifications are correlated "
          "with (related to) this one."),
        MappingStrings {
          "Recommendation.ITU|X733.Correlated notifications"},
        ModelCorrespondence { "CIM_Indication.IndicationIdentifier"}]
    string CorrelatedIndications[];
};

    [Association (True),
    Description (
      "SystemInNamespace is an association that allows enumeration of the "
      "system(s) represented in a Namespace."),
    UMLPackagePath ("CIM::Interop"),
    Version ("2.6.0")]
class CIM_SystemInNamespace {

        [Description (
          "The Namespace containing management objects from one or more "
          "systems."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_Namespace REF ManagedNamespace;

        [ArrayType ("Indexed"),
        Description (
          "A list of enumerated values providing a high level description of "
          "the data contained and allowed in the Namespace. Additional "
          "clarification is provided in the DescriptionOfContainedData array."),
        ModelCorrespondence {
          "CIM_SystemInNamespace.DescriptionOfContainedData"},
        Required (True),
        ValueMap { "0", "1", "2", "3", "4"},
        Values { "Unknown", "Other", "Local System Data",
          "Data Aggregated from Multiple Systems", "Proxied Data"},
        Write (True)]
    uint16 ScopeOfContainedData[];

        [Description ("Identification information for systems in the Namespace."),
        Key (True),
        Weak (True)]
    CIM_SystemIdentification REF Identification;

        [ArrayType ("Indexed"),
        Description (
          "An array of free-form strings providing more detailed explanations "
          "for the data/objects contained in the Namespace, as described by "
          "the ContainedData array. Note, each entry of this array is related "
          "to the entry in the ContainedData array that is located at the "
          "same index."),
        ModelCorrespondence {
          "CIM_SystemInNamespace.ScopeOfContainedData"},
        Write (True)]
    string DescriptionOfContainedData[];
};

    [Association (True),
    Description (
      "ElementCapacity associates a PhysicalCapacity object with one or more "
      "PhysicalElements. It serves to associate a description of min/max "
      "hardware requirements or capabilities (stored as a kind of "
      "PhysicalCapacity), with the PhysicalElements being described."),
    UMLPackagePath ("CIM::Physical::Misc"),
    Version ("2.6.0")]
class CIM_ElementCapacity {

        [Description (
          "PhysicalCapacity describes the minimum and maximum requirements, "
          "and ability to support different types of hardware for a "
          "PhysicalElement."),
        Key (True)]
    CIM_PhysicalCapacity REF Capacity;

        [Description ("The PhysicalElement being described."),
        Key (True),
        Min (1)]
    CIM_PhysicalElement REF Element;
};

    [Association (True),
    Deprecated { "CIM_ElementSettingData", "CIM_CollectionSetting"},
    Description (
      "Note: The Configuration class is being deprecated in lieu of using a "
      "ConcreteComponent relationship to indicate a hierarchy of instances of "
      "Setting or SettingData. This relationship allows the reuse of the "
      "collection-to-Setting and element-to-SettingData associations instead "
      "of defining peer associations specifically for Configurations. "
      "\nDeprecated description: This association relates a Configuration "
      "object to one or more CollectionOfMSEs objects. The Configuration "
      "object represents a certain behavior or a desired functional state for "
      "the associated Collection."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.10.0")]
class CIM_CollectionConfiguration {

        [Deprecated { "CIM_ElementSettingData.SettingData",
          "CIM_CollectionSetting.Setting"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: The Configuration object that groups the Settings and "
          "dependencies that are associated with the Collection."),
        Key (True)]
    CIM_Configuration REF Configuration;

        [Deprecated { "CIM_ElementSettingData.ManagedElement",
          "CIM_CollectionSetting.Collection"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: The CollectionOfMSEs."),
        Key (True)]
    CIM_CollectionOfMSEs REF Collection;
};

    [Aggregation (True),
    Association (True),
    Description (
      "The ProductSoftwareFeatures association identifies the "
      "SoftwareFeatures for a particular Product."),
    UMLPackagePath ("CIM::Application::DeploymentModel"),
    Version ("2.6.0")]
class CIM_ProductSoftwareFeatures {

        [Aggregate (True),
        Description ("The Product that scopes the SoftwareFeatures."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_Product REF Product;

        [Description ("The SoftwareFeature in a Product."),
        Key (True),
        Weak (True)]
    CIM_SoftwareFeature REF Component;
};

    [Aggregation (True),
    Association (True),
    Composition (True),
    Description (
      "The CIM_ProductParentChild association defines a parent child "
      "hierarchy among Products. For example, a Product may come bundled with "
      "other Products."),
    UMLPackagePath ("CIM::Core::ProductFRU"),
    Version ("2.7.0")]
class CIM_ProductParentChild {

        [Aggregate (True),
        Description ("The parent Product in the association."),
        Key (True)]
    CIM_Product REF Parent;

        [Description ("The child Product in the association."),
        Key (True)]
    CIM_Product REF Child;
};

    [Aggregation (True),
    Association (True),
    Description (
      "The StorageDefect aggregation collects the StorageErrors for a "
      "StorageExtent."),
    UMLPackagePath ("CIM::Device::StorageExtents"),
    Version ("2.6.0")]
class CIM_StorageDefect {

        [Aggregate (True),
        Description (
          "The Extent reference defines the StorageExtent on which the errors "
          "occurred."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_StorageExtent REF Extent;

        [Description (
          "Error references the Error object, defining the starting and "
          "ending addresses that are \'mapped out\' of the Storage Extent."),
        Key (True),
        Weak (True)]
    CIM_StorageError REF Error;
};

    [Aggregation (True),
    Association (True),
    Description (
      "CIM_CollectionInOrganization is an association used to establish a "
      "parent-child relationship between a collection and an \'owning\' "
      "OrganizationalEntity. A single collection should not have both a "
      "CollectionInOrganization and a CollectionInSystem association."),
    UMLPackagePath ("CIM::User::Org"),
    Version ("2.6.0")]
class CIM_CollectionInOrganization {

        [Aggregate (True),
        Description ("The parent organization responsible for the collection."),
        Key (True),
        Max (1)]
    CIM_OrganizationalEntity REF Parent;

        [Description ("The collection."),
        Key (True)]
    CIM_Collection REF Child;
};

    [Association (True),
    Description (
      "ServiceAffectsElement represents an association between a Service and "
      "the ManagedElements that might be affected by its execution. "
      "Instantiating this association indicates that running the service may "
      "change, manage, provide functionality for,or pose some burden on the "
      "ManagedElement. This burden might affect performance, throughput, "
      "availability, and so on."),
    UMLPackagePath ("CIM::Core::Service"),
    Version ("2.14.0")]
class CIM_ServiceAffectsElement {

        [ArrayType ("Indexed"),
        Description (
          "Provides details for the effect at the corresponding array "
          "position in ElementEffects. This information is required if "
          "ElementEffects contains the value 1 (Other)."),
        ModelCorrespondence { "CIM_ServiceAffectsElement.ElementEffects"}]
    string OtherElementEffectsDescriptions[];

        [Description ("The Managed Element that is affected by the Service."),
        Key (True)]
    CIM_ManagedElement REF AffectedElement;

        [ArrayType ("Indexed"),
        Description (
          "An enumeration that describes the effect on the ManagedElement. "
          "This array corresponds to the OtherElementEffectsDescriptions "
          "array, where the latter provides details that are related to the "
          "high-level effects enumerated by this property. Additional detail "
          "is required if the ElementEffects array contains the value 1 "
          "(Other). The values are defined as follows: \n- Exclusive Use (2): "
          "No other Service may have this association to the element. \n- "
          "Performance Impact (3): Deprecated in favor of \"Consumes\", "
          "\"Enhances Performance\", or \"Degrades Performance\". Execution "
          "of the Service may enhance or degrade the performance of the "
          "element. This may be as a side-effect of execution or as an "
          "intended consequence of methods provided by the Service. \n- "
          "Element Integrity (4): Deprecated in favor of \"Consumes\", "
          "\"Enhances Integrity\", or \"Degrades Integrity\". Execution of "
          "the Service may enhance or degrade the integrity of the element. "
          "This may be as a side-effect of execution or as an intended "
          "consequence of methods provided by the Service. \n- Manages (5): "
          "The Service manages the element. \n- Consumes (6): Execution of "
          "the Service consumes some or all of the associated element as a "
          "consequence of running the Service. For example, the Service may "
          "consume CPU cycles, which may affect performance, or Storage which "
          "may affect both performance and integrity. (For instance, the lack "
          "of free storage can degrade integrity by reducing the ability to "
          "save state. ) \"Consumes\" may be used alone or in conjunction "
          "with other values, in particular, \"Degrades Performance\" and "
          "\"Degrades Integrity\". \n\"Manages\" and not \"Consumes\" should "
          "be used to reflect allocation services that may be provided by a "
          "Service. \n- Enhances Integrity (7): The Service may enhance "
          "integrity of the associated element. \n- Degrades Integrity (8): "
          "The Service may degrade integrity of the associated element. \n- "
          "Enhances Performance (9): The Service may enhance performance of "
          "the associated element. \n- Degrades Performance (10): The Service "
          "may degrade performance of the associated element."),
        ModelCorrespondence {
          "CIM_ServiceAffectsElement.OtherElementEffectsDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "..", "0x8000..0xFFFF"},
        Values { "Unknown", "Other", "Exclusive Use",
          "Performance Impact", "Element Integrity", "Manages",
          "Consumes", "Enhances Integrity", "Degrades Integrity",
          "Enhances Performance", "Degrades Performance",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 ElementEffects[];

        [Description ("The Service that is affecting the ManagedElement."),
        Key (True)]
    CIM_Service REF AffectingElement;
};

    [Aggregation (True),
    Association (True),
    Composition (True),
    Deprecated { "CIM_ConcreteComponent"},
    Description (
      "Indicates that a FRU may be composed of other Product(s). Indicates "
      "that a FRU may be composed of other Product(s). The use of this "
      "association has been deprecated since the FRU class itself has been "
      "deprecated. The composition of ReplacementFRUs is described by the "
      "ConcreteComponent association."),
    UMLPackagePath ("CIM::Core::ProductFRU"),
    Version ("2.8.1000")]
class CIM_FRUIncludesProduct {

        [Deprecated { "CIM_ConcreteComponent.PartComponent"},
        Description ("The Product which is a part of the FRU."),
        Key (True)]
    CIM_Product REF Component;

        [Aggregate (True),
        Deprecated { "CIM_ConcreteComponent.GroupComponent"},
        Description ("The FRU."),
        Key (True),
        Max (1)]
    CIM_FRU REF FRU;
};

    [Association (True),
    Description (
      "OwningCollectionElement represents an association between a Collection "
      "and the ManagedElement responsible for the control or ownership of the "
      "Collection."),
    UMLPackagePath ("CIM::Core::Collection"),
    Version ("2.18.0")]
class CIM_OwningCollectionElement {

        [Description (
          "The ManagedElement acting as the \'owner\' or object that "
          "isresponsible for the control of the Collection."),
        Key (True),
        Max (1)]
    CIM_ManagedElement REF OwningElement;

        [Description ("The Collection owned or controlled by the ManagedElement."),
        Key (True)]
    CIM_Collection REF OwnedElement;
};

    [Aggregation (True),
    Association (True),
    Deprecated { "CIM_ConcreteComponent"},
    Description (
      "Note: The Configuration and SystemConfiguration classes are deprecated "
      "in lieu of using a ConcreteComponent relationship to indicate a "
      "hierarchy of Settings or SettingData instances. Therefore, the "
      "aggregation of SystemSettings into System Configurations is replaced "
      "by the ConcreteComponent relationship between instances of Settings "
      "and SettingData. \nDeprecated description: This relationship "
      "associates System-specific Configuration objects with System-specific "
      "Setting objects, similar to the SettingContext association."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.10.0")]
class CIM_SystemSettingContext {

        [Deprecated { "CIM_ConcreteComponent.PartComponent"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: An aggregated Setting."),
        Key (True)]
    CIM_SystemSetting REF Setting;

        [Aggregate (True),
        Deprecated { "CIM_ConcreteComponent.GroupComponent"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: The Configuration object that aggregates the Setting."),
        Key (True)]
    CIM_SystemConfiguration REF Context;
};

    [Association (True),
    Description (
      "ElementLocation associates a ManagedElement with a location for "
      "positioning, inventory, maintenance and similar purposes. "
      "PhysicalElements can certainly have locations. They are explicitly "
      "defined in a subclass, PhysicalElement Location. However, other "
      "ManagedElements can also be associated with locations. For example, "
      "Organizations can be \'in\' one or more locations, or Services can be "
      "restricted to a location."),
    UMLPackagePath ("CIM::Core::Physical"),
    Version ("2.10.0")]
class CIM_ElementLocation {

        [Description ("The location of the element."),
        Key (True)]
    CIM_Location REF PhysicalLocation;

        [Description ("The ManagedElement whose location is specified."),
        Key (True)]
    CIM_ManagedElement REF Element;
};

    [Association (True),
    Description (
      "CIM_ServiceAvailableToElement conveys the semantics of a Service that "
      "is available for the use of a ManagedElement. An example of an "
      "available Service is that a Processor and an enclosure (a "
      "PhysicalElement) can use AlertOnLAN Services to signal an incomplete "
      "or erroneous boot. In reality, AlertOnLAN is simply a HostedService on "
      "a computer system that is generally available for use and is not a "
      "dependency of the processor or enclosure. To describe that the use of "
      "this service might be restricted or have limited availability or "
      "applicability, the CIM_ServiceAvailableToElement association would be "
      "instantiated between the Service and specific CIM_Processors and "
      "CIM_Chassis."),
    UMLPackagePath ("CIM::Core::Service"),
    Version ("2.10.0")]
class CIM_ServiceAvailableToElement {

        [Description ("The ManagedElement that can use the Service."),
        Key (True)]
    CIM_ManagedElement REF UserOfService;

        [Description ("The Service that is available."),
        Key (True)]
    CIM_Service REF ServiceProvided;
};

    [Association (True),
    Description (
      "The CIM_ActionSequence association defines a series of operations that "
      "either transition a SoftwareElement, referenced by the "
      "CIM_SoftwareElementActions association, to the next state or removes "
      "the element from its current state. The Action classes participating "
      "in this association must have the same value for the Action.Direction "
      "property - since they are either part of a sequence to transition a "
      "SoftwareElement into its next state or to uninstall it. The next-state "
      "and uninstall Actions associated with a particular SoftwareElement "
      "must be a continuous sequence. \nActionSequence is an association that "
      "loops on the Action classes with roles for the \'prior\' and \'next\' "
      "Actions in the sequence. The need for a continuous sequence imples: "
      "(1)Within the set of next-state or uninstall Actions, there is one and "
      "only one Action that does not have an instance of ActionSequence "
      "referencing it in the \'next\' role. This is the first Action in the "
      "sequence. (2) Within the set of next-state or uninstall Actions, there "
      "is one and only one Action that does not have an instance of "
      "ActionSequence referencing it in the \'prior\' role. This is the last "
      "Action in the sequence. (3) All other Actions within the set of "
      "next-state and uninstall Actions must participate in two instances of "
      "ActionSequence, one in a \'prior\' role and the other in the \'next\' "
      "role."),
    UMLPackagePath ("CIM::Application::CheckAction"),
    Version ("2.6.0")]
class CIM_ActionSequence {

        [Description ("The previous Action in the sequence."),
        Key (True),
        Max (1)]
    CIM_Action REF Prior;

        [Description ("The next Action in the sequence."),
        Key (True),
        Max (1)]
    CIM_Action REF Next;
};

    [Association (True),
    Deprecated { "No value"},
    Description (
      "This class is being deprecated as part of the deprecation of the "
      "DiagnosticResult class. \nThis is an association class to relate the "
      "results of a test to the test itself."),
    UMLPackagePath ("CIM::System::Diagnostics"),
    Version ("2.9.0")]
class CIM_DiagnosticResultForTest {

        [Deprecated { "No value"},
        Description ("The result object."),
        Key (True),
        Max (1),
        Min (1),
        Weak (True)]
    CIM_DiagnosticResult REF DiagnosticResult;

        [Deprecated { "No value"},
        Description ("The test that generated the result object."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_DiagnosticTest REF DiagnosticTest;
};

    [Association (True),
    Deprecated { "No value"},
    Description (
      "This class is being deprecated as part of the deprecation of the "
      "DiagnosticResult class. \nThis is an association class relating "
      "diagnostic test results to the ManagedSystemElement that is/was tested."),
    UMLPackagePath ("CIM::System::Diagnostics"),
    Version ("2.9.0")]
class CIM_DiagnosticResultForMSE {

        [Deprecated { "No value"},
        Description (
          "The ManagedSystemElement to which the diagnostic result applies."),
        Key (True)]
    CIM_ManagedSystemElement REF SystemElement;

        [Deprecated { "No value"},
        Description ("The diagnostic result."),
        Key (True)]
    CIM_DiagnosticResult REF Result;
};

    [Association (True),
    Description (
      "CIM_CompatibleProduct is an association between Products that can "
      "indicate a wide variety of information. For example, it can indicate "
      "that the two referenced Products interoperate, that they can be "
      "installed together, that one can be the physical container for the "
      "other, etc. The string property, CompatibilityDescription, defines how "
      "the Products interoperate or are compatible, any limitations regarding "
      "interoperability or installation, ..."),
    UMLPackagePath ("CIM::Core::ProductFRU"),
    Version ("2.6.0")]
class CIM_CompatibleProduct {

        [Description ("The Product for which compatible offerings are defined."),
        Key (True)]
    CIM_Product REF Product;

        [Description ("The compatible Product."),
        Key (True)]
    CIM_Product REF CompatibleProduct;

        [Description (
          "CompatibilityDescription is a free-form string defining how the "
          "two referenced Products interoperate or are compatible, any "
          "limitations to compatibility, etc.")]
    string CompatibilityDescription;
};

    [Association (True),
    Description (
      "An association that models a host driver path to a SCSI logical unit. "
      "Each permutation of initiator and target ProtocolEndpoints and logical "
      "units is considered a separate path. This class describes end-to-end "
      "path behavior such as properties and operations commonly used in "
      "multipath management."),
    UMLPackagePath ("CIM::Device::StorageDevices"),
    Version ("2.10.0")]
class CIM_SCSIInitiatorTargetLogicalUnitPath {

        [Description ("An initiator endpoint."),
        Key (True)]
    CIM_SCSIProtocolEndpoint REF Initiator;

        [Description (
          "AdministrativeOverride allows an administrator to select a single "
          "path, force all I/O to this path, and disables load balancing. The "
          "steady-state value is \'No override in effect\'. When an "
          "administrator sets an override for a particular path, that path\'s "
          "AdministrativeOverride is set to \'Overridding\' and all other "
          "paths to same logical unit are assigned a value of \'Overridden\'. "
          "This property is changed using the OverridePath method in "
          "SCSIPathConfigurationService."),
        MappingStrings {
          "MP_API.SNIA|MP_MULTIPATH_LOGICAL_UNIT_PROPERTIES|overridePath"},
        ModelCorrespondence {
          "CIM_SCSIPathConfigurationService.SetOverridePath"},
        ValueMap { "2", "3", "4"},
        Values { "Overriding", "Overridden", "No override in effect"}]
    uint16 AdministrativeOverride;

        [Description ("A target endpoint."),
        Key (True)]
    CIM_SCSIProtocolEndpoint REF Target;

        [Description (
          "A subclass of LogicalDevice representing a SCSI Logical Unit (such "
          "as StorageVolume or TapeDrive)."),
        Key (True)]
    CIM_LogicalDevice REF LogicalUnit;

        [Description (
          "The OS Device Name for this path. Only applicable if the "
          "ExposedPathDeviceFiles property is true in the instance of "
          "SCSIMultipathConfigurationCapabilities associated with the "
          "LogicalDevice/RedundancySet this instance is a member of."),
        MappingStrings {
          "MP_API.SNIA|MP_PATH_LOGICAL_UNIT_PROPERTIES|deviceFileName"}]
    string OSDeviceName;

        [Description (
          "The state of this path. Values are defined as follows: \nUnknown - "
          "the path is unavailable,but the cause is not known. \nActive - The "
          "path is okay and active. \nPassive - The path is okay, but is "
          "associated with a target port of target port group in standby "
          "access state. Only applies to devices with asymmetric access. "
          "\nDisabled - The path is disabled by administrative request "
          "(DisablePathLU). \nPath Error - The path is unusable due to an "
          "error on this path and no SCSI status was received. \nLogical Unit "
          "Error - A SCSI status was received for an I/O through this path "
          "indicating a logical unit error. \nReserved - The path is "
          "unavailable due to a SCSI reservation. \nRemoved - The path is "
          "unavailable because the OS or drivers marked the pathunusable. "
          "\nTransitioning - the path is transitioning between two valid "
          "states. \nThe only valid values a client can specify are Disabled "
          "and Active. All other states are determined by the underlying "
          "implementation; attempts to set them should be given an error "
          "response."),
        MappingStrings {
          "MP_API.SNIA|MP_PATH_LOGICAL_UNIT_PROPERTIES|pathState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9"},
        Values { "Unknown", "Active", "Passive", "Disabled", "Path Error",
          "Logical Unit Error", "Reserved", "Removed", "Transitioning"},
        Write (True)]
    uint32 State;

        [Description (
          "The SCSI Logical Unit Number. This is the unit number with values "
          "below 16,384 used in management applications. It is not the full "
          "SCSI SAM 8-byte logical unit number structure. Using the "
          "terminology from the T10 SCSI specifications, this is the LU "
          "number with a value between 0 and 255 using the Peripheral device "
          "addressing method with Bus Identifier zero or a LU number between "
          "0 and 16,383 using the Flat space (AKA volume set) addressing "
          "method."),
        MappingStrings {
          "MP_API.SNIA|MP_MULTIPATH_LOGICAL_UNIT_PROPERTIES|overridePathMP_API"
          ".SNIA|MP_CancelOverridePath",
          "MP_API.SNIA|MP_SetOverridePath"},
        MaxValue (16383)]
    uint16 LogicalUnitNumber;

        [Description (
          "A value assigned by an administrator specifying a preference to "
          "assign to a path. The drivers will actively use all available "
          "paths with the highest weight. This allows an administrator to "
          "assign a subset of available paths for load balanced access and "
          "reserve the others as backup paths. For symmetric access devices, "
          "all paths are considered \'available\'. For asymmetric access "
          "devices, all paths in active target port groups are considered "
          "available."),
        MappingStrings {
          "MP_API.SNIA|MP_PATH_LOGICAL_UNIT_PROPERTIES|weight"},
        Write (True)]
    uint32 AdministrativeWeight;
};

    [Association (True),
    Description (
      "The InstalledSoftwareIdentity association identifies the System on "
      "which a SoftwareIdentity is installed. This class is a corollary to "
      "InstalledSoftwareElement, but deals with the asset aspects of software "
      "(as indicated by SoftwareIdentity), versus the deployment aspects (as "
      "indicated by SoftwareElement)."),
    UMLPackagePath ("CIM::Core::Software"),
    Version ("2.8.0")]
class CIM_InstalledSoftwareIdentity {

        [Description ("The SoftwareIdentity that is installed."),
        Key (True)]
    CIM_SoftwareIdentity REF InstalledSoftware;

        [Description ("The system on which the software is installed."),
        Key (True)]
    CIM_System REF System;
};

    [Aggregation (True),
    Association (True),
    Description (
      "The FRUIncludesSoftwareFeature association identifies the "
      "SoftwareFeature(s) packaged with a particular FRU. A common usage is "
      "to determine whether the FRU is compatible with a hardware/software "
      "platform. In order to determine this, the following conditions need to "
      "be verified: \n(1) Is the physical package of the FRU compatible with "
      "the slots or equivalent packaging of the hardware? \n(2) Are there any "
      "physical constraints (such as power consumption) that prevent the FRU "
      "from being installed? \n(3) Are the SoftwareFeatures packaged with the "
      "FRU compatiable with the underlying operating system and other "
      "software already installed/to be installed on the platform? \nThis "
      "latter question can be answered by first checking if an instance of "
      "FRUIncludesSoftwareFeature exists. If it does, then the compatibility "
      "of each SoftwareFeature can be determined by evaluating the Check "
      "classes for the Software Elements that are part of the Feature (found "
      "by traversing the association, SoftwareFeatureSoftwareElements). For "
      "example, there might be a SoftwareElementVersionCheck that declares "
      "that a SoftwareElement (of the FRU\'s Software Feature) is not "
      "compatible with current software."),
    UMLPackagePath ("CIM::Application::DeploymentModel"),
    Version ("2.6.0")]
class CIM_FRUIncludesSoftwareFeature {

        [Description (
          "The SoftwareFeature which is included in the FRU and whose "
          "SoftwareElements should be evaluated."),
        Key (True)]
    CIM_SoftwareFeature REF Component;

        [Aggregate (True),
        Description ("The field replaceable unit."),
        Key (True),
        Max (1)]
    CIM_FRU REF FRU;
};

    [Description (
      "The CIM_SchemaInformation structure describes information for a "
      "specific version of a schema."),
    Indication (True),
    Structure (True),
    UMLPackagePath ("CIM::Interop::Schema"),
    Version ("2.38.0")]
class CIM_SchemaInformationStructure {

        [Description ("The status of the schema."),
        ValueMap { "0", "2", "3", ".."},
        Values { "Unknown", "Final", "Experimental", "DMTF Reserved"}]
    uint32 Status;

        [Description ("The description for this schema.")]
    string Description;

        [Description (
          "A URI (see RFC3986) that uniquely identifies this schema version. "
          "Note that this is a URI for iddentifying the schema version, not a "
          "URL for accessing it. For example, "
          "http://schemas.dmtf.org/wbem/cim-schema/2.35.0/.")]
    string URI;

        [Description (
          "The owning organization of the schema. For example, DMTF, SNIA or "
          "ACME")]
    string OwningOrganization;

        [Description (
          "The schema version in M.N.U (Major.Minor.Update) format. For "
          "example 2.36.0 or 1.0.0."),
        Required (True)]
    string Version;

        [Description (
          "The schema name (as defined in DSP0004). For example, CIM or PRS. "
          "NOTE: The schema name shall not include the underscore character."),
        Required (True)]
    string Name;
};

    [Association (True),
    Description (
      "The InstalledSoftwareElement association allows the identification of "
      "the ComputerSystem on which a particular SoftwareElement is installed."),
    UMLPackagePath ("CIM::Application::SystemSoftware"),
    Version ("2.6.0")]
class CIM_InstalledSoftwareElement {

        [Description (
          "Reference to the ComputerSystem hosting a particular "
          "SoftwareElement."),
        Key (True),
        Max (1)]
    CIM_ComputerSystem REF System;

        [Description ("Reference to the Software Element that is installed."),
        Key (True)]
    CIM_SoftwareElement REF Software;
};

    [Association (True),
    Deprecated { "CIM_ActiveConnection", "CIM_FCPort"},
    Description (
      "Note: The use of FibrePortActiveLogin is deprecated because FibrePort "
      "is deprecated. \nDeprecated description: Information for "
      "FibrePortActiveLogin is found by examining the individual FCPorts, and "
      "an ActiveConnection between the FCProtocolEndpoints that are "
      "associated with the ports. FibrePortActiveLogin indicates that two "
      "FibrePorts are connected through a login and have negotiated their "
      "Class Of Service, frame size, and other link characteristics, as "
      "specified by an instance of this class."),
    UMLPackagePath ("CIM::Device::NetworkAdapter"),
    Version ("2.10.0")]
class CIM_FibrePortActiveLogin {

        [Deprecated { "No value"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: ResponderBufferCredit reflects the buffer credit of "
          "the Port that is defined as the LoginResponder. This method is the "
          "number of frame buffers that were made available by the responder "
          "Port to the originating Port. Buffer credits are used in "
          "point-to-point connections, when an NL-Local Port is logged into "
          "another NL-Local Port, and when Nx Ports are logged into Fx Ports. "
          "In other scenarios, this value is undefined."),
        MappingStrings {
          "MIF.DMTF|Fibre Channel Bus PortExtensions|001.3"}]
    uint64 ResponderBufferCredit;

        [Deprecated { "CIM_FCPort.ActiveCOS"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: The Fibre Channel Class of Service that is currently "
          "running between the Ports. Because two Ports can be simultaneously "
          "connected at different Classes of Service, this property had to be "
          "part of the key of the object and therefore, the identity of the "
          "instance."),
        Key (True),
        MappingStrings {
          "MIF.DMTF|Fibre Channel Bus PortExtensions|001.5"},
        ModelCorrespondence { "CIM_FibreChannelAdapter.SupportedCOS"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6"},
        Values { "Unknown", "1", "2", "3", "4", "6", "F"}]
    uint16 NegotiatedCOS;

        [Deprecated { "No value"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: OriginatorEndCredit reflects the end credit of the "
          "Port that is defined as the LoginOriginator. This method is the "
          "number of frame buffers that were made available by the "
          "originating Port to the responder Port. End credits are used in "
          "point-to-point connections, when an NL-Local Port is logged into "
          "another NL-Local Port, and when Nx Ports are logged into remote Nx "
          "Ports. In other scenarios, this value is undefined."),
        MappingStrings {
          "MIF.DMTF|Fibre Channel Bus PortExtensions|001.2"}]
    uint64 OriginatorEndCredit;

        [Deprecated { "CIM_FCPort.ActiveMaximumTransmissionUnit"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: The Fibre Channel frame size, in bytes, that is "
          "currently negotiated between the two Ports."),
        PUnit ("byte"),
        Units ("Bytes")]
    uint64 NegotiatedFrameSize;

        [Deprecated { "No value"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: ResponderEndCredit reflects the end credit of the "
          "Port that is defined as the LoginResponder. This method is the "
          "number of frame buffers that were made available by the responder "
          "Port to the originating Port. End credits are used in "
          "point-to-point connections, when an NL-Local Port is logged into "
          "another NL-Local Port, and when Nx Ports are logged into remote Nx "
          "Ports. In other scenarios, this value is undefined."),
        MappingStrings {
          "MIF.DMTF|Fibre Channel Bus PortExtensions|001.2"}]
    uint64 ResponderEndCredit;

        [Deprecated { "CIM_ActiveConnection.Antecedent"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: The responder to the login."),
        Key (True)]
    CIM_FibrePort REF LoginResponder;

        [Deprecated { "No value"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: The buffer-to-buffer model that was negotiated during "
          "Port login. Either the model defined by the FC-PH standard is used "
          "(value=1, \"Regular\") or an \"Alternate\" model is negotiated."),
        ValueMap { "0", "1", "2"},
        Values { "Unknown", "Regular", "Alternate"}]
    uint16 BufferToBufferModel;

        [Deprecated { "No value"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: OriginatorBufferCredit reflects the buffer credit of "
          "the Port that is defined as the LoginOriginator. This method is "
          "the number of frame buffers that were made available by the "
          "originating Port to the responder Port. Buffer credits are used in "
          "point-to- point connections, when an NL-Local Port is logged into "
          "another NL-Local Port, and when Nx Ports are logged into Fx Ports. "
          "In other scenarios, this value is undefined."),
        MappingStrings {
          "MIF.DMTF|Fibre Channel Bus PortExtensions|001.3"}]
    uint64 OriginatorBufferCredit;

        [Deprecated { "No value"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: Acknowledgement model that is negotiated during Port "
          "login. For example, ACK-1 indicates that each frame should be "
          "acknowledged."),
        MappingStrings {
          "MIF.DMTF|Fibre Channel Bus PortExtensions|001.6"},
        ValueMap { "0", "1", "2", "3"},
        Values { "Unknown", "ACK-0", "ACK-1", "ACK-N"}]
    uint16 ACKModel;

        [Deprecated { "CIM_ActiveConnection.Dependent"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: The originator of the login."),
        Key (True)]
    CIM_FibrePort REF LoginOriginator;

        [Deprecated { "CIM_FCPort.Speed"},
        Description (
          "Note: The use of this method has been deprecated. \nDeprecated "
          "description: The speed for communications that is currently "
          "negotiated between the two Ports. Speed is specified in Bits per "
          "Second. If this information is not available, the property should "
          "be set to 0."),
        PUnit ("bit / second"),
        Units ("Bits per Second")]
    uint64 NegotiatedSpeed;
};

    [Aggregation (True),
    Association (True),
    Description (
      "CIM_CollectedCollections is an aggregation association representing "
      "that a CollectionOfMSEs can itself be contained in a CollectionOfMSEs."),
    UMLPackagePath ("CIM::Core::Collection"),
    Version ("2.10.0")]
class CIM_CollectedCollections {

        [Aggregate (True),
        Description ("The \'higher level\' or parent element in the aggregation."),
        Key (True)]
    CIM_CollectionOfMSEs REF Collection;

        [Description ("The \'collected\' Collection."),
        Key (True)]
    CIM_CollectionOfMSEs REF CollectionInCollection;
};

    [Association (True),
    Deprecated { "CIM_ElementSettingData", "CIM_ElementSetting"},
    Description (
      "Note: The Configuration class is being deprecated in lieu of using a "
      "ConcreteComponent relationship to indicate a hierarchy of Setting or "
      "SettingData instances. This association allows the reuse of the "
      "element to Setting or SettingData associations instead of defining a "
      "peer association specifically for Configurations. \nDeprecated "
      "description: This association relates a Configuration object to one or "
      "more ManagedSystemElements. The Configuration object represents a "
      "certain behavior or a desired functional state for the associated "
      "ManagedSystemElements."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.10.0")]
class CIM_ElementConfiguration {

        [Deprecated { "CIM_ElementSettingData.SettingData",
          "CIM_ElementSetting.Setting"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: The Configuration object that groups the Settings and "
          "dependencies that are associated with the ManagedSystemElement."),
        Key (True)]
    CIM_Configuration REF Configuration;

        [Deprecated { "CIM_ElementSettingData.ManagedElement",
          "CIM_ElementSetting.Element"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: The ManagedSystemElement."),
        Key (True)]
    CIM_ManagedSystemElement REF Element;
};

    [Association (True),
    Description (
      "CorrespondingSettingDataRecord is used to tie a log record to its "
      "corresponding setting data record."),
    UMLPackagePath ("CIM::System::Diagnostics"),
    Version ("2.22.0")]
class CIM_CorrespondingSettingDataRecord {

        [Description (
          "The record containing the DiagnosticSettingData that were used "
          "when the result was created."),
        Key (True)]
    CIM_DiagnosticSettingDataRecord REF SettingsRecord;

        [Description ("The record containing the result data."),
        Key (True)]
    CIM_DiagnosticRecord REF DataRecord;
};

    [Association (True),
    Description (
      "AffectedJobElement represents an association between a Job and the "
      "ManagedElement(s) that may be affected by its execution. It may not be "
      "feasible for the Job to describe all of the affected elements. The "
      "main purpose of this association is to provide information when a Job "
      "requires exclusive use of the \'affected\' ManagedElment(s) or when "
      "describing that side effects may result."),
    UMLPackagePath ("CIM::System::Processing"),
    Version ("2.15.0")]
class CIM_AffectedJobElement {

        [ArrayType ("Indexed"),
        Description (
          "Provides details for the \'effect\' at the corresponding array "
          "position in ElementEffects. This information is required whenever "
          "ElementEffects contains the value 1 (\"Other\")."),
        ModelCorrespondence { "CIM_AffectedJobElement.ElementEffects"}]
    string OtherElementEffectsDescriptions[];

        [Description ("The ManagedElement affected by the execution of the Job."),
        Key (True)]
    CIM_ManagedElement REF AffectedElement;

        [ArrayType ("Indexed"),
        Description (
          "An enumeration describing the \'effect\' on the ManagedElement. "
          "This array corresponds to the OtherElementEffectsDescriptions "
          "array, where the latter provides details related to the high-level "
          "\'effects\' enumerated by this property. Additional detail is "
          "required if the ElementEffects array contains the value 1, "
          "\"Other\"."),
        ModelCorrespondence {
          "CIM_AffectedJobElement.OtherElementEffectsDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5"},
        Values { "Unknown", "Other", "Exclusive Use",
          "Performance Impact", "Element Integrity", "Create"}]
    uint16 ElementEffects[];

        [Description ("The Job that is affecting the ManagedElement."),
        Key (True)]
    CIM_Job REF AffectingElement;
};

    [Association (True),
    Deprecated { "CIM_HostedCollection"},
    Description (
      "This association is used to define the set of Logical Networks "
      "contained in an AdminDomain. This has the implied semantics that this "
      "set of LogicalNetworks are all managed by the same network "
      "administrator that manages the domain. \n\nSince the LogicalNetwork "
      "class is deprecated in lieu of ConnectivityCollection, this "
      "association is no longer necessary. It is deprecated to the "
      "HostedCollection association, that is inherited by "
      "ConnectivityCollection from its superclass, SystemSpecificCollection."),
    UMLPackagePath ("CIM::Network::Collections"),
    Version ("2.7.0")]
class CIM_NetworksInAdminDomain {

        [Deprecated { "CIM_HostedCollection.Antecedent"},
        Description ("The AdminDomain that hosts the various LogicalNetworks."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_AdminDomain REF Domain;

        [Deprecated { "CIM_HostedCollection.Dependent"},
        Description ("The LogicalNetworks that are hosted by the AdminDomain."),
        Key (True),
        Weak (True)]
    CIM_LogicalNetwork REF Network;
};

    [Association (True),
    Description (
      "OwningJobElement represents an association between a Job and the "
      "ManagedElement responsible for the creation of the Job. This "
      "association may not be possible, given that the execution of jobs can "
      "move between systems and that the lifecycle of the creating entity may "
      "not persist for the total duration of the job. However, this can be "
      "very useful information when available. This association defines a "
      "more specific \'owner\' than is provided by the CIM_Job.Owner string."),
    ModelCorrespondence { "CIM_Job.Owner"},
    UMLPackagePath ("CIM::System::Processing"),
    Version ("2.7.0")]
class CIM_OwningJobElement {

        [Description ("The ManagedElement responsible for the creation of the Job."),
        Key (True),
        Max (1)]
    CIM_ManagedElement REF OwningElement;

        [Description ("The Job created by the ManagedElement."),
        Key (True)]
    CIM_Job REF OwnedElement;
};

    [Association (True),
    Description (
      "The ToDirectoryAction association identifies the target directory for "
      "a FileAction. When this association is used, the assumption is that "
      "the target directory was created by a previous Action. This "
      "association cannot co-exist with a ToDirectorySpecification "
      "association, since a FileAction can only involve a single target "
      "directory."),
    UMLPackagePath ("CIM::Application::CheckAction"),
    Version ("2.6.0")]
class CIM_ToDirectoryAction {

        [Description ("The destination directory of the Action."),
        Key (True),
        Max (1)]
    CIM_DirectoryAction REF DestinationDirectory;

        [Description ("The Action against the directory."),
        Key (True)]
    CIM_CopyFileAction REF FileName;
};

    [Association (True),
    Description (
      "ElementSettingData represents the association between ManagedElements "
      "and applicable setting data. This association also describes whether "
      "this is a default or current setting."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.19.1")]
class CIM_ElementSettingData {

        [Description (
          "An enumerated integer indicating that the referenced setting is a "
          "default setting for the element, or that this information is "
          "unknown."),
        ValueMap { "0", "1", "2"},
        Values { "Unknown", "Is Default", "Is Not Default"}]
    uint16 IsDefault;

        [Description ("The managed element."),
        Key (True)]
    CIM_ManagedElement REF ManagedElement;

        [Description (
          "An enumerated integer indicating whether or not the referenced "
          "setting is the next setting to be applied. For example, the "
          "application could take place on a re-initialization, reset, "
          "reconfiguration request. This could be a permanent setting, or a "
          "setting used only one time, as indicated by the flag. If it is a "
          "permanent setting then the setting is applied every time the "
          "managed element reinitializes, until this flag is manually reset. "
          "However, if it is single use, then the flag is automatically "
          "cleared after the settings are applied. Also note that if this "
          "flag is specified (i.e. set to value other than \"Unknown\"), then "
          "this takes precedence over any SettingData that may have been "
          "specified as Default. For example: If the managed element is a "
          "computer system, and the value of this flag is \"Is Next\", then "
          "the setting will be effective next time the system resets. And, "
          "unless this flag is changed, it will persist for subsequent system "
          "resets. However, if this flag is set to \"Is Next For Single "
          "Use\", then this setting will only be used once and the flag would "
          "be reset after that to \"Is Not Next\". So, in the above example, "
          "if the system reboots in a quick succession, the setting will not "
          "be used at the second reboot."),
        ValueMap { "0", "1", "2", "3"},
        Values { "Unknown", "Is Next", "Is Not Next",
          "Is Next For Single Use"}]
    uint16 IsNext;

        [Description (
          "An enumerated integer indicating that the referenced setting is "
          "currently being used in the operation of the element, or that this "
          "information is unknown."),
        ValueMap { "0", "1", "2"},
        Values { "Unknown", "Is Current", "Is Not Current"}]
    uint16 IsCurrent;

        [Description ("The SettingData object associated with the element."),
        Key (True)]
    CIM_SettingData REF SettingData;
};

    [Association (True),
    Description (
      "CIM_SAPAvailableForElement conveys the semantics of a Service Access "
      "Point that is available for a ManagedElement. When "
      "CIM_SAPAvailableForElement is not instantiated, then the SAP is "
      "assumed to be generally available. If instantiated, the SAP is "
      "available only for the associated ManagedElements. For example, a "
      "device might provide management access through a URL. This association "
      "allows the URL to be advertised for the device."),
    UMLPackagePath ("CIM::Core::Service"),
    Version ("2.10.0")]
class CIM_SAPAvailableForElement {

        [Description ("The Service Access Point that is available."),
        Key (True)]
    CIM_ServiceAccessPoint REF AvailableSAP;

        [Description ("The ManagedElement for which the SAP is available."),
        Key (True)]
    CIM_ManagedElement REF ManagedElement;
};

    [Abstract (True),
    Association (True),
    Description (
      "CIM_Dependency is a generic association used to establish dependency "
      "relationships between ManagedElements."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.10.0")]
class CIM_Dependency {

        [Description (
          "Dependent represents the object that is dependent on the "
          "Antecedent."),
        Key (True)]
    CIM_ManagedElement REF Dependent;

        [Description (
          "Antecedent represents the independent object in this association."),
        Key (True)]
    CIM_ManagedElement REF Antecedent;
};

    [Aggregation (True),
    Association (True),
    Deprecated { "No value"},
    Description (
      "This class is being deprecated. Tests should be grouped at the test "
      "level, not by the model. Therefore, this association is no longer "
      "appropriate. /n This is an association class that identifies a "
      "Diagnostic Result as made up of lower level Results. In this case, the "
      "Result identified as the PackageResult reference (i.e., the higher "
      "level result) would have its IsPackage property set to TRUE."),
    UMLPackagePath ("CIM::System::Diagnostics"),
    Version ("2.7.0")]
class CIM_DiagnosticResultInPackage {

        [Deprecated { "No value"},
        Description (
          "The DiagnosticResult object that is one of the elements of the "
          "package."),
        Key (True)]
    CIM_DiagnosticResult REF Result;

        [Aggregate (True),
        Deprecated { "No value"},
        Description (
          "The DiagnosticResult object that acts as the container for all the "
          "results of the package."),
        Key (True)]
    CIM_DiagnosticResult REF PackageResult;
};

    [Association (True),
    Description (
      "CIM_RelatedStatistics is an association that defines hierarchies "
      "and/or dependencies of related CIM_Statistical Information classes."),
    UMLPackagePath ("CIM::Core::Statistics"),
    Version ("2.6.0")]
class CIM_RelatedStatistics {

        [Description ("The statistic information/object."),
        Key (True)]
    CIM_StatisticalInformation REF Stats;

        [Description ("The related statistics or metrics."),
        Key (True)]
    CIM_StatisticalInformation REF RelatedStats;
};

    [Aggregation (True),
    Association (True),
    Composition (True),
    Description (
      "This aggregation establishes \'whole-part\' relationships between an "
      "AutonomousSystem and the BGPClusters that it contains."),
    UMLPackagePath ("CIM::Network::BGP"),
    Version ("2.7.0")]
class CIM_BGPClustersInAS {

        [Description ("The Clusters that are contained in the AS."),
        Key (True)]
    CIM_BGPCluster REF PartAS;

        [Aggregate (True),
        Description (
          "The AutonomousSystem that aggregates the Clusters belonging to it "
          "and administers them."),
        Key (True),
        Max (1)]
    CIM_AutonomousSystem REF GroupAS;
};

    [Association (True),
    Description (
      "This relationship defines a context (e.g., a System or Service) of a "
      "Credential. One example is a shared secret/ password which is defined "
      "within the context of an application (or Service). Generally, there is "
      "one scoping element for a Credential, however the multiplicities of "
      "the association allow a Credential to be scoped by more than one "
      "element. If this association is not instantiated for a Credential, "
      "that Credential is assumed to be scoped to the Namespace.\nThis "
      "association may also be used to indicate that a Credential is valid in "
      "some other environment. For instance associating the Credential to a "
      "RemoteServiceAccessPoint would indicate that the Credential is used to "
      "access the remote service."),
    UMLPackagePath ("CIM::User::Credential"),
    Version ("2.27.0")]
class CIM_CredentialContext {

        [Description (
          "The usage of the certificate by the managed element that the "
          "certificate is for or is scoped to. Owned - Credential represents "
          "the CredentialContexts identity. This means that the managed "
          "element will present this credential to another party for "
          "authentication, authorization, or both. Trusted - The "
          "ManagedElement trusts the credential. This means that the "
          "credential is trusted for one or more of the security operations "
          "such as authentication, third-party authentication, and "
          "authorization. Trusted for Authentication - The ManagedElement "
          "trusts the identity represented by the credential only for "
          "authentication purposes. Trusted for Authorization - The "
          "ManagedElement trusts the identity represented by the credential "
          "only for authorization purposes. Trusted for "
          "Authentication/Authorization - The ManagedElement trusts the "
          "identity represented by the credential both for authentication and "
          "authorization purposes. Trusted for Third-Party "
          "Authentication/Authorization - The credential is being trusted for "
          "approving a third-party credential to the ManagedElement."),
        ValueMap { "2", "3", "4", "6", "7", "8", "..", "32768..65535"},
        Values { "Owned", "Trusted", "Trusted for Authentication",
          "Trusted for Authorization",
          "Trusted for Authentication/Authorization",
          "Trusted for Third-Party Authentication/Authorization",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 Usage;

        [Description ("A Credential whose context is defined."),
        Key (True)]
    CIM_Credential REF ElementInContext;

        [Description (
          "The ManagedElement that provides context or scope for the "
          "Credential."),
        Key (True)]
    CIM_ManagedElement REF ElementProvidingContext;
};

    [Association (True),
    Description (
      "The FromDirectoryAction association identifies the source directory "
      "for a FileAction. When this association is used, the assumption is "
      "that the source directory was created by a previous Action. This "
      "association cannot co-exist with a FromDirectorySpecification "
      "association, since a FileAction can only involve a single source "
      "directory."),
    UMLPackagePath ("CIM::Application::CheckAction"),
    Version ("2.6.0")]
class CIM_FromDirectoryAction {

        [Description ("The source directory of the Action."),
        Key (True),
        Max (1)]
    CIM_DirectoryAction REF SourceDirectory;

        [Description ("The Action against the directory."),
        Key (True)]
    CIM_FileAction REF FileName;
};

    [Association (True),
    Description (
      "The IETF\'s RFC2597 describes a Differentiated Services "
      "Per-Hop-Behavior (PHB) Group called Assured Forwarding (AF). Quoting "
      "from the RFC, \'The AF PHB group provides delivery of IP packets in "
      "four independently forwarded AF classes. Within each AF class, an IP "
      "packet can be assigned one of three different levels of drop "
      "precedence.\' The AFRelatedServices association describes the "
      "precedence of the individual AF drop-related Services within an AF IP "
      "packet-forwarding class."),
    UMLPackagePath ("CIM::Network::QoS"),
    Version ("2.6.0")]
class CIM_AFRelatedServices {

        [Description (
          "An AFService at the same IP packet-forwarding class level, but at "
          "a higher drop precedence."),
        Key (True)]
    CIM_AFService REF AFHigherDropPrecedence;

        [Description (
          "The AFService with a lower drop precedence (ie, lower probability "
          "of dropping packets)."),
        Key (True),
        Max (1)]
    CIM_AFService REF AFLowerDropPrecedence;
};

    [Association (True),
    Description (
      "The Role object class is used to represent a position or set of "
      "responsibilities within an organization, organizational unit or other "
      "scope. When explicitly restricting the target elements that may be "
      "accessed from this Role, this association MUST be used."),
    UMLPackagePath ("CIM::User::Role"),
    Version ("2.20.0")]
class CIM_RoleLimitedToTarget {

        [Description ("The Role whose target set is explicitly defined."),
        Key (True)]
    CIM_Role REF DefiningRole;

        [Description (
          "Reference to the target set that can be accessed from the Role."),
        Key (True)]
    CIM_ManagedElement REF TargetElement;
};

    [Association (True),
    Deprecated { "CIM_IsSpare"},
    Description (
      "The ActsAsSpare association indicates which elements can spare or "
      "replace the other aggregated elements. The fact that a spare can "
      "operate in \"hot standby\" mode is specified on an element by element "
      "basis. \nThe use of this class is being deprecated in lieu of using "
      "the IsSpare relationship."),
    UMLPackagePath ("CIM::Core::Redundancy"),
    Version ("2.8.1000")]
class CIM_ActsAsSpare {

        [Deprecated { "CIM_IsSpare.Dependent"},
        Description ("The SpareGroup."),
        Key (True)]
    CIM_SpareGroup REF Group;

        [Deprecated { "CIM_IsSpare.Antecedent"},
        Description (
          "A ManagedSystemElement acting as a spare and participating in the "
          "SpareGroup."),
        Key (True)]
    CIM_ManagedSystemElement REF Spare;

        [Deprecated { "CIM_IsSpare.SpareStatus"},
        Description (
          "HotStandby is a boolean indicating that the spare is operating as "
          "a hot standby.")]
    boolean HotStandby;
};

    [Aggregation (True),
    Association (True),
    Description (
      "CIM_OrgStructure is an association used to establish parent-child "
      "relationships between OrganizationalEntity instances. This is used to "
      "capture organizational relationships between object instances such as "
      "those that are imported from an LDAP-accessible directory."),
    UMLPackagePath ("CIM::User::Org"),
    Version ("2.6.0")]
class CIM_OrgStructure {

        [Aggregate (True),
        Description ("The organizational parent in this association."),
        Key (True),
        Max (1)]
    CIM_OrganizationalEntity REF Parent;

        [Description (
          "The organizational child in this association, i.e., the sub-unit "
          "or other owned object instance."),
        Key (True)]
    CIM_OrganizationalEntity REF Child;
};

    [Association (True),
    Description (
      "AssociatedJobMethodResult represents an association between a "
      "ConcreteJob and the MethodResult expressing the parameters for the Job "
      "when the job was created by side-effect of the execution of an "
      "extrinsic method."),
    UMLPackagePath ("CIM::System::Processing"),
    Version ("2.31.0")]
class CIM_AssociatedJobMethodResult {

        [Description ("The associated ConcreteJob."),
        Key (True),
        Max (1)]
    CIM_ConcreteJob REF Job;

        [Description ("The associated MethodResult."),
        Key (True),
        Max (1)]
    CIM_MethodResult REF JobParameters;
};

    [Aggregation (True),
    Association (True),
    Deprecated { "CIM_ConcreteComponent"},
    Description (
      "Note: The Configuration class is being deprecated in lieu of using a "
      "ConcreteComponent relationship to indicate a hierarchy of instances of "
      "Setting or SettingData. Therefore, the aggregation of Settings into "
      "Configurations is replaced by the ConcreteComponent relationship "
      "between instances of Settings and SettingData. \nDeprecated "
      "description: This relationship associates Configuration objects with "
      "Setting objects. For example, Settings of a NetworkAdapter could "
      "change based on the site or network to which its hosting "
      "ComputerSystem is attached. In this case, the ComputerSystem would "
      "have two different Configuration objects, corresponding to the "
      "differences in network configuration for the two network segments. "
      "Configuration A would aggregate a Setting object for the "
      "NetworkAdapter when operating on segment \"ANet\", whereas "
      "Configuration B would aggregate a different NetworkAdapter Setting "
      "object, specific to segment \"BNet\". Note that many Settings of the "
      "computer are independent of the network Configuration. For example, "
      "both Configurations A and B would aggregate the same Setting object "
      "for the MonitorResolution of the ComputerSystem."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.10.0")]
class CIM_SettingContext {

        [Deprecated { "CIM_ConcreteComponent.PartComponent"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: An aggregated Setting."),
        Key (True)]
    CIM_Setting REF Setting;

        [Aggregate (True),
        Deprecated { "CIM_ConcreteComponent.GroupComponent"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: The Configuration object that aggregates the Setting."),
        Key (True)]
    CIM_Configuration REF Context;
};

    [Aggregation (True),
    Association (True),
    Composition (True),
    Description ("Indicates the PhysicalElements that make up a FRU."),
    UMLPackagePath ("CIM::Core::ProductFRU"),
    Version ("2.7.0")]
class CIM_FRUPhysicalElements {

        [Description ("The PhysicalElement which is a part of the FRU."),
        Key (True)]
    CIM_PhysicalElement REF Component;

        [Aggregate (True),
        Description ("The FRU."),
        Key (True),
        Max (1)]
    CIM_FRU REF FRU;
};

    [Association (True),
    Description (
      "CIM_ElementStatisticalData is an association that relates a "
      "ManagedElement to its StatisticalData. Note that the cardinality of "
      "the ManagedElement reference is Min(1), Max(1). This cardinality "
      "mandates the instantiation of the ElementStatisticalData association "
      "for the referenced instance of CIM_StatisticalData. "
      "ElementStatisticalData describes the existence requirements and "
      "context for the CIM_StatisticalData, relative to a specific "
      "ManagedElement."),
    UMLPackagePath ("CIM::Core::Statistics"),
    Version ("2.7.0")]
class CIM_ElementStatisticalData {

        [Description ("The statistic information/object."),
        Key (True)]
    CIM_StatisticalData REF Stats;

        [Description (
          "The ManagedElement for which statistical or metric data is defined."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_ManagedElement REF ManagedElement;
};

    [Association (True),
    Description (
      "NextService establishes a predecessor-successor relationship between "
      "two ConditioningService objects. This association is used to indicate "
      "the sequence of ConditioningServices required to process a particular "
      "type of traffic. \n\nInstances describe the various relationships "
      "between different ConditioningServices (such as classifiers, meters, "
      "droppers, etc.) that are used collectively to condition traffic. Both "
      "one-to-one and more complicated fan-in and/or fan-out relationships "
      "can be described. The Conditioning Services may feed one another "
      "directly, or they may be mapped to multiple \'next\' Services based on "
      "the characteristics of the packet."),
    UMLPackagePath ("CIM::Network::QoS"),
    Version ("2.7.0")]
class CIM_NextService {

        [Description (
          "The preceding ConditioningService, \'earlier\' in the processing "
          "sequence for a packet."),
        Key (True)]
    CIM_ConditioningService REF PrecedingService;

        [Description ("The \'next\' or following ConditioningService."),
        Key (True)]
    CIM_ConditioningService REF FollowingService;
};

    [Association (True),
    Deprecated { "No value"},
    Description (
      "A LogicalNetworkService represents network services that either "
      "originate and/or terminate in a LogicalNetwork. This association is "
      "deprecated since LogicalNetworks aggregate ProtocolEndpoints, not "
      "their backing Services."),
    UMLPackagePath ("CIM::Network::RoutingForwarding"),
    Version ("2.7.0")]
class CIM_LogicalNetworkService {

        [Deprecated { "No value"},
        Description ("The NetworkService that is running in the LogicalNetwork."),
        Key (True)]
    CIM_NetworkService REF NetworkService;

        [Deprecated { "No value"},
        Description (
          "An enumeration that explicitly defines this network service as "
          "originating, terminating, or residing in this LogicalNetwork."),
        ValueMap { "0", "1", "2", "3"},
        Values { "Unknown", "Originates In", "Terminates In",
          "Resides In"}]
    uint16 ContainmentType;

        [Deprecated { "No value"},
        Description ("The LogicalNetwork that contains the network service."),
        Key (True)]
    CIM_LogicalNetwork REF Network;
};

    [Association (True),
    Description (
      "ElementSetting represents the association between "
      "ManagedSystemElements and the Setting classes defined for them."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.10.0")]
class CIM_ElementSetting {

        [Description (
          "The Setting object that is associated with the "
          "ManagedSystemElement."),
        Key (True)]
    CIM_Setting REF Setting;

        [Description ("The ManagedSystemElement."),
        Key (True)]
    CIM_ManagedSystemElement REF Element;
};

    [Aggregation (True),
    Association (True),
    Deprecated { "No value"},
    Description (
      "Note: The Configuration class is being deprecated in lieu of using a "
      "ConcreteComponent relationship to indicate a hierarchy of Setting or "
      "SettingData instances. Therefore, this association is also deprecated "
      "but it is deprecated to \"No value\" because there are no equivalent "
      "relationships currently defined for the Setting or SettingData "
      "classes. This association is an anomaly because it defines what cannot "
      "be expressed for the components of the Configuration. Also, it singles "
      "out the Dependency association as opposed to allowing any "
      "relationships to be defined as \"settings\". Its use in the industry "
      "is discouraged. \nDeprecated description: This relationship associates "
      "a Dependency with one or more Configuration objects. For example, "
      "dependencies for a ComputerSystem could change based on the site or "
      "network to which the System is attached."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.10.0")]
class CIM_DependencyContext {

        [Deprecated { "No value"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: An aggregated Dependency."),
        Key (True)]
    CIM_Dependency REF Dependency;

        [Aggregate (True),
        Deprecated { "No value"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: The Configuration object that aggregates the "
          "Dependency."),
        Key (True)]
    CIM_Configuration REF Context;
};

    [Association (True),
    Description (
      "CIM_ProductSupport is an association between Product and SupportAccess "
      "that conveys how support is obtained for the Product. This is a "
      "many-to-many relationship, implying that various types of Support are "
      "available for a Product, and that the same Support object can provide "
      "assistance for multiple Products."),
    UMLPackagePath ("CIM::Core::ProductFRU"),
    Version ("2.6.0")]
class CIM_ProductSupport {

        [Description ("The Product."),
        Key (True)]
    CIM_Product REF Product;

        [Description ("Support for the Product."),
        Key (True)]
    CIM_SupportAccess REF Support;
};

    [Description (
      "CIM_GenericOperationCapabilitiesStructure defines a structure of the "
      "generic operations capabilities supported by a WBEM implementation "
      "(e.g. WBEM Server, WBEM Protocol, WBEM Provider, ...). One use of this "
      "strucutre would be to add to a capabilities class and associate via "
      "CIM_ElementCapabilities. For more information, see Generic Operations "
      "(DSP0223)."),
    Indication (True),
    Structure (True),
    UMLPackagePath ("CIM::Interop::Operations"),
    Version ("2.38.0")]
class CIM_GenericOperationCapabilitiesStructure {

        [ArrayType ("Indexed"),
        Description (
          "If OperationsSupported has the value 1 (Other), then the "
          "corresponding element in this array shall have the name of the "
          "operation."),
        ModelCorrespondence {
          "CIM_GenericOperationCapabilitiesStructure.OperationsSupported"}]
    string OtherOperationsSupportedDescriptions[];

        [Description (
          "Is ContinueOnError supported as defined in Generic Operations "
          "(DSP0223)?")]
    boolean ContinueOnErrorSupported;

        [Description (
          "OperationTimeout is defined in Generic Operations (DSP0223). It is "
          "used to determine when the WBEM Server can close an enumeration "
          "session. MaximumOperationTimeout is the maximum number of seconds "
          "allowed for the OperationTimeout parameter. If the value is 0, "
          "then there is no operation timeout. That is, the enumeration "
          "session is never closed based on time."),
        PUnit ("second")]
    uint32 MaximumOperationTimeout;

        [ArrayType ("Indexed"),
        Description (
          "The list of Generic Operations supported. Generic Operations are "
          "defined in DSP0223."),
        ModelCorrespondence {
          "CIM_GenericOperationCapabilitiesStructure.OtherOperationsSupportedD"
          "escriptions"},
        ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
          "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
          "31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
          ".."},
        Values { "Other", "GetInstance", "DeleteInstance",
          "ModifyInstance", "CreateInstance", "EnumerateInstances",
          "EnumerateInstanceNames", "Associators", "AssociatorNames",
          "References", "ReferenceNames", "OpenEnumerateInstances",
          "OpenEnumerateInstancePaths", "OpenAssociators",
          "OpenAssociatorPaths", "OpenReferences", "OpenReferencePaths",
          "OpenQueryInstances", "PullInstancesWithPath",
          "PullInstancePaths", "PullInstances", "CloseEnumeration",
          "EnumerationCount", "InvokeMethod", "InvokeStaticMethod",
          "GetClass", "DeleteClass", "ModifyClass", "CreateClass",
          "EnumerateClasses", "EnumerateClassNames", "AssociatorClasses",
          "AssociatorClassPaths", "ReferenceClasses",
          "ReferenceClassPaths", "GetQualifierType",
          "DeleteQualifierType", "ModifyQualifierType",
          "CreateQualifierType", "EnumerateQualifierTypes",
          "DMTF Reserved"}]
    uint32 OperationsSupported[];

        [Description ("Is FQL (Filter Query Language, DSP0212) supported?")]
    boolean FQLSupported;

        [Description (
          "CQLSupport describes the levels of CQL Supported. If Not Supported "
          "the array shall have a single entry of 0 (Not Supported). For more "
          "information refer to the CIM Query Language Specification, DSP0202."),
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", ".."},
        Values { "Not Supported", "Basic Query", "Simple Join",
          "Complex Join", "Subquery", "Result Set Operations",
          "Extended Select List", "Embedded Properties", "Aggregations",
          "Regular Expression Like", "Array Range", "Satisfies Array",
          "Foreign Namespace Support", "Arithmetic Expression",
          "Full Unicode Support", "Conversion Utilities",
          "Property Scoping", "Association Traversal", "DMTF Reserved"}]
    uint32 CQLSupport[];

        [Description (
          "OperationTimeout is defined in Generic Operations (DSP0223). It is "
          "used to determine when the WBEM Server can close an enumeration "
          "session. MinimumOperationTimeout is the minimum number of seconds "
          "allowed for the OperationTimeout parameter."),
        PUnit ("second")]
    uint32 MinimumOperationTimeout;
};

    [Association (True),
    Description (
      "CIM_RelatedStatisticalData is an association that defines hierarchies "
      "and/or dependencies of related CIM_Statistical Data classes."),
    UMLPackagePath ("CIM::Core::Statistics"),
    Version ("2.7.0")]
class CIM_RelatedStatisticalData {

        [Description ("The statistic information/object."),
        Key (True)]
    CIM_StatisticalData REF Stats;

        [Description ("A free-form string describing how the statistics are related.")]
    string Description;

        [Description ("The related statistics."),
        Key (True)]
    CIM_StatisticalData REF RelatedStats;
};

    [Association (True),
    Description (
      "This association labels an element with a security sensitivity.\nThis "
      "association is not used to indicate clearance of a security principal, "
      "see IdentitySecurityClearance."),
    UMLPackagePath ("CIM::User::SecurityLevel"),
    Version ("2.14.0")]
class CIM_ElementSecuritySensitivity {

        [Description ("The security sensitivity level of the element."),
        Key (True)]
    CIM_SecuritySensitivity REF SecurityLevel;

        [Description ("The element which is assigned a sensitivity level."),
        Key (True)]
    CIM_ManagedElement REF ManagedElement;
};

    [Association (True),
    Description (
      "This relationship associates an Identity to a specific ManagedElement, "
      "whose trust and account information is represented."),
    UMLPackagePath ("CIM::User::Identity"),
    Version ("2.14.0")]
class CIM_AssignedIdentity {

        [Description ("An Identity of the referenced ManagedElement."),
        Key (True)]
    CIM_Identity REF IdentityInfo;

        [Description (
          "The ManagedElement assigned to or representing a specific Identity."),
        Key (True)]
    CIM_ManagedElement REF ManagedElement;
};

    [Association (True),
    Description (
      "Indicates that two ManagedElements were aligned or made to be "
      "equivalent at the specified point in time. If the Boolean property "
      "SyncMaintained is true, then synchronization of the Elements is "
      "preserved. Both like and unlike objects can be synchronized. For "
      "example, two WatchDog timers can be aligned, or the contents of a "
      "LogicalFile can be synchronized with the contents of a StorageExtent."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.10.0")]
class CIM_Synchronized {

        [Description (
          "SystemElement represents one ManagedElement that is synchronized "
          "with the entity referenced as SyncedElement."),
        Key (True)]
    CIM_ManagedElement REF SystemElement;

        [Description (
          "SyncedElement represents another ManagedElement that is "
          "synchronized with the entity referenced as SystemElement."),
        Key (True)]
    CIM_ManagedElement REF SyncedElement;

        [Description ("The point in time that the Elements were synchronized.")]
    datetime WhenSynced;

        [Description ("Boolean indicating whether synchronization is maintained.")]
    boolean SyncMaintained;
};

    [Association (True),
    Description (
      "CorrespondingSettingsRecord is used to tie a log record to its "
      "corresponding setting data record."),
    UMLPackagePath ("CIM::System::Diagnostics"),
    Version ("2.9.0")]
class CIM_CorrespondingSettingsRecord {

        [Description (
          "The record containing the DiagnosticSetting data that were used "
          "when the result was created."),
        Key (True)]
    CIM_DiagnosticSettingRecord REF SettingsRecord;

        [Description ("The record containing the result data."),
        Key (True)]
    CIM_DiagnosticRecord REF DataRecord;
};

    [Aggregation (True),
    Association (True),
    Composition (True),
    Description (
      "LogManagesRecord describes the aggregation or location of Records "
      "managed by a Log."),
    UMLPackagePath ("CIM::System::Logs"),
    Version ("2.9.0")]
class CIM_LogManagesRecord {

        [Description ("The record managed by the Log."),
        Key (True)]
    CIM_RecordForLog REF Record;

        [Aggregate (True),
        Description ("The Log."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_Log REF Log;
};

    [Association (True),
    Description (
      "CIM_ServiceProcess is an association used to establish relationships "
      "between Services and Processes. It is used to indicate if a Service is "
      "running in a particular Process. It is also used to indicate, via the "
      "ExecutionType property, if the Service started and is wholly "
      "responsible for the Process, or if the Service is running in an "
      "existing Process, perhaps with other unrelated Services, which is "
      "owned or started by a different entity."),
    UMLPackagePath ("CIM::System::Processing"),
    Version ("2.14.0")]
class CIM_ServiceProcess {

        [Description ("The Process which represents or hosts the executing Service."),
        Key (True)]
    CIM_Process REF Process;

        [Description ("The Service whose Process is described by this association."),
        Key (True)]
    CIM_Service REF Service;

        [Description (
          "Enumeration indicating how the Service runs in the context of, or "
          "owns the Process. \"Unknown\" indicates that the ExecutionType is "
          "not known. \"Other\" indicates that the ExecutionType does not "
          "match any of the values in the ExecutionType enumeration. "
          "\"Executes in Existing Process\" indicates that the Service is "
          "hosted in a Process that already exists in the system. The "
          "lifecycle of the Service is separate from that of the Process. "
          "\"Exeutes as Independent Process\" indicates that the Service is "
          "responsible for the lifecycle of the Process. When the Service is "
          "started, the Process is created. For example, ServletEngines can "
          "run \"InProcess\" within the existing Apache processes or "
          "\"OutOfProcess\" in its own servlet engine process. In this case "
          "the Apache process would communicate with the servlet engine "
          "process based on the content of the request. The association may "
          "be many to many."),
        ValueMap { "0", "1", "2", "3"},
        Values { "Unknown", "Other", "Executes in Existing Process",
          "Executes as Independent Process"}]
    uint16 ExecutionType;
};

    [Association (True),
    Description (
      "This association describes a predecessor-successor relationship "
      "between a MeterService and one or more ConditioningService objects "
      "that process traffic from the meter. For example, for devices that "
      "implement preamble marking, the FollowingService reference (after the "
      "meter) is a PreambleMarkerService - to record the results of the "
      "metering in the preamble. \n\nIt might be expected that the "
      "NextServiceAfterMeter association would subclass from NextService. "
      "However, meters are 1:n fan-out elements, and require a mechanism to "
      "distinguish between the different results/outputs of the meter. "
      "Therefore, this association defines a new key property, MeterResult, "
      "which is used to record the result and identify the output through "
      "which this traffic left the meter."),
    UMLPackagePath ("CIM::Network::QoS"),
    Version ("2.7.0")]
class CIM_NextServiceAfterMeter {

        [Description (
          "The preceding MeterService, \'earlier\' in the processing sequence "
          "for a packet."),
        Key (True)]
    CIM_MeterService REF PrecedingService;

        [Description ("The \'next\' or following ConditioningService."),
        Key (True)]
    CIM_ConditioningService REF FollowingService;

        [Description (
          "Information on the result of the metering. Traffic is "
          "distinguished as being conforming, non-conforming, or partially "
          "conforming. More complicated metering can be built either by "
          "extending the enumeration or by cascading meters."),
        Key (True),
        ValueMap { "0", "1", "2", "3"},
        Values { "Unknown", "Conforming", "Partially Conforming",
          "Non-Conforming"}]
    uint16 MeterResult;
};

    [Association (True),
    Description (
      "This is a top-level association, representing the relationship between "
      "a queue (QueuingService) and a SchedulingElement. The "
      "SchedulingElement, in turn, represents the information in a packet "
      "scheduling service that is specific to this queue, such as relative "
      "priority or allocated bandwidth. \n\nAlthough it cannot be expressed "
      "formally with the association cardinalities, there is an additional "
      "constraint on participation in this association. A particular instance "
      "of (a subclass of) SchedulingElement always participates either in "
      "exactly one instance of this association, or in exactly one instance "
      "of the association SchedulingServiceToSchedule."),
    UMLPackagePath ("CIM::Network::QoS"),
    Version ("2.7.0")]
class CIM_QueueToSchedule {

        [Description (
          "The queue and its QueuingService from which packets are emptied."),
        Key (True),
        Max (1)]
    CIM_QueuingService REF Queue;

        [Description ("The SchedulingElement for the input queue."),
        Key (True)]
    CIM_SchedulingElement REF SchedElement;
};

    [Association (True),
    Description (
      "CIM_ApplicationSystemDirectory is an association used to establish a "
      "relationship between an ApplicationSystem and the Directories that it "
      "uses. This is used to identify the single root installation directory "
      "for an ApplicationSystem, as well as the logical purpose of other "
      "directories utilized by the ApplicationSystem. Note: This class is "
      "intended to be a subclass of CIM_Dependency but the current "
      "specification prohibits the extension of parent keys in a subclass. "
      "This will be revisited when the specification changes to make the "
      "intended inheritance possible."),
    UMLPackagePath ("CIM::Application::DeploymentModel"),
    Version ("2.8.0")]
class CIM_ApplicationSystemDirectory {

        [Description (
          "An ApplicationSystem which depends upon the associated Directory."),
        Key (True)]
    CIM_ApplicationSystem REF Dependent;

        [Description ("A Directory which is used by the associated ApplicationSystem."),
        Key (True)]
    CIM_Directory REF Antecedent;

        [Description (
          "Name is a string representing a meaningful identifier for "
          "referring to the associated Directory in the context of the "
          "ApplicationSystem. As an example, this might be the name of the "
          "environment variable used to hold the same directory information."),
        Key (True),
        MaxLen (1024)]
    string Name;

        [ArrayType ("Indexed"),
        Description (
          "A string describing how the ApplicationSystem utilizes the "
          "associated directory when the corresponding entry in "
          "ApplicationDirectoryUses is set to 1, \"Other\". This attribute is "
          "meaningless and should be null when the corresponding entry in "
          "ApplicationDirectoryUses is set to any value other than 1."),
        ModelCorrespondence {
          "CIM_ApplicationSystemDirectory.ApplicationDirectoryUses"}]
    string OtherUseDescriptions[];

        [ArrayType ("Indexed"),
        Description (
          "ApplicationDirectoryUse is an enumerated array which indicates the "
          "purpose(s) of the associated directory within the context of the "
          "ApplicationSystem. A value of \"Root\" indicates that the "
          "associated directory is the one and only root directory for the "
          "ApplicationSystem. This would typically be the directory path in "
          "which the application is installed. For applications which are "
          "installed in multiple directories, this would represent the "
          "directory from which initial program and configuration files are "
          "loaded. A value of \"Program\" indicates that the directory "
          "contains supplemental program files used by the ApplicationSystem. "
          "A value of \"Data\" indicates that the directory is used for data "
          "storage. A value of \"Log\" indicates that the directory is used "
          "to contain log files for the ApplicationSystem. It is considered "
          "invalid for multiple associations from the same ApplicationSystem "
          "to have a value of \"Root\". The \"Unknown\" state is expected to "
          "be short-lived and would typically be seen only in the "
          "installation phase of an ApplicationSystem, if at all. A value of "
          "\"Temp\" indicates that the associated directory is used to "
          "contain temporary files created by the ApplicationSystem. The "
          "\"Other\" state should only be used in cases where none of the "
          "designated values are appropriate. This is intended to enable use "
          "of the model for unanticipated purposes and would usually signal a "
          "need to extend this enumeration through the standards process."),
        ModelCorrespondence {
          "CIM_ApplicationSystemDirectory.OtherUseDescriptions"},
        Required (True),
        ValueMap { "0", "1", "2", "3", "4", "5", "6"},
        Values { "Unknown", "Other", "Root", "Program", "Data", "Log",
          "Temp"}]
    uint16 ApplicationDirectoryUses[];
};

    [Association (True),
    Description (
      "PolicySetAppliesToElement makes explicit which PolicySets (i.e., "
      "policy rules and groups of rules) ARE CURRENTLY applied to a "
      "particular Element. This association indicates that the PolicySets "
      "that are appropriate for a ManagedElement (specified using the "
      "PolicyRoleCollection aggregation) have actually been deployed in the "
      "policy management infrastructure. Note that if the named Element "
      "refers to a Collection, then the PolicySet is assumed to be applied to "
      "all the members of the Collection."),
    UMLPackagePath ("CIM::Policy"),
    Version ("2.8.0")]
class CIM_PolicySetAppliesToElement {

        [Description (
          "The PolicyRules and/or groups of rules that are currently applied "
          "to an Element."),
        Key (True)]
    CIM_PolicySet REF PolicySet;

        [Description ("The ManagedElement to which the PolicySet applies."),
        Key (True)]
    CIM_ManagedElement REF ManagedElement;
};

    [Association (True),
    Description (
      "ParameterValueSources represents the association between a "
      "MethodParameters instance and the ManagedElement instances, which "
      "contain properties to be used to create values for the "
      "MethodParameters properties."),
    UMLPackagePath ("CIM::Core::MethodParms"),
    Version ("2.10.0")]
class CIM_ParameterValueSources {

        [Description (
          "The MethodParameters instance whose property values are to be set."),
        Key (True)]
    CIM_MethodParameters REF Parameters;

        [Description (
          "The ManagedElement that contains properties to be used to populate "
          "the values of the properties of the MethodParameters instance."),
        Key (True)]
    CIM_ManagedElement REF ValueSource;
};

    [Association (True),
    Description (
      "The CIM_DirectorySpecificationFile association identifies the "
      "directory that contains the file being checked in the CIM_ "
      "FileSpecification class."),
    UMLPackagePath ("CIM::Application::CheckAction"),
    Version ("2.6.0")]
class CIM_DirectorySpecificationFile {

        [Description ("The directory to be checked."),
        Key (True),
        Max (1)]
    CIM_DirectorySpecification REF DirectorySpecification;

        [Description ("The file to be checked."),
        Key (True)]
    CIM_FileSpecification REF FileSpecification;
};

    [Association (True),
    Description (
      "CIM_AssociatedPrivilege is an association that models the privileges "
      "that a Subject element has to access or authorize other elements to "
      "access a Target element."),
    UMLPackagePath ("CIM::User::Privilege"),
    Version ("2.22.0")]
class CIM_AssociatedPrivilege {

        [ArrayType ("Indexed"),
        Description (
          "An enumeration indicating the activities that are granted or "
          "denied. These activities apply to all entities specified in the "
          "ActivityQualifiers array.\n\"Other\" (1): indicates an activity "
          "that is not specified in this enumeration.\n\"Create\" (2), "
          "\"Delete\" (3), \"Detect\" (4), \"Read\" (5), \"Write\" (6), "
          "\"Execute\" (7): each of these values indicates that the Subject "
          "is permitted to use an operation supported by the Target. They are "
          "all straightforward except for one, 4=\"Detect\". This value "
          "indicates that the existence or presence of an entity may be "
          "determined, but not necessarily specific data (which requires the "
          "Read privilege to be true). This activity is exemplified by "
          "\'hidden files\'- if you list the contents of a directory, you "
          "will not see hidden files. However, if you know a specific file "
          "name, or know how to expose hidden files, then they can be "
          "\'detected\'. Another example is the ability to define search "
          "privileges in directory implementations.\n\"Deny Create\" (8), "
          "\"Deny Delete\" (9), \"Deny Detect\" (10), \"Deny Read\" (11), "
          "\"Deny Write\" (12), \"Deny Execute\" (13): each of these values "
          "indicates that the Subject is expressly denied permission to use "
          "an operation supported by the Target.\nAuthorize to Grant/Deny "
          "Authorization (14): this value indicates that the Subject is "
          "permitted to add any of the following values to - or remove any of "
          "the following values from - the Activities array property in any "
          "other instance of CIM_AssociatedPrivilege that references the same "
          "Target: \"Authorize to Create\" (15), \"Authorize to Delete\" "
          "(16), \"Authorize to Detect\" (17), \"Authorize to Read\" (18), "
          "\"Authorize to Write\" (19), \"Authorize to Execute\" (20), "
          "\"Authorize to Deny Create\" (21), \"Authorize to Deny Delete\" "
          "(22), \"Authorize to Deny Detect\" (23), \"Authorize to Deny "
          "Read\" (24), \"Authorize to Deny Write\" (25), and \"Authorize to "
          "Deny Execute\" (26).\n\"Authorize to Create\" (15), \"Authorize to "
          "Delete\" (16), \"Authorize to Detect\" (17), \"Authorize to Read\" "
          "(18), \"Authorize to Write\" (19), \"Authorize to Execute\" (20), "
          "\"Authorize to Deny Create\" (21), \"Authorize to Deny Delete\" "
          "(22), \"Authorize to Deny Detect\" (23), \"Authorize to Deny "
          "Read\" (24), \"Authorize to Deny Write\" (25), and \"Authorize to "
          "Deny Execute\" (26): each of these values indicates that the "
          "Subject is permitted to add value named in the string to - or "
          "remove the value from - the Activities array property in any other "
          "instance of CIM_AssociatedPrivilege that references the same "
          "Target. For example, \"Authorize to Read\" indicates that the "
          "Subject is permitted to add or remove the value \"Read\", and "
          "\"Authorize to Deny Read\" indicates that the Subject is permitted "
          "to add or remove the value \"Deny Read\"."),
        ModelCorrespondence {
          "CIM_AssociatedPrivilege.ActivityQualifiers"},
        ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
          "21", "22", "23", "24", "25", "26", "..", "16000.."},
        Values { "Other", "Create", "Delete", "Detect", "Read", "Write",
          "Execute", "Deny Create", "Deny Delete", "Deny Detect",
          "Deny Read", "Deny Write", "Deny Execute",
          "Authorize to Grant/Deny Authorization", "Authorize to Create",
          "Authorize to Delete", "Authorize to Detect",
          "Authorize to Read", "Authorize to Write",
          "Authorize to Execute", "Authorize to Deny Create",
          "Authorize to Deny Delete", "Authorize to Deny Detect",
          "Authorize to Deny Read", "Authorize to Deny Write",
          "Authorize to Deny Execute", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 Activities[];

        [Description ("The target element to which the privileges apply."),
        Key (True)]
    CIM_ManagedElement REF Target;

        [ArrayType ("Indexed"),
        Description (
          "The ActivityQualifiers property is an array of string values used "
          "to further qualify and specify the privileges granted or denied. "
          "For example, it is used to specify a set of files for which "
          "\'Read\'/\'Write\' access is permitted or denied. Or, it defines a "
          "class\' methods that may be \'Executed\'. Details on the semantics "
          "of the individual entries in ActivityQualifiers are provided by "
          "corresponding entries in the QualifierFormats array."),
        ModelCorrespondence { "CIM_AssociatedPrivilege.Activities",
          "CIM_AssociatedPrivilege.QualifierFormats"}]
    string ActivityQualifiers[];

        [Description (
          "UseKey is used to distinguish instances in case multiple instances "
          "of this association exist between the same Subject and Target. "
          "This may arise, for example, if separate instances are created for "
          "each management domain, or if the Subject has access and "
          "authorization rights to the Target.\nWithin the scope of the "
          "instantiating Namespace, UseKey opaquely and uniquely identifies "
          "an instance of this class. In order to ensure uniqueness within "
          "the NameSpace, the value of UseKey should be constructed using the "
          "following \'preferred\' algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon \':\', and where "
          "<OrgID> shall include a copyrighted, trademarked or otherwise "
          "unique name that is owned by the business entity creating/defining "
          "the UseKey, or is a registered ID that is assigned to the business "
          "entity by a recognized global authority. (This is similar to the "
          "<Schema Name>_<Class Name> structure of Schema class names.) In "
          "addition, to ensure uniqueness <OrgID> shall not contain a colon "
          "(\':\'). When using this algorithm, the first colon to appear in "
          "UseKey shall appear between <OrgID> and <LocalID>. \n<LocalID> is "
          "chosen by the business entity and should not be re-used to "
          "identify different underlying (real-world) elements. If the above "
          "\'preferred\' algorithm is not used, the defining entity shall "
          "assure that the resultant UseKey is not re-used across any UseKeys "
          "produced by this or other providers for this instance\'s "
          "NameSpace. \nFor DMTF defined instances, the \'preferred\' "
          "algorithm shall be used with the <OrgID> set to \'CIM\'."),
        Key (True)]
    string UseKey;

        [Description (
          "The RepresentsAuthorizationRights flag indicates whether the "
          "rights defined by this instance shall be interpreted as rights of "
          "Subjects to access Targets or as rights of Subjects to change "
          "those rights on/for Targets.")]
    boolean RepresentsAuthorizationRights = False;

        [ArrayType ("Indexed"),
        Description (
          "Defines the semantics of corresponding entries in the "
          "ActivityQualifiers array. An example of each of these \'formats\' "
          "and their use follows: \n- 2=Class Name. Example: If the "
          "authorization target is a CIM Service or a Namespace, then the "
          "ActivityQualifiers entries can define a list of classes that the "
          "authorized subject is able to create or delete. \n- "
          "3=<Class.>Property. Example: If the authorization target is a CIM "
          "Service, Namespace or Collection of instances, then the "
          "ActivityQualifiers entries can define the class properties that "
          "may or may not be accessed. In this case, the class names are "
          "specified with the property names to avoid ambiguity - since a CIM "
          "Service, Namespace or Collection could manage multiple classes. On "
          "the other hand, if the authorization target is an individual "
          "instance, then there is no possible ambiguity and the class name "
          "may be omitted. To specify ALL properties, the wildcard string "
          "\"*\" should be used. \n- 4=<Class.>Method. This example is very "
          "similar to the Property one, above. And, as above, the string "
          "\"*\" may be specified to select ALL methods. \n- 5=Object "
          "Reference. Example: If the authorization target is a CIM Service "
          "or Namespace, then the ActivityQualifiers entries can define a "
          "list of object references (as strings) that the authorized subject "
          "can access. \n- 6=Namespace. Example: If the authorization target "
          "is a CIM Service, then the ActivityQualifiers entries can define a "
          "list of Namespaces that the authorized subject is able to access. "
          "\n- 7=URL. Example: An authorization target may not be defined, "
          "but a Privilege could be used to deny access to specific URLs by "
          "individual Identities or for specific Roles, such as the \'under "
          "17\' Role. \n- 8=Directory/File Name. Example: If the "
          "authorization target is a FileSystem, then the ActivityQualifiers "
          "entries can define a list of directories and files whose access is "
          "protected. \n- 9=Command Line Instruction. Example: If the "
          "authorization target is a ComputerSystem or Service, then the "
          "ActivityQualifiers entries can define a list of command line "
          "instructions that may or may not be \'Executed\' by the authorized "
          "subjects. \n- 10=SCSI Command, using a format of "
          "\'CDB=xx[,Page=pp]\'. For example, the ability to select the VPD "
          "page of the Inquiry command is encoded as \'CDB=12,Page=83\' in "
          "the corresponding ActivityQualifiers entry. A \'*\' may be used to "
          "indicate all CDBs or Page numbers. \n- 11=Packets. Example: The "
          "transmission of packets is permitted or denied by the Privilege "
          "for the target (a ComputerSystem, ProtocolEndpoint, Pipe, or other "
          "ManagedSystemElement).\n- 12=Specification-defined. The semantics "
          "are defined in a a specification produced by the DMTF or other "
          "organization. The value of the corresponding ActivityQualifiers "
          "entry names the specification and the organization that produced "
          "it, and includes a label that unambiguously references the "
          "semantic definition within the specification. The value of of the "
          "corresponding ActivityQualifiers entry should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<SpecID>:<Label>, "
          "where <OrgID>, <SpecID>, and <Label> are separated by a colon (:), "
          "and where <OrgID> shall include a copyrighted, trademarked, or "
          "otherwise unique name that is owned by the business entity that is "
          "creating or defining the InstanceID or that is a registered ID "
          "assigned to the business entity by a recognized global authority. "
          "(This requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness both <OrgID> and <SpecID> shall not contain a colon "
          "(\':\'). When using this algorithm, the first colon to appear in "
          "the corresponding ActivityQualifiers entry shall appear between "
          "<OrgID> and <SpecID> and the second colon to appear in the "
          "corresponding ActivityQualifiers entry shall appear between "
          "<SpecID> and <Label>. \n<Label> is chosen by the business entity "
          "and should not be reused to identify different underlying "
          "semantics. If the above \"preferred\" algorithm is not used, the "
          "defining entity must assure that the resulting value is not reused "
          "to refer to a different specification or different semantics "
          "within defined within the same specification.\nFor DMTF-defined "
          "instances, the \"preferred\" algorithm shall be used with the "
          "<OrgID> set to \"DMTF\", and the <SpecID> set to \"DSPx\", where x "
          "is the number of a DSP published by the DMTF."),
        ModelCorrespondence {
          "CIM_AssociatedPrivilege.ActivityQualifiers"},
        ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", "11",
          "12", "..", "16000.."},
        Values { "Class Name", "<Class.>Property", "<Class.>Method",
          "Object Reference", "Namespace", "URL", "Directory/File Name",
          "Command Line Instruction", "SCSI Command", "Packets",
          "Specification-defined", "DMTF Reserved", "Vendor Reserved"}]
    uint16 QualifierFormats[];

        [Description (
          "Boolean indicating whether the Privilege is granted (TRUE) or "
          "denied (FALSE). The default is to grant permission.")]
    boolean PrivilegeGranted = True;

        [Description ("The Subject for which privileges are granted or denied."),
        Key (True)]
    CIM_ManagedElement REF Subject;
};

    [Association (True),
    Description (
      "ParametersForMethod represents the association between "
      "MethodParameters classes and a ManagedElement that has a method that "
      "can use the MethodParameters during its invocation. This association "
      "is optional. The Method Parameters instance can be passed as a "
      "parameter to a method or used to create a method signature before the "
      "method is invoked. This association is useful for finding all the "
      "valid MethodParameters instances for a particular method. It might be "
      "particularly useful for user-oriented interfaces and automated or "
      "policy driven method invocations."),
    UMLPackagePath ("CIM::Core::MethodParms"),
    Version ("2.10.0")]
class CIM_ParametersForMethod {

        [Description (
          "The name of the method that can use the referenced instance of "
          "MethodParameters during its invocation."),
        Key (True),
        MaxLen (64)]
    string MethodName;

        [Description (
          "The MethodParameters instance, which can be used by the "
          "ParametersForMethod\'s method invocation."),
        Key (True)]
    CIM_MethodParameters REF Parameters;

        [Description (
          "The ManagedElement that has a method that can use this instance of "
          "MethodParameters."),
        Key (True)]
    CIM_ManagedElement REF TheMethod;
};

    [Association (True),
    Description (
      "An association between a LocalFileSystem and its Directories "
      "indicating that the specified Directories are available for mount. "
      "When exporting an entire FileSystem, the Directory should reference "
      "the topmost directory of the FileSystem."),
    UMLPackagePath ("CIM::System::FileElements"),
    Version ("2.6.0")]
class CIM_Export {

        [Description ("The Directory exported for mount."),
        Key (True)]
    CIM_Directory REF Directory;

        [Description ("Name under which the Directory is exported.")]
    string ExportedDirectoryName;

        [Description ("The LocalFileSystem."),
        Key (True),
        Max (1)]
    CIM_LocalFileSystem REF LocalFS;
};

    [Association (True),
    Description (
      "The CIM_ElementConformsToProfile association defines the "
      "RegisteredProfiles to which the referenced ManagedElement is "
      "conformant. Note: This association may apply to any Managed Element. "
      "Typical usage will apply it to a higher level instance, such as a "
      "System, NameSpace, or Service. When applied to a higher level "
      "instance, all constituent parts MUST behave appropriately in support "
      "of the ManagedElement\'s conformance to the named RegisteredProfile."),
    UMLPackagePath ("CIM::Interop"),
    Version ("2.8.0")]
class CIM_ElementConformsToProfile {

        [Description ("The RegisteredProfile to which the ManagedElement conforms."),
        Key (True)]
    CIM_RegisteredProfile REF ConformantStandard;

        [Description ("The ManagedElement that conforms to the RegisteredProfile."),
        Key (True)]
    CIM_ManagedElement REF ManagedElement;
};

    [Association (True),
    Description (
      "AdjacentSlots describes the layout of Slots on a HostingBoard or "
      "adapter Card. Information like the distance between the Slots and "
      "whether they are \'shared\' (if one is populated, then the other Slot "
      "can not be used), is conveyed as properties of the association."),
    UMLPackagePath ("CIM::Physical::Connector"),
    Version ("2.6.0")]
class CIM_AdjacentSlots {

        [Description ("One of the adjacent Slots."),
        Key (True)]
    CIM_Slot REF SlotA;

        [Description (
          "Slots can be located in close proximity on Hosting Boards or other "
          "Cards, such that if one of these Slots is populated by an adapter "
          "Card, the other Slot must be left empty. This relationship is "
          "indicated by the SharedSlots boolean set to TRUE.")]
    boolean SharedSlots;

        [Description ("The \'other\' adjacent Slot."),
        Key (True)]
    CIM_Slot REF SlotB;

        [Description ("The distance, in inches, between adjacent Slots."),
        PUnit ("inch"),
        Units ("Inches")]
    real32 DistanceBetweenSlots;
};

    [Aggregation (True),
    Association (True),
    Composition (True),
    Deprecated { "CIM_ProductPhysicalComponent"},
    Description (
      "Indicates the PhysicalElement(s) that make up a Product. This "
      "association is deprecated in order to correctly place it in the "
      "inheritance hierarchy and align the definition with other new classes "
      "that are being added to the model, such as "
      "CIM_ProductServiceComponent. ProductPhysicalElements was defined in "
      "the original CIM V2.0 release, when a Managed Element and a Component "
      "relationship between ManagedElements did not exist."),
    UMLPackagePath ("CIM::Core::ProductFRU"),
    Version ("2.7.0")]
class CIM_ProductPhysicalElements {

        [Aggregate (True),
        Deprecated { "CIM_ProductPhysicalComponent.GroupComponent"},
        Description ("The Product."),
        Key (True),
        Max (1)]
    CIM_Product REF Product;

        [Deprecated { "CIM_ProductPhysicalComponent.PartComponent"},
        Description ("The PhysicalElement which is a part of the Product."),
        Key (True)]
    CIM_PhysicalElement REF Component;
};

    [Association (True),
    Description (
      "This relationship defines a context (e.g., a System or Service) of an "
      "Identity. Note that the cardinalities of this association are many to "
      "many, indicating that the Identity MAY be scoped by several elements. "
      "However, it is likely that there will only be a single scope, if one "
      "exists at all."),
    UMLPackagePath ("CIM::User::Identity"),
    Version ("2.8.0")]
class CIM_IdentityContext {

        [Description ("An Identity whose context is defined."),
        Key (True)]
    CIM_Identity REF ElementInContext;

        [Description (
          "The ManagedElement that provides context or scope for the Identity."),
        Key (True)]
    CIM_ManagedElement REF ElementProvidingContext;
};

    [Aggregation (True),
    Association (True),
    Description (
      "InstalledProductImage identifies the collection of Software Features "
      "and SoftwareElements that are the result of the installation of the "
      "referenced Product."),
    UMLPackagePath ("CIM::Application::InstalledProduct"),
    Version ("2.6.0")]
class CIM_InstalledProductImage {

        [Aggregate (True),
        Description ("The product that has been installed."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_Product REF Product;

        [Description (
          "The collection containing the set of SoftwareFeatures and "
          "SoftwareElements that are the result of installing the Product."),
        Key (True),
        Weak (True)]
    CIM_InstalledProduct REF Collection;
};

    [Association (True),
    Description (
      "The ToDirectorySpecification association identifies the target "
      "directory for a FileAction. When this association is used, the "
      "assumption is that the target directory already exists. This "
      "association cannot co-exist with a ToDirectoryAction association, "
      "since a FileAction can only involve a single target directory."),
    UMLPackagePath ("CIM::Application::CheckAction"),
    Version ("2.6.0")]
class CIM_ToDirectorySpecification {

        [Description ("The destination directory of the Action."),
        Key (True),
        Max (1)]
    CIM_DirectorySpecification REF DestinationDirectory;

        [Description ("The Action against the directory."),
        Key (True)]
    CIM_CopyFileAction REF FileName;
};

    [Association (True),
    Description (
      "CIM_ProductProductDependency is an association between two Products, "
      "indicating that one must be installed, or must be absent, for the "
      "other to function. This is conceptually equivalent to the "
      "ServiceServiceDependency association."),
    UMLPackagePath ("CIM::Core::ProductFRU"),
    Version ("2.6.0")]
class CIM_ProductProductDependency {

        [Description (
          "The nature of the Product dependency. This property describes that "
          "the associated Product must be installed (value=2) or must be "
          "absent (value=3) in order for the Product to function."),
        ValueMap { "0", "1", "2", "3"},
        Values { "Unknown", "Other", "Product Must Be Installed",
          "Product Must Not Be Installed"}]
    uint16 TypeOfDependency;

        [Description ("The Product that is dependent on another Product."),
        Key (True)]
    CIM_Product REF DependentProduct;

        [Description ("The required Product."),
        Key (True)]
    CIM_Product REF RequiredProduct;
};

    [Association (True),
    Description (
      "This is a top-level association, representing the relationship between "
      "a scheduler (PacketSchedulingService) and a SchedulingElement, in a "
      "configuration involving cascaded schedulers. The SchedulingElement, in "
      "turn, represents the information in a packet scheduling service that "
      "is specific to this scheduler, such as relative priority or allocated "
      "bandwidth. \n\nAlthough it cannot be expressed formally with the "
      "association cardinalities, there is an additional constraint on "
      "participation in this association. A particular instance of (a "
      "subclass of) SchedulingElement always participates either in exactly "
      "one instance of this association, or in exactly one instance of the "
      "association QueueToSchedule."),
    UMLPackagePath ("CIM::Network::QoS"),
    Version ("2.7.0")]
class CIM_SchedulingServiceToSchedule {

        [Description ("A SchedulingElement in the subsequent scheduler."),
        Key (True)]
    CIM_SchedulingElement REF SchedElement;

        [Description ("The scheduler being cascaded."),
        Key (True),
        Max (1)]
    CIM_PacketSchedulingService REF SchedService;
};

    [Deprecated { "CIM_DiagnosticServiceRecord"},
    Description (
      "When a DiagnosticTest Service is running, test results are reported "
      "using a DiagnosticResult object, or one of its subclasses. A "
      "DiagnosticTest may be running because its Service is Started or due to "
      "an invocation of the RunTest method. Diagnostic Results are related to "
      "their Test via an instance of the DiagnosticResultsForMSE association. "
      "\nFor every running of DiagnosticTest, a new instance of "
      "DiagnosticResult, or one of it\'s subclasses should be created."),
    UMLPackagePath ("CIM::System::Diagnostics"),
    Version ("2.7.0")]
class CIM_DiagnosticResult {

        [Deprecated { "CIM_DiagnosticSettingRecord.HaltOnError"},
        Description (
          "When this flag is true, the test will halt after finding the first "
          "error."),
        Write (True)]
    boolean HaltOnError;

        [Deprecated { "CIM_DiagnosticSetting.LogOptions"},
        Description (
          "Sets the level of warning messages to be logged. If for example no "
          "warning information is required, the level would be set to \"No "
          "Warnings\" (value=0). Using \"Missing Resources\" (value=1) will "
          "cause warnings to be generated when required resources or hardware "
          "are not found. Setting the value to 2, \"Testing Impacts\", "
          "results in both missing resources and \'test impact\' warnings "
          "(for example, multiple retries required) to be reported."),
        ValueMap { "0", "1", "2", "3"},
        Values { "No Warnings", "Missing Resources", "Testing Impacts",
          "All Warnings"},
        Write (True)]
    uint16 TestWarningLevel;

        [Deprecated { "No value"},
        Description ("The scoping Test\'s SystemCreationClassName."),
        Key (True),
        MaxLen (256),
        Propagated ("CIM_DiagnosticTest.SystemCreationClassName")]
    string DiagSystemCreationClassName;

        [Deprecated { "No value"},
        Description (
          "This property is being deprecated. Tests should be grouped at the "
          "test level, not by the model. /n If this property is TRUE, then "
          "this DiagnosticResult summarizes the results from the execution of "
          "a packaged set of DiagnosticTests. The Tests in the package can be "
          "identified by following the DiagnosticResultForTest association to "
          "the test and then using the DiagnosticTest InPackage aggregation. "
          "The individual Results can be broken out by instantiating "
          "DiagnosticResults for the individual lower level tests and "
          "aggregating into the \'summary\' Result using the "
          "DiagnosticResultInPackage association.")]
    boolean IsPackage;

        [Deprecated { "No value"},
        Description ("The date and time when this test completed.")]
    datetime TestCompletionTime;

        [Deprecated { "No value"},
        Description (
          "When \"Other\" (value=1) is entered in the TestState property, "
          "OtherStateDescription can be used to describe the test\'s state."),
        ModelCorrespondence { "CIM_DiagnosticResult.TestState"}]
    string OtherStateDescription;

        [Deprecated { "CIM_DiagnosticServiceRecord.LoopsFailed"},
        Description (
          "Since some tests may be looped, it is useful to report how many "
          "iterations passed and failed. This is relevant in analyzing "
          "transitory failures. For example, if all the errors occurred in "
          "just one of 100 iterations, the device may be viewed as OK or "
          "marginal, to be monitored further rather then failed. Note: "
          "LoopsPassed & LoopsFailed should add up to the loops completed.")]
    uint32 LoopsFailed;

        [ArrayType ("Indexed"),
        Deprecated { "CIM_DiagnosticServiceRecord.ErrorCode"},
        Description (
          "If applicable, this string should contain one or more vendor "
          "specific error codes that the diagnostic service detected. These "
          "error codes may be used by the vendor for variety of purposes such "
          "as: fault data base indexing, field service trouble ticketing, "
          "product quality tracking, part failure history, etc. Since these "
          "codes are for vendor purposes they may assume any form. Details on "
          "suggested use cases will be left to white papers. The array of "
          "error codes has model correspondence with an ErrorCount array so "
          "the number of errors reported can be analyzed by individual error "
          "code."),
        ModelCorrespondence { "CIM_DiagnosticResult.ErrorCount"}]
    string ErrorCode[];

        [Deprecated { "CIM_DiagnosticSetting.LogOptions"},
        Description (
          "When this flag is true, the diagnostic test will report \'status "
          "messages\'. In this context, a status message indicates that the "
          "diagnostic code is at a checkpoint. Examples are: \"Completion of "
          "phase 1\", \"Complex pattern\", etc."),
        Write (True)]
    boolean ReportStatusMessages;

        [Deprecated { "CIM_Job.PercentComplete"},
        Description (
          "The percentage of the test that has executed thus far, if the "
          "TestState property is set to \"In Progress\" or the percentage of "
          "the complete test that was executed if the TestState property is "
          "set to any of the completed states (\"Passed\", \"Failed\" or "
          "\"Stopped\"). Final results may be based on less than 100% "
          "coverage due to the parameters defined in DiagnosticSetting (such "
          "as QuickMode, PercentOfTestCoverage or HaltOnError)."),
        MaxValue (100),
        MinValue (0),
        Units ("Percent")]
    uint8 PercentComplete;

        [Deprecated { "CIM_Job.StartTime"},
        Description ("The date and time when this test started.")]
    datetime TestStartTime;

        [Deprecated { "CIM_DiagnosticSettingRecord.QuickMode"},
        Description (
          "When this flag is true, the test software should attempt to run in "
          "an accelerated fashion either by reducing the coverage or number "
          "of tests performed."),
        Write (True)]
    boolean QuickMode;

        [Deprecated { "No value"},
        Description (
          "Describes how the test is progressing. For example, if the test "
          "was discontinued, the TestState will be \"Stopped\" (value=5), or "
          "if testing is currently executing, TestState will be \"In "
          "Progress\" (4)."),
        ModelCorrespondence {
          "CIM_DiagnosticResult.OtherStateDescription"},
        ValueMap { "0", "1", "2", "3", "4", "5"},
        Values { "Unknown", "Other", "Passed", "Failed", "In Progress",
          "Stopped"}]
    uint16 TestState;

        [ArrayType ("Indexed"),
        Deprecated { "CIM_DiagnosticServiceRecord.ErrorCount"},
        Description (
          "Since some tests may detect transient and correctable errors such "
          "as a network diagnostic or memory test, an error count is useful "
          "to indicate the severity of the failure. This field contains an "
          "integer value of the number of errors detected by the test. The "
          "ErrorCount is an array with model correspondence to ErrorCode so "
          "that the test can report an ErrorCount on each type of error "
          "encountered. It is recommended that hard errors and correctable or "
          "recoverable errors be given different codes so that clients with "
          "knowledge of the error codes can evaluate correctable, "
          "recoverable, and hard errors independently."),
        ModelCorrespondence { "CIM_DiagnosticResult.ErrorCode"}]
    uint32 ErrorCount[];

        [ArrayType ("Ordered"),
        Deprecated { "CIM_LogRecord.RecordData"},
        Description (
          "TestResults stores one or more textual results from the execution "
          "of the DiagnosticTest(s) referenced by the "
          "DiagnosticCreationClassName and DiagnosticName properties. One "
          "entry is considered a cell location in the array. Each entry is "
          "time stamped and contains the following information, in the "
          "following format: "
          "\nLogOption|yyymmddhhttssoutc|TestName|message_text \nWhere: "
          "\nLogOption = string identical to the LogOption value in "
          "DiagnosticSetting that was used to enable logging this message. "
          "\nyyyy = year, e.g. 2000 \nmm = month (01 - 12) \ndd = day (01 - "
          "31) \nhh = hour (00 - 24) \ntt = minute (00-59) \nss = second "
          "(00-59) \no = \"+\" or \"-\" indicating the sign of the UTC "
          "correction field \nutc = offset from UTC (Universal Coordinated "
          "Time) in minutes \nTestName = Internal test name or current "
          "internal subtest name that sent the message. \nTextual message = "
          "free form string that is the \'test result\'.")]
    string TestResults[];

        [Deprecated { "CIM_LogRecord.MessageTimestamp"},
        Description ("The date and time the result was last updated.")]
    datetime TimeStamp;

        [Deprecated { "CIM_DiagnosticServiceRecord.LoopsPassed"},
        Description (
          "Since some tests may be looped, it is useful to report how many "
          "iterations passed and failed. This is relevant in analyzing "
          "transitory failures. For example if all the errors occurred in "
          "just one of 100 iterations, the device may be viewed as OK or "
          "marginal, to be monitored further rather then failed. Note: "
          "LoopsPassed & LoopsFailed should add up to the loops completed.")]
    uint32 LoopsPassed;

        [Deprecated { "No value"},
        Description (
          "Estimated number of seconds to perform the Diagnostic Test "
          "indicated by the DiagnosticCreationClassName and DiagnosticName "
          "properties. After the test has completed, the actual elapsed time "
          "can be determined by subtracting the TestStartTime from the "
          "TestCompletionTime. A similar property is defined in the "
          "association, DiagnosticTest ForMSE. The difference between the two "
          "properties is that the value stored in the association is a "
          "generic test execution time for the Element and the Test. But, the "
          "value here (in DiagnosticResult) is the estimated time that this "
          "instance with the given settings would take to run the test. A CIM "
          "Consumer can compare this value with the value in the association "
          "DiagnosticTestForMSE to get an idea what impact their settings "
          "have on test execution."),
        ModelCorrespondence {
          "CIM_DiagnosticTestForMSE.EstimatedTimeOfPerforming"},
        Units ("Seconds")]
    uint32 EstimatedTimeOfPerforming;

        [Deprecated { "No value"},
        Description ("The scoping Test\'s SystemName."),
        Key (True),
        MaxLen (256),
        Propagated ("CIM_DiagnosticTest.SystemName")]
    string DiagSystemName;

        [Deprecated { "CIM_DiagnosticSettingRecord.PercentOfTestCoverage"},
        Description (
          "Requests the diagnostic software to reduce test coverage to the "
          "specified percentage. For example, a hard drive scan test could be "
          "asked to run at 50%. The most effective way to accomplish this is "
          "for the test software to scan every other track, as opposed to "
          "only scanning the first half of a drive. It is assumed that the "
          "effectiveness of the test is impacted proportional to the "
          "percentage of testing requested. Permissible values for this "
          "property range from 0 to 100. \nThis property may not be "
          "applicable to all tests. If it can be set for a test, the value 7 "
          "(\"Supports PercentOf TestCoverage\") should be entered into the "
          "DiagnosticTest\'s Characteristics array."),
        MaxValue (100),
        MinValue (0),
        ModelCorrespondence { "CIM_DiagnosticTest.Characteristics"},
        Units ("Percent"),
        Write (True)]
    uint8 PercentOfTestCoverage;

        [Deprecated { "No value"},
        Description ("The scoping Test\'s CreationClassName."),
        Key (True),
        MaxLen (256),
        Propagated ("CIM_DiagnosticTest.CreationClassName")]
    string DiagnosticCreationClassName;

        [Deprecated { "No value"},
        Description ("The scoping Test\'s Name."),
        Key (True),
        MaxLen (256),
        Propagated ("CIM_DiagnosticTest.Name")]
    string DiagnosticName;

        [Deprecated { "CIM_DiagnosticSetting.LogOptions"},
        Description (
          "When this flag is true, the diagnostic test will report \'soft "
          "errors\'. In this context, a soft error is a message from the "
          "diagnostic reporting a known defect in the hardware or driver "
          "configuration, or execution environment. Examples are: \'Not "
          "enough memory\', \'Driver IOCTL not implemented\', \'Video RAM "
          "compare failed during polygon fill test (A known defect in the "
          "video chipset)\', etc."),
        Write (True)]
    boolean ReportSoftErrors;

        [Deprecated { "CIM_DiagnosticRecord.InstanceID"},
        Description ("The Unique identifier for an instance of Diagnostic Results."),
        Key (True),
        MaxLen (1024)]
    string ExecutionID;
};

    [Abstract (True),
    Association (True),
    Description (
      "CIM_IndicationSubscription describes a flow of Indications. The flow "
      "is specified by the referenced Filter, and directed to the referenced "
      "destination or process in the Handler. Property values of the "
      "referenced CIM_IndicationFilter instance and CIM_ListenerDestination "
      "instance MAY significantly effect the definition of the subscription. "
      "E.g., a subscription associated with a \"Transient\" destination MAY "
      "be deleted when the destination terminates or is no longer available."),
    UMLPackagePath ("CIM::Event"),
    Version ("2.31.0")]
class CIM_AbstractIndicationSubscription {

        [Description (
          "Defines the desired behavior for a subscription when a fatal error "
          "occurs in one of the Indication processing subcomponents (e.g., "
          "Indication processor, Indication or instance provider, or "
          "Indication handler) and the Indication cannot be successfully "
          "sent. Specifically, a failure implies that some aspect of "
          "Indication generation, processing or dispatch is no longer "
          "functioning and Indications may be lost. If the value of "
          "OnFatalErrorPolicy is 2 (\"Ignore\") or not set (NULL), the "
          "subscription MUST continue to be processed in a \'best effort\' "
          "mode. This mode of operation can lead to unpredictable, and "
          "potentially misleading results, because Indications may be lost. "
          "If the value is 3 (\"Disable\"), the subscription MUST be "
          "disabled. With this policy, no new Indications will be generated "
          "or dispatched until the subscription is explicitly enabled. This "
          "is accomplished via the property, SubscriptionState. If the value "
          "is 4 (\"Remove\"), the subscription MUST be deleted. Selecting "
          "this policy has the same effect as issuing a DeleteInstance "
          "operation on this subscription instance."),
        ValueMap { "1", "2", "3", "4"},
        Values { "Other", "Ignore", "Disable", "Remove"}]
    uint16 OnFatalErrorPolicy;

        [Description (
          "The FailureTriggerTimeInterval is used by the client to specify a "
          "recommended minimum delay before the OnFatalErrorPolicy is "
          "implemented."),
        PUnit ("second"),
        Units ("Seconds")]
    uint64 FailureTriggerTimeInterval;

        [Description (
          "The RepeatNotificationPolicy property defines the desired behavior "
          "for handling Indications that report the occurrence of the same "
          "underlying event (e.g., the disk is still generating I/O errors "
          "and has not yet been repaired). The defined semantics for the "
          "RepeatNotificationCount, RepeatNotificationInterval, and "
          "RepeatNotificationGap properties depend on the value of "
          "RepeatNotificationPolicy, but values for these properties MUST be "
          "set if the property is defined for the selected policy. If the "
          "value of RepeatNotificationPolicy is 0 (\"Unknown\") or not set, "
          "no special processing for repeat Indications is defined by the "
          "subscription. The semantics associated with the handling of repeat "
          "Indications MAY be defined by the Indication processing "
          "subcomponents. If the value of RepeatNotificationPolicy is 2 "
          "(\"None\"), special processing of repeat Indications MUST NOT be "
          "performed. If the value is 3 (\"Suppress\") the first "
          "RepeatNotificationCount Indications, describing the same event, "
          "MUST be sent and all subsequent Indications for this event "
          "suppressed for the remainder of the time interval "
          "RepeatNotificationInterval. A new interval starts when the next "
          "Indication for this event is received. If the value of "
          "RepeatNotificationPolicy is 4 (\"Delay\") and an Indication is "
          "received, this Indication MUST be suppressed if, including this "
          "Indication, RepeatNoticationCount or fewer Indications for this "
          "event have been received during the prior time interval defined by "
          "RepeatNotificationInterval. If this Indication is the "
          "RepeatNotificationCount + 1 Indication, this Indication MUST be "
          "sent and all subsequent Indications for this event ignored until "
          "the RepeatNotificationGap has elapsed. A "
          "RepeatNotificationInterval MAY NOT overlap a RepeatNotificationGap "
          "time interval."),
        ValueMap { "0", "1", "2", "3", "4"},
        Values { "Unknown", "Other", "None", "Suppress", "Delay"}]
    uint16 RepeatNotificationPolicy;

        [Description (
          "Defines the gap interval for the repeat notification policy "
          "calculation."),
        PUnit ("second"),
        Units ("Seconds")]
    uint64 RepeatNotificationGap;

        [Description (
          "Subscription identification information. May be used by the client "
          "or protocol to store subscription identification information."),
        Write (True)]
    string SubscriptionInfo;

        [Description (
          "A string defining \"Other\" values for RepeatNotificationPolicy. "
          "This value MUST be set to a non NULL value when "
          "RepeatNotificationPolicy is set to a value of 1 (\"Other\"). For "
          "all other values, the OtherRepeatNotificationPolicy MUST be NULL.")]
    string OtherRepeatNotificationPolicy;

        [Description (
          "A string defining \"Other\" values for SubscriptionState. This "
          "value MUST be set to a non NULL value when SubscriptionState is "
          "set to a value of 1 (\"Other\"). For all other values, the "
          "OtherSubscriptionState MUST be NULL.")]
    string OtherSubscriptionState;

        [Description ("Indicates the current processing state of the subscription."),
        ValueMap { "0", "1", "2", "3", "4"},
        Values { "Unknown", "Other", "Enabled", "Enabled Degraded",
          "Disabled"},
        Write (True)]
    uint16 SubscriptionState;

        [Description (
          "The Filter that defines the criteria and data of the possible "
          "Indications of this subscription."),
        Key (True)]
    CIM_ManagedElement REF Filter;

        [Description (
          "Defines the count property for the repeat notification policy "
          "calculation.")]
    uint16 RepeatNotificationCount;

        [Description (
          "The Handler addressing delivery of the possible Indications of "
          "this subscription."),
        Key (True)]
    CIM_ListenerDestination REF Handler;

        [Description (
          "Date and time of the last state change. This value is based on the "
          "notion of local date and time of the Managed System Element "
          "running the Indication processing subcomponents.")]
    datetime TimeOfLastStateChange;

        [Description (
          "SubscriptionStartTime is the time the subscription was started. "
          "The value of this property is computed based on the notion of date "
          "and time of the ManagedSystemElement running the Indication "
          "processing subcomponents.")]
    datetime SubscriptionStartTime;

        [Description (
          "SubscriptionDuration defines the desired length of the "
          "subscription. Indications generated after the duration of the "
          "subscription has exceeded SubscriptionDuration MUST NOT be sent. "
          "The duration of a subscription MAY be changed by modifying this "
          "property. An expired subscription MAY be deleted and MUST NOT be "
          "modified. If the value of SubscriptionDuration is not set, the "
          "subscription MUST be treated as having no expiration date."),
        PUnit ("second"),
        Units ("Seconds"),
        Write (True)]
    uint64 SubscriptionDuration;

        [Description (
          "Defines the time interval for the repeat notification policy "
          "calculation."),
        PUnit ("second"),
        Units ("Seconds")]
    uint64 RepeatNotificationInterval;

        [Description (
          "A string defining \"Other\" values for OnFatalErrorPolicy. This "
          "value MUST be set to a non NULL value when OnFatalErrorPolicy is "
          "set to a value of 1 (\"Other\"). For all other values, the "
          "OtherOnFatalErrorPolicy MUST be NULL.")]
    string OtherOnFatalErrorPolicy;

        [Description (
          "SubscriptionTimeRemaining is a computed value that provides a "
          "snapshot of the time remaining in the Subscription."),
        PUnit ("second"),
        Units ("Seconds")]
    uint64 SubscriptionTimeRemaining;
};

    [Association (True),
    Description (
      "CIM_AuthorizedSubject is an association used to tie specific "
      "AuthorizedPrivileges to specific subjects (i.e., Identities, Roles or "
      "Collections of these). At this time, only Identities and Roles (or "
      "Collections of Identities and Roles) should be associated to "
      "AuthorizedPrivileges using this relationship. Note that any Privileges "
      "not explicitly granted to a subject, SHOULD be denied."),
    UMLPackagePath ("CIM::User::Privilege"),
    Version ("2.8.0")]
class CIM_AuthorizedSubject {

        [Description (
          "The AuthorizedPrivilege either granted or denied to an Identity, "
          "Role or Collection. Whether the privilege is granted or denied is "
          "defined by the inherited property, CIM_Privilege.PrivilegeGranted."),
        Key (True)]
    CIM_AuthorizedPrivilege REF Privilege;

        [Description (
          "The Subject for which AuthorizedPrivileges are granted or denied. "
          "Whether the privilege is granted or denied is defined by the "
          "property, CIM_Privilege.PrivilegeGranted."),
        Key (True)]
    CIM_ManagedElement REF PrivilegedElement;
};

    [Association (True),
    Description (
      "SettingsDefineState is used to associate an instance of SettingData "
      "with an instance of ManagedElement. This association indicates that "
      "the SettingData instance provides additional information about the "
      "Current State of the associated ManagedElement. State is broadly "
      "defined to include the configuration, status, capabilities, and other "
      "information of an instance. \nUse of the same instance of SettingData "
      "to represent more than one of Current State (SettingsDefineState) and "
      "Desired State (ElementSettingData) and Possible State "
      "(SettingsDefineCapabilities) for a ManagedElement is not recommended."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.22.0")]
class CIM_SettingsDefineState {

        [Description ("The managed element."),
        Key (True)]
    CIM_ManagedElement REF ManagedElement;

        [Description (
          "The SettingData object that provides additional information about "
          "the current state and configuration of the ManagedElement."),
        Key (True)]
    CIM_SettingData REF SettingData;
};

    [Aggregation (True),
    Association (True),
    Description ("This association identifies the Actions for a Software Element."),
    UMLPackagePath ("CIM::Application::CheckAction"),
    Version ("2.6.0")]
class CIM_SoftwareElementActions {

        [Description ("The software Action to move or uninstall a SoftwareElement."),
        Key (True),
        Weak (True)]
    CIM_Action REF Action;

        [Aggregate (True),
        Description ("The element that scopes the Action."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_SoftwareElement REF Element;
};

    [Aggregation (True),
    Association (True),
    Description (
      "This association ties a SoftwareElement to a specific Check to "
      "validate its state or its movement to the next state. Note that "
      "SoftwareElements in a running state cannot transition to another "
      "state. Therefore, the value of the Phase property is restricted to 0 "
      "(\"In-State\") for SoftwareElements in the running state."),
    UMLPackagePath ("CIM::Application::CheckAction"),
    Version ("2.6.0")]
class CIM_SoftwareElementChecks {

        [Description (
          "The Phase property indicates whether the referenced Check is an "
          "in-state or a next-state Check."),
        ValueMap { "0", "1"},
        Values { "In-State", "Next-State"}]
    uint16 Phase;

        [Description ("The Check for the element."),
        Key (True),
        Weak (True)]
    CIM_Check REF Check;

        [Aggregate (True),
        Description ("The SoftwareElement being checked."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_SoftwareElement REF Element;
};

    [Association (True),
    Description (
      "Instances of this class associate a BlockStatisticsManifestCollection "
      "to the StatisticsCollection to which is is applied. The "
      "ManifestCollection contains the Manifests that are used to filter "
      "requests for the retrieval of statistics."),
    UMLPackagePath ("CIM::Device::StorageStatistics"),
    Version ("2.10.0")]
class CIM_AssociatedBlockStatisticsManifestCollection {

        [Description (
          "The collection of Manifests applied to the StatisticsCollection."),
        Key (True)]
    CIM_BlockStatisticsManifestCollection REF ManifestCollection;

        [Description (
          "The collection of statistics filtered by the "
          "BlockStatisticsManifestCollection."),
        Key (True),
        Max (1),
        Min (1)]
    CIM_StatisticsCollection REF Statistics;
};

    [Aggregation (True),
    Association (True),
    Description (
      "ParticipatesInSet indicates which PhysicalElements should be replaced "
      "together."),
    UMLPackagePath ("CIM::Physical::Misc"),
    Version ("2.6.0")]
class CIM_ParticipatesInSet {

        [Aggregate (True),
        Description ("The ReplacementSet."),
        Key (True)]
    CIM_ReplacementSet REF Set;

        [Description (
          "The PhysicalElement which should be replaced with other Elements, "
          "as a Set."),
        Key (True)]
    CIM_PhysicalElement REF Element;
};

    [Abstract (True),
    Association (True),
    Description (
      "CIM_LogicalIdentity is an abstract and generic association, indicating "
      "that two ManagedElements represent different aspects of the same "
      "underlying entity. This relationship conveys what could be defined "
      "with multiple inheritance. In most scenarios, the Identity "
      "relationship is determined by the equivalence of Keys or some other "
      "identifying properties of the related Elements. \n\nThis relationship "
      "is reasonable in several scenarios. For example, it could be used to "
      "represent that a LogicalDevice is both a \'bus\' entity and a "
      "\'functional\' entity. A Device could be both a USB (bus) and a "
      "Keyboard (functional) entity."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.10.0")]
class CIM_LogicalIdentity {

        [Description (
          "SameElement represents an alternate aspect of the ManagedElement."),
        Key (True)]
    CIM_ManagedElement REF SameElement;

        [Description (
          "SystemElement represents one aspect of the Managed Element. The "
          "use of \'System\' in the role name does not limit the scope of the "
          "association. The role name was defined in the original "
          "association, where the referenced elements were limited to "
          "LogicalElements. Since that time, it has been found valuable to "
          "instantiate these types of relationships for ManagedElements, such "
          "as Collections. So, the referenced elements of the association "
          "were redefined to be ManagedElements. Unfortunately, the role name "
          "could not be changed without deprecating the entire association. "
          "This was not deemed necessary just to correct the role name."),
        Key (True)]
    CIM_ManagedElement REF SystemElement;
};

    [Abstract (True),
    Description (
      "ManagedElement is an abstract class that provides a common superclass "
      "(or top of the inheritance tree) for the non-association classes in "
      "the CIM Schema."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.19.0")]
class CIM_ManagedElement {

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;
};

    [Association (True),
    Description (
      "Refers to the refinement of the UnitOfWorkDefinition: the trace level "
      "type. It is not required that a UnitOfWork be associated to a "
      "TraceLevelType. But if it is associated, only one Type can be "
      "specified for the Definition. In contrast, TraceLevelTypes can be "
      "reused for multiple Definitions."),
    UMLPackagePath ("CIM::Metrics::UnitOfWork"),
    Version ("2.7.0")]
class CIM_UoWDefTraceLevelType {

        [Description (
          "The trace level type description that is implemented by the "
          "UnitOfWorkDefinition."),
        Key (True),
        Max (1)]
    CIM_TraceLevelType REF TraceLevelType;

        [Description (
          "The UnitOfWorkDefinition which is refined by the instance of "
          "TraceLevelType."),
        Key (True)]
    CIM_UnitOfWorkDefinition REF UoWDefn;
};

    [Aggregation (True),
    Association (True),
    Deprecated { "CIM_ConcreteComponent"},
    Description (
      "Note: The Configuration class is being deprecated in lieu of using a "
      "ConcreteComponent relationship to indicate a hierarchy of instances of "
      "Setting or SettingData. Deprecated description: ConfigurationComponent "
      "aggregates \"lower-level\" Configuration objects into a \"high-level\" "
      "Configuration. This association enables the assembly of complex "
      "configurations by grouping together simpler ones. For example, a logon "
      "policy for the United States could consist of two Configuration "
      "groups, one for the East Coast and one for the West Coast. Each of "
      "these groups could in turn consist of multiple Configurations to "
      "handle different aspects of the logon process."),
    UMLPackagePath ("CIM::Core::Settings"),
    Version ("2.10.0")]
class CIM_ConfigurationComponent {

        [Aggregate (True),
        Deprecated { "CIM_ConcreteComponent.GroupComponent"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: The Configuration that aggregates additional "
          "Configurations."),
        Key (True)]
    CIM_Configuration REF ConfigGroup;

        [Deprecated { "CIM_ConcreteComponent.PartComponent"},
        Description (
          "Note: The use of this element is deprecated. Deprecated "
          "description: A Configuration that is part of a \"higher-level\" "
          "Configuration."),
        Key (True)]
    CIM_Configuration REF ConfigComponent;
};

    [Abstract (True),
    Aggregation (True),
    Association (True),
    Description (
      "CIM_Component is a generic association used to establish \'part of\' "
      "relationships between Managed Elements. For example, it could be used "
      "to define the components or parts of a System."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.7.0")]
class CIM_Component {

        [Aggregate (True),
        Description ("The parent element in the association."),
        Key (True)]
    CIM_ManagedElement REF GroupComponent;

        [Description ("The child element in the association."),
        Key (True)]
    CIM_ManagedElement REF PartComponent;
};

    [Aggregation (True),
    Association (True),
    Description (
      "CIM_MemberOfCollection is an aggregation used to establish membership "
      "of ManagedElements in a Collection."),
    UMLPackagePath ("CIM::Core::Collection"),
    Version ("2.6.0")]
class CIM_MemberOfCollection {

        [Description ("The aggregated member of the Collection."),
        Key (True)]
    CIM_ManagedElement REF Member;

        [Aggregate (True),
        Description ("The Collection that aggregates members."),
        Key (True)]
    CIM_Collection REF Collection;
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class enumerate CIM_System
===== Command Result
    [Description (
      "This is a special grouping of ManagedSystemElements. The grouping is "
      "viewed as a single entity, reflecting that all of its components are "
      "administered similarly, either by the same user, group of users, or "
      "policy. It serves as an aggregation point to associate one or more of "
      "the following elements: network devices, such as routers and switches, "
      "servers, and other resources that can be accessed by end systems. This "
      "grouping of devices plays an essential role in ensuring that the same "
      "administrative policy and actions are applied to all of the devices in "
      "the grouping. The specific behavior and/or semantics of the "
      "AdminDomain can be identified through its aggregated and associated "
      "entities."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.10.0")]
class CIM_AdminDomain : CIM_System {

        [Description (
          "RequestedState is an integer enumeration that indicates the last "
          "requested or desired state for the element, irrespective of the "
          "mechanism through which it was requested. The actual state of the "
          "element is represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or disabled "
          "states. Note that when EnabledState is set to 5 (\"Not "
          "Applicable\"), then this property has no meaning. Refer to the "
          "EnabledState property description for explanations of the values "
          "in the RequestedState enumeration. \n\"Unknown\" (0) indicates the "
          "last requested state for the element is unknown.\nNote that the "
          "value \"No Change\" (5) has been deprecated in lieu of indicating "
          "the last requested state is \"Unknown\" (0). If the last requested "
          "or desired state is unknown, RequestedState should have the value "
          "\"Unknown\" (0), but may have the value \"No Change\" (5).Offline "
          "(6) indicates that the element has been requested to transition to "
          "the Enabled but Offline EnabledState. \nIt should be noted that "
          "there are two new values in RequestedState that build on the "
          "statuses of EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then moving to an "
          "\"Enabled\" state. Reset indicates that the element is first "
          "\"Disabled\" and then \"Enabled\". The distinction between "
          "requesting \"Shut Down\" and \"Disabled\" should also be noted. "
          "Shut Down requests an orderly transition to the Disabled state, "
          "and might involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate disabling of the "
          "element, such that it will not execute or accept any commands or "
          "processing requests. \n\nThis property is set as the result of a "
          "method invocation (such as Start or StopService on CIM_Service), "
          "or can be overridden and defined as WRITEable in a subclass. The "
          "method approach is considered superior to a WRITEable property, "
          "because it allows an explicit invocation of the operation and the "
          "return of a result code. \n\nIf knowledge of the last "
          "RequestedState is not supported for the EnabledLogicalElement, the "
          "property shall be NULL or have the value 12 \"Not Applicable\"."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "..", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Deferred", "Quiesce",
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 RequestedState = 12;

        [Description (
          "Indicates the current health of the element. This attribute "
          "expresses the health of this element but not necessarily that of "
          "its subcomponents. The possible values are 0 to 30, where 5 means "
          "the element is entirely healthy and 30 means the element is "
          "completely non-functional. The following continuum is defined: "
          "\n\"Non-recoverable Error\" (30) - The element has completely "
          "failed, and recovery is not possible. All functionality provided "
          "by this element has been lost. \n\"Critical Failure\" (25) - The "
          "element is non-functional and recovery might not be possible. "
          "\n\"Major Failure\" (20) - The element is failing. It is possible "
          "that some or all of the functionality of this component is "
          "degraded or not working. \n\"Minor Failure\" (15) - All "
          "functionality is available but some might be degraded. "
          "\n\"Degraded/Warning\" (10) - The element is in working order and "
          "all functionality is provided. However, the element is not working "
          "to the best of its abilities. For example, the element might not "
          "be operating at optimal performance or it might be reporting "
          "recoverable errors. \n\"OK\" (5) - The element is fully functional "
          "and is operating within normal operational parameters and without "
          "error. \n\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \nDMTF has reserved the unused portion "
          "of the continuum for additional HealthStates in the future."),
        ValueMap { "0", "5", "10", "15", "20", "25", "30", "..",
          "32768..65535"},
        Values { "Unknown", "OK", "Degraded/Warning", "Minor failure",
          "Major failure", "Critical failure", "Non-recoverable error",
          "DMTF Reserved", "Vendor Specific"}]
    uint16 HealthState;

        [ArrayType ("Indexed"),
        Description (
          "Strings describing the various OperationalStatus array values. For "
          "example, if \"Stopping\" is the value assigned to "
          "OperationalStatus, then this property may contain an explanation "
          "as to why an object is being stopped. Note that entries in this "
          "array are correlated with those at the same array index in "
          "OperationalStatus."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"}]
    string StatusDescriptions[];

        [Description (
          "TransitioningToState indicates the target state to which the "
          "instance is transitioning. \nA value of 5 \"No Change\" shall "
          "indicate that no transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not support "
          "representing ongoing transitions. \nA value other than 5 or 12 "
          "shall identify the state to which the element is in the process of "
          "transitioning."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElement.RequestedState",
          "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", ".."},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Defer", "Quiesce", "Reboot",
          "Reset", "Not Applicable", "DMTF Reserved"}]
    uint16 TransitioningToState = 12;

        [Description (
          "A string that describes the enabled or disabled state of the "
          "element when the EnabledState property is set to 1 (\"Other\"). "
          "This property must be set to null when EnabledState is any value "
          "other than 1."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"}]
    string OtherEnabledState;

        [Description (
          "A string that provides information on how the primary system owner "
          "can be reached (for example, phone number, e-mail address, and so "
          "on)."),
        MappingStrings { "MIF.DMTF|General Information|001.4"},
        MaxLen (256),
        Write (True)]
    string PrimaryOwnerContact;

        [Description (
          "DetailedStatus compliments PrimaryStatus with additional status "
          "detail. It consists of one of the following values: Not Available, "
          "No Additional Information, Stressed, Predictive Failure, Error, "
          "Non-Recoverable Error, SupportingEntityInError. Detailed status is "
          "used to expand upon the PrimaryStatus of the element. \nA Null "
          "return indicates the implementation (provider) does not implement "
          "this property. \n\"Not Available\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"No Additional Information\" indicates that the "
          "element is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are overload, "
          "overheated, and so on. \n\"Predictive Failure\" indicates that an "
          "element is functioning normally but a failure is predicted in the "
          "near future. \n\"Non-Recoverable Error \" indicates that this "
          "element is in an error condition that requires human intervention. "
          "\n\"Supporting Entity in Error\" indicates that this element might "
          "be \"OK\" but that another element, on which it is dependent, is "
          "in error. An example is a network service or endpoint that cannot "
          "function due to lower-layer networking problems."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.PrimaryStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.."},
        Values { "Not Available", "No Additional Information", "Stressed",
          "Predictive Failure", "Non-Recoverable Error",
          "Supporting Entity in Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 DetailedStatus;

        [ArrayType ("Indexed"),
        Description (
          "OtherIdentifyingInfo captures additional data, beyond System Name "
          "information, that could be used to identify a ComputerSystem. One "
          "example would be to hold the Fibre Channel World-Wide Name (WWN) "
          "of a node. Note that if only the Fibre Channel name is available "
          "and is unique (able to be used as the System key), then this "
          "property would be NULL and the WWN would become the System key, "
          "its data placed in the Name property."),
        MaxLen (256),
        ModelCorrespondence { "CIM_System.IdentifyingDescriptions"}]
    string OtherIdentifyingInfo[];

        [ArrayType ("Indexed"),
        Description (
          "An array of free-form strings providing explanations and details "
          "behind the entries in the OtherIdentifying Info array. Note, each "
          "entry of this array is related to the entry in "
          "OtherIdentifyingInfo that is located at the same index."),
        ModelCorrespondence { "CIM_System.OtherIdentifyingInfo"}]
    string IdentifyingDescriptions[];

        [ArrayType ("Indexed"),
        Description (
          "Indicates the current statuses of the element. Various operational "
          "statuses are defined. Many of the enumeration\'s values are "
          "self-explanatory. However, a few are not and are described here in "
          "more detail. \n\"Stressed\" indicates that the element is "
          "functioning, but needs attention. Examples of \"Stressed\" states "
          "are overload, overheated, and so on. \n\"Predictive Failure\" "
          "indicates that an element is functioning nominally but predicting "
          "a failure in the near future. \n\"In Service\" describes an "
          "element being configured, maintained, cleaned, or otherwise "
          "administered. \n\"No Contact\" indicates that the monitoring "
          "system has knowledge of this element, but has never been able to "
          "establish communications with it. \n\"Lost Communication\" "
          "indicates that the ManagedSystem Element is known to exist and has "
          "been contacted successfully in the past, but is currently "
          "unreachable. \n\"Stopped\" and \"Aborted\" are similar, although "
          "the former implies a clean and orderly stop, while the latter "
          "implies an abrupt stop where the state and configuration of the "
          "element might need to be updated. \n\"Dormant\" indicates that the "
          "element is inactive or quiesced. \n\"Supporting Entity in Error\" "
          "indicates that this element might be \"OK\" but that another "
          "element, on which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n\"Completed\" indicates that "
          "the element has completed its operation. This value should be "
          "combined with either OK, Error, or Degraded so that a client can "
          "tell if the complete operation Completed with OK (passed), "
          "Completed with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did not report "
          "an error). \n\"Power Mode\" indicates that the element has "
          "additional power model information contained in the Associated "
          "PowerManagementService association. \n\"Relocating\" indicates the "
          "element is being relocated.\nOperationalStatus replaces the Status "
          "property on ManagedSystemElement to provide a consistent approach "
          "to enumerations, to address implementation needs for an array "
          "property, and to provide a migration path from today\'s "
          "environment to the future. This change was not made earlier "
          "because it required the deprecated qualifier. Due to the "
          "widespread use of the existing Status property in management "
          "applications, it is strongly recommended that providers or "
          "instrumentation provide both the Status and OperationalStatus "
          "properties. Further, the first value of OperationalStatus should "
          "contain the primary status for the element. When instrumented, "
          "Status (because it is single-valued) should also provide the "
          "primary status of the element."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.StatusDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "..",
          "0x8000.."},
        Values { "Unknown", "Other", "OK", "Degraded", "Stressed",
          "Predictive Failure", "Error", "Non-Recoverable Error",
          "Starting", "Stopping", "Stopped", "In Service", "No Contact",
          "Lost Communication", "Aborted", "Dormant",
          "Supporting Entity in Error", "Completed", "Power Mode",
          "Relocating", "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperationalStatus[];

        [Description (
          "The name of the primary system owner. The system owner is the "
          "primary user of the system."),
        MappingStrings { "MIF.DMTF|General Information|001.3"},
        MaxLen (64),
        Write (True)]
    string PrimaryOwnerName;

        [Deprecated { "CIM_ManagedSystemElement.OperationalStatus"},
        Description (
          "A string indicating the current status of the object. Various "
          "operational and non-operational statuses are defined. This "
          "property is deprecated in lieu of OperationalStatus, which "
          "includes the same semantics in its enumeration. This change is "
          "made for 3 reasons: \n1) Status is more correctly defined as an "
          "array. This definition overcomes the limitation of describing "
          "status using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND Stopped. \n2) A "
          "MaxLen of 10 is too restrictive and leads to unclear enumerated "
          "values. \n3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 implementations used "
          "the string property and did not want to modify their code. "
          "Therefore, Status was grandfathered into the Schema. Use of the "
          "deprecated qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus."),
        MaxLen (10),
        ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail",
          "Starting", "Stopping", "Service", "Stressed", "NonRecover",
          "No Contact", "Lost Comm", "Stopped"}]
    string Status;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;

        [Description (
          "A datetime value that indicates when the object was installed. "
          "Lack of a value does not indicate that the object is not installed."),
        MappingStrings { "MIF.DMTF|ComponentID|001.5"}]
    datetime InstallDate;

        [Description (
          "An enumerated value indicating an administrator\'s default or "
          "startup configuration for the Enabled State of an element. By "
          "default, the element is \"Enabled\" (value=2)."),
        ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535"},
        Values { "Enabled", "Disabled", "Not Applicable",
          "Enabled but Offline", "No Default", "Quiesce",
          "DMTF Reserved", "Vendor Reserved"},
        Write (True)]
    uint16 EnabledDefault = 2;

        [Description (
          "EnabledState is an integer enumeration that indicates the enabled "
          "and disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down (value=4) and starting (value=10) are transient states "
          "between enabled and disabled. The following text briefly "
          "summarizes the various enabled and disabled states: \nEnabled (2) "
          "indicates that the element is or could be executing commands, will "
          "process any queued commands, and queues new requests. \nDisabled "
          "(3) indicates that the element will not execute commands and will "
          "drop any new requests. \nShutting Down (4) indicates that the "
          "element is in the process of going to a Disabled state. \nNot "
          "Applicable (5) indicates the element does not support being "
          "enabled or disabled. \nEnabled but Offline (6) indicates that the "
          "element might be completing commands, and will drop any new "
          "requests. \nTest (7) indicates that the element is in a test "
          "state. \nDeferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \nQuiesce "
          "(9) indicates that the element is enabled but in a restricted "
          "mode.\nStarting (10) indicates that the element is in the process "
          "of going to an Enabled state. New requests are queued."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.OtherEnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11..32767", "32768..65535"},
        Values { "Unknown", "Other", "Enabled", "Disabled",
          "Shutting Down", "Not Applicable", "Enabled but Offline",
          "In Test", "Deferred", "Quiesce", "Starting", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 EnabledState = 5;

        [Description (
          "The date or time when the EnabledState of the element last "
          "changed. If the state of the element has not changed and this "
          "property is populated, then it must be set to a 0 interval value. "
          "If a state change was requested, but rejected or not yet "
          "processed, the property must not be updated.")]
    datetime TimeOfLastStateChange;

        [Description (
          "CreationClassName indicates the name of the class or the subclass "
          "used in the creation of an instance. When used with the other key "
          "properties of this class, this property allows all instances of "
          "this class and its subclasses to be uniquely identified."),
        Key (True),
        MaxLen (256)]
    string CreationClassName;

        [Description (
          "PrimaryStatus provides a high level status value, intended to "
          "align with Red-Yellow-Green type representation of status. It "
          "should be used in conjunction with DetailedStatus to provide high "
          "level and detailed health status of the ManagedElement and its "
          "subcomponents. \nPrimaryStatus consists of one of the following "
          "values: Unknown, OK, Degraded or Error. \"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"OK\" indicates the "
          "ManagedElement is functioning normally. \n\"Degraded\" indicates "
          "the ManagedElement is functioning below normal. \n\"Error\" "
          "indicates the ManagedElement is in an Error condition."),
        ModelCorrespondence { "CIM_ManagedSystemElement.DetailedStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "..", "0x8000.."},
        Values { "Unknown", "OK", "Degraded", "Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 PrimaryStatus;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The inherited Name serves as the key of a System instance in an "
          "enterprise environment."),
        Key (True),
        MaxLen (256),
        Override ("Name")]
    string Name;

        [Description (
          "An array (bag) of strings that specifies the administrator "
          "-defined roles this System plays in the managed environment. "
          "Examples might be \'Building 8 print server\' or \'Boise user "
          "directories\'. A single system may perform multiple roles. \nNote "
          "that the instrumentation view of the \'roles\' of a System is "
          "defined by instantiating a specific subclass of System, or by "
          "properties in a subclass, or both. For example, the purpose of a "
          "ComputerSystem is defined using the Dedicated and "
          "OtherDedicatedDescription properties."),
        Write (True)]
    string Roles[];

        [Description (
          "CommunicationStatus indicates the ability of the instrumentation "
          "to communicate with the underlying ManagedElement. "
          "CommunicationStatus consists of one of the following values: "
          "Unknown, None, Communication OK, Lost Communication, or No "
          "Contact. \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"Not Available\" indicates "
          "that the implementation (provider) is capable of returning a value "
          "for this property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any quality of "
          "service. \n\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to establish "
          "communications with it. \n\"Lost Communication\" indicates that "
          "the Managed Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable."),
        ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Communication OK",
          "Lost Communication", "No Contact", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 CommunicationStatus;

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The NameFormat property identifies how the Name of the AdminDomain "
          "is generated, using the heuristic specified in the CIM V2 System "
          "Model specification. The property assumes that to determine and "
          "assign a Name the documented rules are traversed in order. The "
          "NameFormat Values list defines the precedence order for assigning "
          "the Name of the AdminDomain. \n\n\"FC\" has been deprecated and "
          "replaced by \"WWN\" to be consistent with the other ValueMaps."),
        MaxLen (64),
        ModelCorrespondence { "CIM_AdminDomain.Name"},
        Override ("NameFormat"),
        ValueMap { "Other", "AS", "NAP", "NOC", "POP", "RNP", "IP", "IPX",
          "SNA", "Dial", "WAN", "LAN", "ISDN", "Frame Relay", "ATM",
          "E.164", "IB", "FC", "Policy Repository", "WWN"},
        Values { "Other", "Autonomous System", "Network Access Provider",
          "Network Operations Center", "Point of Presence",
          "Regional Network Provider", "IP", "IPX", "SNA", "Dial", "WAN",
          "LAN", "ISDN", "Frame Relay", "ATM", "E.164", "Infiniband",
          "Fibre Channel", "Policy Repository",
          "Fibre Channel Worldwide Name"}]
    string NameFormat;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for providing "
          "more detail with respect to the value of EnabledState. It can also "
          "provide the transitional states when an element is transitioning "
          "from one state to another, such as when an element is "
          "transitioning between EnabledState and RequestedState, as well as "
          "other transitional conditions.\nOperatingStatus consists of one of "
          "the following values: Unknown, Not Available, In Service, "
          "Starting, Stopping, Stopped, Aborted, Dormant, Completed, "
          "Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"None\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n\"Starting\" "
          "describes an element being initialized. \n\"Stopping\" describes "
          "an element being brought to an orderly stop. \n\"Stopped\" and "
          "\"Aborted\" are similar, although the former implies a clean and "
          "orderly stop, while the latter implies an abrupt stop where the "
          "state and configuration of the element might need to be updated. "
          "\n\"Dormant\" indicates that the element is inactive or quiesced. "
          "\n\"Completed\" indicates that the element has completed its "
          "operation. This value should be combined with either OK, Error, or "
          "Degraded in the PrimaryStatus so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed with "
          "Error (failed), or Completed with Degraded (the operation "
          "finished, but it did not complete OK or did not report an error). "
          "\n\"Migrating\" element is being moved between host elements. "
          "\n\"Immigrating\" element is being moved to new host element. "
          "\n\"Emigrating\" element is being moved away from host element. "
          "\n\"Shutting Down\" describes an element being brought to an "
          "abrupt stop. \n\"In Test\" element is performing test functions. "
          "\n\"Transitioning\" describes an element that is between states, "
          "that is, it is not fully available in either its previous state or "
          "its next state. This value should be used if other values "
          "indicating a transition to a specific state are not "
          "applicable.\n\"In Service\" describes an element that is in "
          "service and operational."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Servicing", "Starting",
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed",
          "Migrating", "Emigrating", "Immigrating", "Snapshotting",
          "Shutting Down", "In Test", "Transitioning", "In Service",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperatingStatus;

        [Description (
          "AvailableRequestedStates indicates the possible values for the "
          "RequestedState parameter of the method RequestStateChange, used to "
          "initiate a state change. The values listed shall be a subset of "
          "the values contained in the RequestedStatesSupported property of "
          "the associated instance of CIM_EnabledLogicalElementCapabilities "
          "where the values selected are a function of the current state of "
          "the CIM_EnabledLogicalElement. This property may be non-null if an "
          "implementation is able to advertise the set of possible values as "
          "a function of the current state. This property shall be null if an "
          "implementation is unable to determine the set of possible values "
          "as a function of the current state."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported"},
        ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".."},
        Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
          "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved"}]
    uint16 AvailableRequestedStates[];

        [Description (
          "Requests that the state of the element be changed to the value "
          "specified in the RequestedState parameter. When the requested "
          "state change takes place, the EnabledState and RequestedState of "
          "the element will be the same. Invoking the RequestStateChange "
          "method multiple times could result in earlier requests being "
          "overwritten or lost. \nA return code of 0 shall indicate the state "
          "change was successfully initiated. \nA return code of 3 shall "
          "indicate that the state transition cannot complete within the "
          "interval specified by the TimeoutPeriod parameter. \nA return code "
          "of 4096 (0x1000) shall indicate the state change was successfully "
          "initiated, a ConcreteJob has been created, and its reference "
          "returned in the output parameter Job. Any other return code "
          "indicates an error condition."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535"},
        Values { "Completed with No Error", "Not Supported",
          "Unknown or Unspecified Error",
          "Cannot complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Job Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific"}]
    uint32 RequestStateChange(
          [Description (
            "The state requested for the element. This information will be "
            "placed into the RequestedState property of the instance if the "
            "return code of the RequestStateChange method is 0 (\'Completed "
            "with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to "
            "the description of the EnabledState and RequestedState "
            "properties for the detailed explanations of the RequestedState "
            "values."),
          IN (True),
          ModelCorrespondence {
            "CIM_EnabledLogicalElement.RequestedState"},
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", "..",
            "32768..65535"},
          Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
            "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved",
            "Vendor Reserved"}]
        uint16 RequestedState,
          [Description (
            "May contain a reference to the ConcreteJob created to track the "
            "state transition initiated by the method invocation."),
          IN (False),
          OUT (True)]
        CIM_ConcreteJob REF Job,
          [Description (
            "A timeout period that specifies the maximum amount of time that "
            "the client expects the transition to the new state to take. The "
            "interval format must be used to specify the TimeoutPeriod. A "
            "value of 0 or a null parameter indicates that the client has no "
            "time requirements for the transition. \nIf this property does "
            "not contain 0 or null and the implementation does not support "
            "this parameter, a return code of \'Use Of Timeout Parameter Not "
            "Supported\' shall be returned."),
          IN (True)]
        datetime TimeoutPeriod);
};

    [Deprecated { "CIM_ComputerSystem", "CIM_StorageLibraryCapabilities"},
    Description (
      "A StorageLibrary is a collection of ManagedSystemElements that operate "
      "together to provide cartridge library capabilities. This object serves "
      "as an aggregation point to group the following elements: "
      "MediaTransferDevices, a Label Reader, a library Door, "
      "MediaAccessDevices, and other Library components. \nThe use of this "
      "class is deprecated in favor of CIM_ComputerSystem. Originally it was "
      "felt that a media library could be purely mechanical and thus not a "
      "ComputerSystem. However all manageable libraries are ComputerSystems. "
      "This change simplifies the use of the model by client software."),
    UMLPackagePath ("CIM::Device::StorageLib"),
    Version ("2.9.0")]
class CIM_StorageLibrary : CIM_System {

        [Description (
          "RequestedState is an integer enumeration that indicates the last "
          "requested or desired state for the element, irrespective of the "
          "mechanism through which it was requested. The actual state of the "
          "element is represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or disabled "
          "states. Note that when EnabledState is set to 5 (\"Not "
          "Applicable\"), then this property has no meaning. Refer to the "
          "EnabledState property description for explanations of the values "
          "in the RequestedState enumeration. \n\"Unknown\" (0) indicates the "
          "last requested state for the element is unknown.\nNote that the "
          "value \"No Change\" (5) has been deprecated in lieu of indicating "
          "the last requested state is \"Unknown\" (0). If the last requested "
          "or desired state is unknown, RequestedState should have the value "
          "\"Unknown\" (0), but may have the value \"No Change\" (5).Offline "
          "(6) indicates that the element has been requested to transition to "
          "the Enabled but Offline EnabledState. \nIt should be noted that "
          "there are two new values in RequestedState that build on the "
          "statuses of EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then moving to an "
          "\"Enabled\" state. Reset indicates that the element is first "
          "\"Disabled\" and then \"Enabled\". The distinction between "
          "requesting \"Shut Down\" and \"Disabled\" should also be noted. "
          "Shut Down requests an orderly transition to the Disabled state, "
          "and might involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate disabling of the "
          "element, such that it will not execute or accept any commands or "
          "processing requests. \n\nThis property is set as the result of a "
          "method invocation (such as Start or StopService on CIM_Service), "
          "or can be overridden and defined as WRITEable in a subclass. The "
          "method approach is considered superior to a WRITEable property, "
          "because it allows an explicit invocation of the operation and the "
          "return of a result code. \n\nIf knowledge of the last "
          "RequestedState is not supported for the EnabledLogicalElement, the "
          "property shall be NULL or have the value 12 \"Not Applicable\"."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "..", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Deferred", "Quiesce",
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 RequestedState = 12;

        [Description (
          "Indicates the current health of the element. This attribute "
          "expresses the health of this element but not necessarily that of "
          "its subcomponents. The possible values are 0 to 30, where 5 means "
          "the element is entirely healthy and 30 means the element is "
          "completely non-functional. The following continuum is defined: "
          "\n\"Non-recoverable Error\" (30) - The element has completely "
          "failed, and recovery is not possible. All functionality provided "
          "by this element has been lost. \n\"Critical Failure\" (25) - The "
          "element is non-functional and recovery might not be possible. "
          "\n\"Major Failure\" (20) - The element is failing. It is possible "
          "that some or all of the functionality of this component is "
          "degraded or not working. \n\"Minor Failure\" (15) - All "
          "functionality is available but some might be degraded. "
          "\n\"Degraded/Warning\" (10) - The element is in working order and "
          "all functionality is provided. However, the element is not working "
          "to the best of its abilities. For example, the element might not "
          "be operating at optimal performance or it might be reporting "
          "recoverable errors. \n\"OK\" (5) - The element is fully functional "
          "and is operating within normal operational parameters and without "
          "error. \n\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \nDMTF has reserved the unused portion "
          "of the continuum for additional HealthStates in the future."),
        ValueMap { "0", "5", "10", "15", "20", "25", "30", "..",
          "32768..65535"},
        Values { "Unknown", "OK", "Degraded/Warning", "Minor failure",
          "Major failure", "Critical failure", "Non-recoverable error",
          "DMTF Reserved", "Vendor Specific"}]
    uint16 HealthState;

        [ArrayType ("Indexed"),
        Description (
          "Strings describing the various OperationalStatus array values. For "
          "example, if \"Stopping\" is the value assigned to "
          "OperationalStatus, then this property may contain an explanation "
          "as to why an object is being stopped. Note that entries in this "
          "array are correlated with those at the same array index in "
          "OperationalStatus."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"}]
    string StatusDescriptions[];

        [Description (
          "TransitioningToState indicates the target state to which the "
          "instance is transitioning. \nA value of 5 \"No Change\" shall "
          "indicate that no transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not support "
          "representing ongoing transitions. \nA value other than 5 or 12 "
          "shall identify the state to which the element is in the process of "
          "transitioning."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElement.RequestedState",
          "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", ".."},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Defer", "Quiesce", "Reboot",
          "Reset", "Not Applicable", "DMTF Reserved"}]
    uint16 TransitioningToState = 12;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 11 (\'In Service\').\nBoolean set to TRUE if an audit of "
          "the location of some or all of the Library\'s PhysicalMedia is "
          "currently being performed. That an individual Changer is currently "
          "doing an audit is indicated by a similar AuditInProgress boolean "
          "property on the Changer object.")]
    boolean AuditInProgress;

        [Description (
          "CommunicationStatus indicates the ability of the instrumentation "
          "to communicate with the underlying ManagedElement. "
          "CommunicationStatus consists of one of the following values: "
          "Unknown, None, Communication OK, Lost Communication, or No "
          "Contact. \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"Not Available\" indicates "
          "that the implementation (provider) is capable of returning a value "
          "for this property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any quality of "
          "service. \n\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to establish "
          "communications with it. \n\"Lost Communication\" indicates that "
          "the Managed Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable."),
        ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Communication OK",
          "Lost Communication", "No Contact", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 CommunicationStatus;

        [Description (
          "A string that provides information on how the primary system owner "
          "can be reached (for example, phone number, e-mail address, and so "
          "on)."),
        MappingStrings { "MIF.DMTF|General Information|001.4"},
        MaxLen (256),
        Write (True)]
    string PrimaryOwnerContact;

        [Description (
          "DetailedStatus compliments PrimaryStatus with additional status "
          "detail. It consists of one of the following values: Not Available, "
          "No Additional Information, Stressed, Predictive Failure, Error, "
          "Non-Recoverable Error, SupportingEntityInError. Detailed status is "
          "used to expand upon the PrimaryStatus of the element. \nA Null "
          "return indicates the implementation (provider) does not implement "
          "this property. \n\"Not Available\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"No Additional Information\" indicates that the "
          "element is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are overload, "
          "overheated, and so on. \n\"Predictive Failure\" indicates that an "
          "element is functioning normally but a failure is predicted in the "
          "near future. \n\"Non-Recoverable Error \" indicates that this "
          "element is in an error condition that requires human intervention. "
          "\n\"Supporting Entity in Error\" indicates that this element might "
          "be \"OK\" but that another element, on which it is dependent, is "
          "in error. An example is a network service or endpoint that cannot "
          "function due to lower-layer networking problems."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.PrimaryStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.."},
        Values { "Not Available", "No Additional Information", "Stressed",
          "Predictive Failure", "Non-Recoverable Error",
          "Supporting Entity in Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 DetailedStatus;

        [ArrayType ("Indexed"),
        Description (
          "OtherIdentifyingInfo captures additional data, beyond System Name "
          "information, that could be used to identify a ComputerSystem. One "
          "example would be to hold the Fibre Channel World-Wide Name (WWN) "
          "of a node. Note that if only the Fibre Channel name is available "
          "and is unique (able to be used as the System key), then this "
          "property would be NULL and the WWN would become the System key, "
          "its data placed in the Name property."),
        MaxLen (256),
        ModelCorrespondence { "CIM_System.IdentifyingDescriptions"}]
    string OtherIdentifyingInfo[];

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 10 (\'Stopped\').\nBoolean indicating whether the "
          "Library\'s robotics are currently active/enabled. If TRUE, then "
          "the Library may not be safe for a human to enter.")]
    boolean RoboticsEnabled;

        [ArrayType ("Indexed"),
        Description (
          "An array of free-form strings providing explanations and details "
          "behind the entries in the OtherIdentifying Info array. Note, each "
          "entry of this array is related to the entry in "
          "OtherIdentifyingInfo that is located at the same index."),
        ModelCorrespondence { "CIM_System.OtherIdentifyingInfo"}]
    string IdentifyingDescriptions[];

        [Description (
          "Capabilities of the StorageLibrary. For example, it can be "
          "indicated that the Library can perform automatic cleaning of the "
          "MediaAccessDevices contained in it (value=1) or that the Library "
          "provides physical door access for an operator (value=2)."),
        ValueMap { "0", "2", "3", "4"},
        Values { "Unknown", "Automatic Cleaning", "Manual Operation",
          "Front Panel Lockable"}]
    uint16 Capabilities[];

        [ArrayType ("Indexed"),
        Description (
          "Indicates the current statuses of the element. Various operational "
          "statuses are defined. Many of the enumeration\'s values are "
          "self-explanatory. However, a few are not and are described here in "
          "more detail. \n\"Stressed\" indicates that the element is "
          "functioning, but needs attention. Examples of \"Stressed\" states "
          "are overload, overheated, and so on. \n\"Predictive Failure\" "
          "indicates that an element is functioning nominally but predicting "
          "a failure in the near future. \n\"In Service\" describes an "
          "element being configured, maintained, cleaned, or otherwise "
          "administered. \n\"No Contact\" indicates that the monitoring "
          "system has knowledge of this element, but has never been able to "
          "establish communications with it. \n\"Lost Communication\" "
          "indicates that the ManagedSystem Element is known to exist and has "
          "been contacted successfully in the past, but is currently "
          "unreachable. \n\"Stopped\" and \"Aborted\" are similar, although "
          "the former implies a clean and orderly stop, while the latter "
          "implies an abrupt stop where the state and configuration of the "
          "element might need to be updated. \n\"Dormant\" indicates that the "
          "element is inactive or quiesced. \n\"Supporting Entity in Error\" "
          "indicates that this element might be \"OK\" but that another "
          "element, on which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n\"Completed\" indicates that "
          "the element has completed its operation. This value should be "
          "combined with either OK, Error, or Degraded so that a client can "
          "tell if the complete operation Completed with OK (passed), "
          "Completed with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did not report "
          "an error). \n\"Power Mode\" indicates that the element has "
          "additional power model information contained in the Associated "
          "PowerManagementService association. \n\"Relocating\" indicates the "
          "element is being relocated.\nOperationalStatus replaces the Status "
          "property on ManagedSystemElement to provide a consistent approach "
          "to enumerations, to address implementation needs for an array "
          "property, and to provide a migration path from today\'s "
          "environment to the future. This change was not made earlier "
          "because it required the deprecated qualifier. Due to the "
          "widespread use of the existing Status property in management "
          "applications, it is strongly recommended that providers or "
          "instrumentation provide both the Status and OperationalStatus "
          "properties. Further, the first value of OperationalStatus should "
          "contain the primary status for the element. When instrumented, "
          "Status (because it is single-valued) should also provide the "
          "primary status of the element."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.StatusDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "..",
          "0x8000.."},
        Values { "Unknown", "Other", "OK", "Degraded", "Stressed",
          "Predictive Failure", "Error", "Non-Recoverable Error",
          "Starting", "Stopping", "Stopped", "In Service", "No Contact",
          "Lost Communication", "Aborted", "Dormant",
          "Supporting Entity in Error", "Completed", "Power Mode",
          "Relocating", "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperationalStatus[];

        [Description (
          "The name of the primary system owner. The system owner is the "
          "primary user of the system."),
        MappingStrings { "MIF.DMTF|General Information|001.3"},
        MaxLen (64),
        Write (True)]
    string PrimaryOwnerName;

        [Deprecated { "CIM_ManagedSystemElement.OperationalStatus"},
        Description (
          "A string indicating the current status of the object. Various "
          "operational and non-operational statuses are defined. This "
          "property is deprecated in lieu of OperationalStatus, which "
          "includes the same semantics in its enumeration. This change is "
          "made for 3 reasons: \n1) Status is more correctly defined as an "
          "array. This definition overcomes the limitation of describing "
          "status using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND Stopped. \n2) A "
          "MaxLen of 10 is too restrictive and leads to unclear enumerated "
          "values. \n3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 implementations used "
          "the string property and did not want to modify their code. "
          "Therefore, Status was grandfathered into the Schema. Use of the "
          "deprecated qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus."),
        MaxLen (10),
        ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail",
          "Starting", "Stopping", "Service", "Stressed", "NonRecover",
          "No Contact", "Lost Comm", "Stopped"}]
    string Status;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;

        [Description (
          "A datetime value that indicates when the object was installed. "
          "Lack of a value does not indicate that the object is not installed."),
        MappingStrings { "MIF.DMTF|ComponentID|001.5"}]
    datetime InstallDate;

        [Description (
          "An enumerated value indicating an administrator\'s default or "
          "startup configuration for the Enabled State of an element. By "
          "default, the element is \"Enabled\" (value=2)."),
        ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535"},
        Values { "Enabled", "Disabled", "Not Applicable",
          "Enabled but Offline", "No Default", "Quiesce",
          "DMTF Reserved", "Vendor Reserved"},
        Write (True)]
    uint16 EnabledDefault = 2;

        [Description (
          "EnabledState is an integer enumeration that indicates the enabled "
          "and disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down (value=4) and starting (value=10) are transient states "
          "between enabled and disabled. The following text briefly "
          "summarizes the various enabled and disabled states: \nEnabled (2) "
          "indicates that the element is or could be executing commands, will "
          "process any queued commands, and queues new requests. \nDisabled "
          "(3) indicates that the element will not execute commands and will "
          "drop any new requests. \nShutting Down (4) indicates that the "
          "element is in the process of going to a Disabled state. \nNot "
          "Applicable (5) indicates the element does not support being "
          "enabled or disabled. \nEnabled but Offline (6) indicates that the "
          "element might be completing commands, and will drop any new "
          "requests. \nTest (7) indicates that the element is in a test "
          "state. \nDeferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \nQuiesce "
          "(9) indicates that the element is enabled but in a restricted "
          "mode.\nStarting (10) indicates that the element is in the process "
          "of going to an Enabled state. New requests are queued."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.OtherEnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11..32767", "32768..65535"},
        Values { "Unknown", "Other", "Enabled", "Disabled",
          "Shutting Down", "Not Applicable", "Enabled but Offline",
          "In Test", "Deferred", "Quiesce", "Starting", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 EnabledState = 5;

        [Description (
          "The date or time when the EnabledState of the element last "
          "changed. If the state of the element has not changed and this "
          "property is populated, then it must be set to a 0 interval value. "
          "If a state change was requested, but rejected or not yet "
          "processed, the property must not be updated.")]
    datetime TimeOfLastStateChange;

        [Deprecated { "No value"},
        Description (
          "This property is deprecated since all managed libraries willbe "
          "automated.\nBoolean set to TRUE if the Library includes a robotics "
          "mechanism that can be controlled by a ComputerSystem, to "
          "automatically load and unload PhysicalMedia to/from "
          "MediaAccessDevices and StorageMediaLocations. The property is set "
          "to FALSE if the Library represents a repository of Media that are "
          "inaccessible to a MediaAccess Device without human intervention. "
          "An example of a non- automated Library is a \'shelf\' or \'vault\' "
          "where Physical Media are kept for extended periods of time.")]
    boolean Automated;

        [Description (
          "CreationClassName indicates the name of the class or the subclass "
          "used in the creation of an instance. When used with the other key "
          "properties of this class, this property allows all instances of "
          "this class and its subclasses to be uniquely identified."),
        Key (True),
        MaxLen (256)]
    string CreationClassName;

        [Description (
          "PrimaryStatus provides a high level status value, intended to "
          "align with Red-Yellow-Green type representation of status. It "
          "should be used in conjunction with DetailedStatus to provide high "
          "level and detailed health status of the ManagedElement and its "
          "subcomponents. \nPrimaryStatus consists of one of the following "
          "values: Unknown, OK, Degraded or Error. \"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"OK\" indicates the "
          "ManagedElement is functioning normally. \n\"Degraded\" indicates "
          "the ManagedElement is functioning below normal. \n\"Error\" "
          "indicates the ManagedElement is in an Error condition."),
        ModelCorrespondence { "CIM_ManagedSystemElement.DetailedStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "..", "0x8000.."},
        Values { "Unknown", "OK", "Degraded", "Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 PrimaryStatus;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The inherited Name serves as the key of a System instance in an "
          "enterprise environment."),
        Key (True),
        MaxLen (256),
        Override ("Name")]
    string Name;

        [Description (
          "An array (bag) of strings that specifies the administrator "
          "-defined roles this System plays in the managed environment. "
          "Examples might be \'Building 8 print server\' or \'Boise user "
          "directories\'. A single system may perform multiple roles. \nNote "
          "that the instrumentation view of the \'roles\' of a System is "
          "defined by instantiating a specific subclass of System, or by "
          "properties in a subclass, or both. For example, the purpose of a "
          "ComputerSystem is defined using the Dedicated and "
          "OtherDedicatedDescription properties."),
        Write (True)]
    string Roles[];

        [Description (
          "A string that describes the enabled or disabled state of the "
          "element when the EnabledState property is set to 1 (\"Other\"). "
          "This property must be set to null when EnabledState is any value "
          "other than 1."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"}]
    string OtherEnabledState;

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "Maximum time in seconds that it takes for the Storage Library to "
          "perform a complete audit of each StorageMedia Location, to "
          "determine the absence or presence of a Physical Media. If "
          "automated support is not provided, then this property\'s value is "
          "undefined."),
        PUnit ("second"),
        Units ("Seconds")]
    uint64 MaxAuditTime;

        [Description (
          "The System object and its derivatives are top-level objects of "
          "CIM. They provide the scope for numerous components. Having unique "
          "System keys is required. A heuristic can be defined in individual "
          "System subclasses to attempt to always generate the same System "
          "Name Key. The NameFormat property identifies how the System name "
          "was generated, using the heuristic of the subclass."),
        MaxLen (64)]
    string NameFormat;

        [Description (
          "AvailableRequestedStates indicates the possible values for the "
          "RequestedState parameter of the method RequestStateChange, used to "
          "initiate a state change. The values listed shall be a subset of "
          "the values contained in the RequestedStatesSupported property of "
          "the associated instance of CIM_EnabledLogicalElementCapabilities "
          "where the values selected are a function of the current state of "
          "the CIM_EnabledLogicalElement. This property may be non-null if an "
          "implementation is able to advertise the set of possible values as "
          "a function of the current state. This property shall be null if an "
          "implementation is unable to determine the set of possible values "
          "as a function of the current state."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported"},
        ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".."},
        Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
          "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved"}]
    uint16 AvailableRequestedStates[];

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 4 (\'stressed\').\nBoolean set to TRUE if there are more "
          "PhysicalMedia in a Library than there are StorageMediaLocations to "
          "contain them. For instance, if all MediaAccessDevices have a Media "
          "loaded in them, and all StorageMediaLocations are loaded by an "
          "operator, then an Overfilled condition exists.")]
    boolean Overfilled;

        [Description (
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for providing "
          "more detail with respect to the value of EnabledState. It can also "
          "provide the transitional states when an element is transitioning "
          "from one state to another, such as when an element is "
          "transitioning between EnabledState and RequestedState, as well as "
          "other transitional conditions.\nOperatingStatus consists of one of "
          "the following values: Unknown, Not Available, In Service, "
          "Starting, Stopping, Stopped, Aborted, Dormant, Completed, "
          "Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"None\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n\"Starting\" "
          "describes an element being initialized. \n\"Stopping\" describes "
          "an element being brought to an orderly stop. \n\"Stopped\" and "
          "\"Aborted\" are similar, although the former implies a clean and "
          "orderly stop, while the latter implies an abrupt stop where the "
          "state and configuration of the element might need to be updated. "
          "\n\"Dormant\" indicates that the element is inactive or quiesced. "
          "\n\"Completed\" indicates that the element has completed its "
          "operation. This value should be combined with either OK, Error, or "
          "Degraded in the PrimaryStatus so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed with "
          "Error (failed), or Completed with Degraded (the operation "
          "finished, but it did not complete OK or did not report an error). "
          "\n\"Migrating\" element is being moved between host elements. "
          "\n\"Immigrating\" element is being moved to new host element. "
          "\n\"Emigrating\" element is being moved away from host element. "
          "\n\"Shutting Down\" describes an element being brought to an "
          "abrupt stop. \n\"In Test\" element is performing test functions. "
          "\n\"Transitioning\" describes an element that is between states, "
          "that is, it is not fully available in either its previous state or "
          "its next state. This value should be used if other values "
          "indicating a transition to a specific state are not "
          "applicable.\n\"In Service\" describes an element that is in "
          "service and operational."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Servicing", "Starting",
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed",
          "Migrating", "Emigrating", "Immigrating", "Snapshotting",
          "Shutting Down", "In Test", "Transitioning", "In Service",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperatingStatus;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 0 (\'Unknown\').\nBoolean set to TRUE if the Library can "
          "not currently report the correct state of each PhysicalMedia "
          "within its proper StorageMediaLocation.")]
    boolean AuditNeeded;

        [Description (
          "Requests that the state of the element be changed to the value "
          "specified in the RequestedState parameter. When the requested "
          "state change takes place, the EnabledState and RequestedState of "
          "the element will be the same. Invoking the RequestStateChange "
          "method multiple times could result in earlier requests being "
          "overwritten or lost. \nA return code of 0 shall indicate the state "
          "change was successfully initiated. \nA return code of 3 shall "
          "indicate that the state transition cannot complete within the "
          "interval specified by the TimeoutPeriod parameter. \nA return code "
          "of 4096 (0x1000) shall indicate the state change was successfully "
          "initiated, a ConcreteJob has been created, and its reference "
          "returned in the output parameter Job. Any other return code "
          "indicates an error condition."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535"},
        Values { "Completed with No Error", "Not Supported",
          "Unknown or Unspecified Error",
          "Cannot complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Job Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific"}]
    uint32 RequestStateChange(
          [Description (
            "The state requested for the element. This information will be "
            "placed into the RequestedState property of the instance if the "
            "return code of the RequestStateChange method is 0 (\'Completed "
            "with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to "
            "the description of the EnabledState and RequestedState "
            "properties for the detailed explanations of the RequestedState "
            "values."),
          IN (True),
          ModelCorrespondence {
            "CIM_EnabledLogicalElement.RequestedState"},
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", "..",
            "32768..65535"},
          Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
            "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved",
            "Vendor Reserved"}]
        uint16 RequestedState,
          [Description (
            "May contain a reference to the ConcreteJob created to track the "
            "state transition initiated by the method invocation."),
          IN (False),
          OUT (True)]
        CIM_ConcreteJob REF Job,
          [Description (
            "A timeout period that specifies the maximum amount of time that "
            "the client expects the transition to the new state to take. The "
            "interval format must be used to specify the TimeoutPeriod. A "
            "value of 0 or a null parameter indicates that the client has no "
            "time requirements for the transition. \nIf this property does "
            "not contain 0 or null and the implementation does not support "
            "this parameter, a return code of \'Use Of Timeout Parameter Not "
            "Supported\' shall be returned."),
          IN (True)]
        datetime TimeoutPeriod);

        [Deprecated { "CIM_ComputerSystem.RequestStateChange"},
        Description (
          "Requests that the Library robotics be enabled for automated "
          "operation (input parameter, Enabled, set to TRUE), or disabled for "
          "manual operation (input parameter set to FALSE). The return value "
          "should be 0 if the request was successfully executed, 1 if the "
          "request is not supported and some other value if an error "
          "occurred. In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The strings "
          "to which the ValueMap contents are \'translated\' may also be "
          "specified in the subclass as a Values array qualifier.")]
    uint32 EnableRobotics(
          [Description ("Set TRUE to enable."),
          IN (True)]
        boolean Enable);
};

    [Description (
      "The ApplicationSystem class represents an application or a software "
      "system that supports a particular business function and that can be "
      "managed as an independent unit. Such a system can be decomposed into "
      "its functional components using the CIM_SoftwareFeature class. The "
      "Features for a particular application or software system are located "
      "using the CIM_ApplicationSystemSoftwareFeature association. The "
      "features are part of the deployment-oriented aspects of the "
      "application system. \nWith regard to the application runtime aspects, "
      "the ApplicationSystem class also represents the core class of the "
      "Application Systems\' sub-model which of the application runtime "
      "model. Its role in the systems sub-model is a) the root node of the "
      "containment hierarchy of the application elements (at runtime) as "
      "services, components, sub-systems, etc., b) the place for runtime "
      "overview information such as response time or system status, c) "
      "runtime control of the entire application (e.g., start/stop), and d) "
      "the main entry point to the navigation through and drill-down into the "
      "runtime model. \nThe lifetime of an instance of this class is not "
      "limited to the application instance it represents. Even if the "
      "application is not running, the ApplicationSystem object can report "
      "properties that have values (e.g., the name of the application or the "
      "current status). Note that it is also possible to define the lifetime "
      "of the objects through the lifetime of the application instances. "
      "\nThrough ApplicationSystemDependency, non-containment relationships "
      "can be expressed."),
    UMLPackagePath ("CIM::Application::DeploymentModel"),
    Version ("2.8.0")]
class CIM_ApplicationSystem : CIM_System {

        [Description (
          "RequestedState is an integer enumeration that indicates the last "
          "requested or desired state for the element, irrespective of the "
          "mechanism through which it was requested. The actual state of the "
          "element is represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or disabled "
          "states. Note that when EnabledState is set to 5 (\"Not "
          "Applicable\"), then this property has no meaning. Refer to the "
          "EnabledState property description for explanations of the values "
          "in the RequestedState enumeration. \n\"Unknown\" (0) indicates the "
          "last requested state for the element is unknown.\nNote that the "
          "value \"No Change\" (5) has been deprecated in lieu of indicating "
          "the last requested state is \"Unknown\" (0). If the last requested "
          "or desired state is unknown, RequestedState should have the value "
          "\"Unknown\" (0), but may have the value \"No Change\" (5).Offline "
          "(6) indicates that the element has been requested to transition to "
          "the Enabled but Offline EnabledState. \nIt should be noted that "
          "there are two new values in RequestedState that build on the "
          "statuses of EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then moving to an "
          "\"Enabled\" state. Reset indicates that the element is first "
          "\"Disabled\" and then \"Enabled\". The distinction between "
          "requesting \"Shut Down\" and \"Disabled\" should also be noted. "
          "Shut Down requests an orderly transition to the Disabled state, "
          "and might involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate disabling of the "
          "element, such that it will not execute or accept any commands or "
          "processing requests. \n\nThis property is set as the result of a "
          "method invocation (such as Start or StopService on CIM_Service), "
          "or can be overridden and defined as WRITEable in a subclass. The "
          "method approach is considered superior to a WRITEable property, "
          "because it allows an explicit invocation of the operation and the "
          "return of a result code. \n\nIf knowledge of the last "
          "RequestedState is not supported for the EnabledLogicalElement, the "
          "property shall be NULL or have the value 12 \"Not Applicable\"."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "..", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Deferred", "Quiesce",
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 RequestedState = 12;

        [Description (
          "Indicates the current health of the element. This attribute "
          "expresses the health of this element but not necessarily that of "
          "its subcomponents. The possible values are 0 to 30, where 5 means "
          "the element is entirely healthy and 30 means the element is "
          "completely non-functional. The following continuum is defined: "
          "\n\"Non-recoverable Error\" (30) - The element has completely "
          "failed, and recovery is not possible. All functionality provided "
          "by this element has been lost. \n\"Critical Failure\" (25) - The "
          "element is non-functional and recovery might not be possible. "
          "\n\"Major Failure\" (20) - The element is failing. It is possible "
          "that some or all of the functionality of this component is "
          "degraded or not working. \n\"Minor Failure\" (15) - All "
          "functionality is available but some might be degraded. "
          "\n\"Degraded/Warning\" (10) - The element is in working order and "
          "all functionality is provided. However, the element is not working "
          "to the best of its abilities. For example, the element might not "
          "be operating at optimal performance or it might be reporting "
          "recoverable errors. \n\"OK\" (5) - The element is fully functional "
          "and is operating within normal operational parameters and without "
          "error. \n\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \nDMTF has reserved the unused portion "
          "of the continuum for additional HealthStates in the future."),
        ValueMap { "0", "5", "10", "15", "20", "25", "30", "..",
          "32768..65535"},
        Values { "Unknown", "OK", "Degraded/Warning", "Minor failure",
          "Major failure", "Critical failure", "Non-recoverable error",
          "DMTF Reserved", "Vendor Specific"}]
    uint16 HealthState;

        [ArrayType ("Indexed"),
        Description (
          "Strings describing the various OperationalStatus array values. For "
          "example, if \"Stopping\" is the value assigned to "
          "OperationalStatus, then this property may contain an explanation "
          "as to why an object is being stopped. Note that entries in this "
          "array are correlated with those at the same array index in "
          "OperationalStatus."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"}]
    string StatusDescriptions[];

        [Description (
          "TransitioningToState indicates the target state to which the "
          "instance is transitioning. \nA value of 5 \"No Change\" shall "
          "indicate that no transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not support "
          "representing ongoing transitions. \nA value other than 5 or 12 "
          "shall identify the state to which the element is in the process of "
          "transitioning."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElement.RequestedState",
          "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", ".."},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Defer", "Quiesce", "Reboot",
          "Reset", "Not Applicable", "DMTF Reserved"}]
    uint16 TransitioningToState = 12;

        [Description (
          "ServingStatus is a summary of MSE.OperationalStatus. It allows "
          "simplified and efficient determination of whether the application "
          "is providing service or has stopped doing so for various reasons "
          "like errors, shutdown, abort, etc. Therefore, no transitional "
          "values are provided. The property does not show any errors. Errors "
          "MUST be described in MSE.OperationalStatus, and MAY also be "
          "described in logs or other data sources. Therefore, ServingStatus "
          "is suited to provide summary information for monitoring purposes "
          "and service level management. \nThe mapping to "
          "MSE.OperationalStatus is as follows: \nServingStatus <- "
          "MSE.OperationalStatus \nUnknown <- Unknown, No Contact, Lost "
          "Communication \nEither of the values <- Other \nServing <- OK, "
          "Degraded, Stressed, Predictive Failure, Completed \nNot Serving <- "
          "Error, Non-Recoverable Error, Starting, Stopping, Stopped, In "
          "Service, Aborted, Dormant, Supporting Entity in Error."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"},
        ValueMap { "0", "1", "2", "5..4096", "4097..65535"},
        Values { "Unknown", "Serving", "Not Serving", "DMTF Reserved",
          "Vendor Specific"}]
    uint16 ServingStatus;

        [Description (
          "CommunicationStatus indicates the ability of the instrumentation "
          "to communicate with the underlying ManagedElement. "
          "CommunicationStatus consists of one of the following values: "
          "Unknown, None, Communication OK, Lost Communication, or No "
          "Contact. \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"Not Available\" indicates "
          "that the implementation (provider) is capable of returning a value "
          "for this property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any quality of "
          "service. \n\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to establish "
          "communications with it. \n\"Lost Communication\" indicates that "
          "the Managed Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable."),
        ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Communication OK",
          "Lost Communication", "No Contact", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 CommunicationStatus;

        [Description (
          "A string that provides information on how the primary system owner "
          "can be reached (for example, phone number, e-mail address, and so "
          "on)."),
        MappingStrings { "MIF.DMTF|General Information|001.4"},
        MaxLen (256),
        Write (True)]
    string PrimaryOwnerContact;

        [Description (
          "DetailedStatus compliments PrimaryStatus with additional status "
          "detail. It consists of one of the following values: Not Available, "
          "No Additional Information, Stressed, Predictive Failure, Error, "
          "Non-Recoverable Error, SupportingEntityInError. Detailed status is "
          "used to expand upon the PrimaryStatus of the element. \nA Null "
          "return indicates the implementation (provider) does not implement "
          "this property. \n\"Not Available\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"No Additional Information\" indicates that the "
          "element is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are overload, "
          "overheated, and so on. \n\"Predictive Failure\" indicates that an "
          "element is functioning normally but a failure is predicted in the "
          "near future. \n\"Non-Recoverable Error \" indicates that this "
          "element is in an error condition that requires human intervention. "
          "\n\"Supporting Entity in Error\" indicates that this element might "
          "be \"OK\" but that another element, on which it is dependent, is "
          "in error. An example is a network service or endpoint that cannot "
          "function due to lower-layer networking problems."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.PrimaryStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.."},
        Values { "Not Available", "No Additional Information", "Stressed",
          "Predictive Failure", "Non-Recoverable Error",
          "Supporting Entity in Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 DetailedStatus;

        [ArrayType ("Indexed"),
        Description (
          "OtherIdentifyingInfo captures additional data, beyond System Name "
          "information, that could be used to identify a ComputerSystem. One "
          "example would be to hold the Fibre Channel World-Wide Name (WWN) "
          "of a node. Note that if only the Fibre Channel name is available "
          "and is unique (able to be used as the System key), then this "
          "property would be NULL and the WWN would become the System key, "
          "its data placed in the Name property."),
        MaxLen (256),
        ModelCorrespondence { "CIM_System.IdentifyingDescriptions"}]
    string OtherIdentifyingInfo[];

        [Description (
          "The point in time (date and time) when the application system was "
          "last started. If the application system is in a state other the "
          "state Enabled (i.e., started and running) this value is not "
          "meaningful and the property value MUST be set to all zeros. "
          "\nStartupTime is preferably the point in time when the application "
          "is available to the user. Instead, if the provider and/or the "
          "instrumentation cannot determine the point in time the application "
          "becomes available, the point in time can be used at which the "
          "underlying operating system reports successful launch of the "
          "application. If no value can be provided the property value MUST "
          "be set to all zeros.")]
    datetime StartupTime;

        [ArrayType ("Indexed"),
        Description (
          "An array of free-form strings providing explanations and details "
          "behind the entries in the OtherIdentifying Info array. Note, each "
          "entry of this array is related to the entry in "
          "OtherIdentifyingInfo that is located at the same index."),
        ModelCorrespondence { "CIM_System.OtherIdentifyingInfo"}]
    string IdentifyingDescriptions[];

        [ArrayType ("Indexed"),
        Description (
          "Indicates the current statuses of the element. Various operational "
          "statuses are defined. Many of the enumeration\'s values are "
          "self-explanatory. However, a few are not and are described here in "
          "more detail. \n\"Stressed\" indicates that the element is "
          "functioning, but needs attention. Examples of \"Stressed\" states "
          "are overload, overheated, and so on. \n\"Predictive Failure\" "
          "indicates that an element is functioning nominally but predicting "
          "a failure in the near future. \n\"In Service\" describes an "
          "element being configured, maintained, cleaned, or otherwise "
          "administered. \n\"No Contact\" indicates that the monitoring "
          "system has knowledge of this element, but has never been able to "
          "establish communications with it. \n\"Lost Communication\" "
          "indicates that the ManagedSystem Element is known to exist and has "
          "been contacted successfully in the past, but is currently "
          "unreachable. \n\"Stopped\" and \"Aborted\" are similar, although "
          "the former implies a clean and orderly stop, while the latter "
          "implies an abrupt stop where the state and configuration of the "
          "element might need to be updated. \n\"Dormant\" indicates that the "
          "element is inactive or quiesced. \n\"Supporting Entity in Error\" "
          "indicates that this element might be \"OK\" but that another "
          "element, on which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n\"Completed\" indicates that "
          "the element has completed its operation. This value should be "
          "combined with either OK, Error, or Degraded so that a client can "
          "tell if the complete operation Completed with OK (passed), "
          "Completed with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did not report "
          "an error). \n\"Power Mode\" indicates that the element has "
          "additional power model information contained in the Associated "
          "PowerManagementService association. \n\"Relocating\" indicates the "
          "element is being relocated.\nOperationalStatus replaces the Status "
          "property on ManagedSystemElement to provide a consistent approach "
          "to enumerations, to address implementation needs for an array "
          "property, and to provide a migration path from today\'s "
          "environment to the future. This change was not made earlier "
          "because it required the deprecated qualifier. Due to the "
          "widespread use of the existing Status property in management "
          "applications, it is strongly recommended that providers or "
          "instrumentation provide both the Status and OperationalStatus "
          "properties. Further, the first value of OperationalStatus should "
          "contain the primary status for the element. When instrumented, "
          "Status (because it is single-valued) should also provide the "
          "primary status of the element."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.StatusDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "..",
          "0x8000.."},
        Values { "Unknown", "Other", "OK", "Degraded", "Stressed",
          "Predictive Failure", "Error", "Non-Recoverable Error",
          "Starting", "Stopping", "Stopped", "In Service", "No Contact",
          "Lost Communication", "Aborted", "Dormant",
          "Supporting Entity in Error", "Completed", "Power Mode",
          "Relocating", "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperationalStatus[];

        [Description (
          "The name of the primary system owner. The system owner is the "
          "primary user of the system."),
        MappingStrings { "MIF.DMTF|General Information|001.3"},
        MaxLen (64),
        Write (True)]
    string PrimaryOwnerName;

        [Deprecated { "CIM_ManagedSystemElement.OperationalStatus"},
        Description (
          "A string indicating the current status of the object. Various "
          "operational and non-operational statuses are defined. This "
          "property is deprecated in lieu of OperationalStatus, which "
          "includes the same semantics in its enumeration. This change is "
          "made for 3 reasons: \n1) Status is more correctly defined as an "
          "array. This definition overcomes the limitation of describing "
          "status using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND Stopped. \n2) A "
          "MaxLen of 10 is too restrictive and leads to unclear enumerated "
          "values. \n3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 implementations used "
          "the string property and did not want to modify their code. "
          "Therefore, Status was grandfathered into the Schema. Use of the "
          "deprecated qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus."),
        MaxLen (10),
        ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail",
          "Starting", "Stopping", "Service", "Stressed", "NonRecover",
          "No Contact", "Lost Comm", "Stopped"}]
    string Status;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;

        [Description (
          "A datetime value that indicates when the object was installed. "
          "Lack of a value does not indicate that the object is not installed."),
        MappingStrings { "MIF.DMTF|ComponentID|001.5"}]
    datetime InstallDate;

        [Description (
          "An enumerated value indicating an administrator\'s default or "
          "startup configuration for the Enabled State of an element. By "
          "default, the element is \"Enabled\" (value=2)."),
        ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535"},
        Values { "Enabled", "Disabled", "Not Applicable",
          "Enabled but Offline", "No Default", "Quiesce",
          "DMTF Reserved", "Vendor Reserved"},
        Write (True)]
    uint16 EnabledDefault = 2;

        [Description (
          "EnabledState is an integer enumeration that indicates the "
          "enabled/disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down and starting are transient states between enabled and "
          "disabled. \nIn contrast to the original version defined higher in "
          "the inheritance hierarchy (EnabledLogicalElement), EnabledState is "
          "simplified. It reflects the notion of an execution status tailored "
          "to applications and represents a summary of the original property. "
          "It allows simplified and efficient determination of whether the "
          "application is started, stopped or in transition between either of "
          "these states. The property does not show any errors. Errors MUST "
          "be described in MSE.OperationalStatus, and MAY also be described "
          "in logs or other data sources. \nThe mapping to "
          "MSE.OperationalStatus is as follows: \nExecutionStatus <- "
          "MSE.OperationalStatus \nUnknown <- Unknown, No Contact, Lost "
          "Communication, \nEither of the values <- Other \nEnabled (started) "
          "<- OK, Degraded, Stressed, Predictive Failure, In Service, "
          "Dormant, Supporting Entity in Error, Completed \nEnabled or "
          "Disabled (Started or Stopped) <- Error, Non-Recoverable Error "
          "\nStarting <- Starting \nShutting Down (Stopping) <- Stopping "
          "\nDisabled (Stopped) <- Stopped, Aborted. \nThe mapping to the "
          "original EnabledState property is as follows: \nUnknown <- "
          "Unknown, Not Applicable \nEither of the values <-Other \nEnabled "
          "<- Enabled, Enabled but Offline, In Test, Deferred, Quiesce "
          "\nDisabled <- Disabled \nShuttingDown <- ShuttingDown \nStarting "
          "<- Starting."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.OtherEnabledState"},
        Override ("EnabledState"),
        ValueMap { "0", "2", "3", "4", "10", "11..32767", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shutting Down",
          "Starting", "DMTF Reserved", "Vendor Reserved"}]
    uint16 EnabledState = 0;

        [Description (
          "The date or time when the EnabledState of the element last "
          "changed. If the state of the element has not changed and this "
          "property is populated, then it must be set to a 0 interval value. "
          "If a state change was requested, but rejected or not yet "
          "processed, the property must not be updated.")]
    datetime TimeOfLastStateChange;

        [Description (
          "The point in time at which the ServingStatus property was last "
          "updated."),
        ModelCorrespondence { "CIM_ApplicationSystem.ServingStatus"}]
    datetime LastServingStatusUpdate;

        [Description (
          "CreationClassName indicates the name of the class or the subclass "
          "used in the creation of an instance. When used with the other key "
          "properties of this class, this property allows all instances of "
          "this class and its subclasses to be uniquely identified."),
        Key (True),
        MaxLen (256)]
    string CreationClassName;

        [Description (
          "PrimaryStatus provides a high level status value, intended to "
          "align with Red-Yellow-Green type representation of status. It "
          "should be used in conjunction with DetailedStatus to provide high "
          "level and detailed health status of the ManagedElement and its "
          "subcomponents. \nPrimaryStatus consists of one of the following "
          "values: Unknown, OK, Degraded or Error. \"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"OK\" indicates the "
          "ManagedElement is functioning normally. \n\"Degraded\" indicates "
          "the ManagedElement is functioning below normal. \n\"Error\" "
          "indicates the ManagedElement is in an Error condition."),
        ModelCorrespondence { "CIM_ManagedSystemElement.DetailedStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "..", "0x8000.."},
        Values { "Unknown", "OK", "Degraded", "Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 PrimaryStatus;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The inherited Name serves as the key of a System instance in an "
          "enterprise environment."),
        Key (True),
        MaxLen (256),
        Override ("Name")]
    string Name;

        [Description (
          "An array (bag) of strings that specifies the administrator "
          "-defined roles this System plays in the managed environment. "
          "Examples might be \'Building 8 print server\' or \'Boise user "
          "directories\'. A single system may perform multiple roles. \nNote "
          "that the instrumentation view of the \'roles\' of a System is "
          "defined by instantiating a specific subclass of System, or by "
          "properties in a subclass, or both. For example, the purpose of a "
          "ComputerSystem is defined using the Dedicated and "
          "OtherDedicatedDescription properties."),
        Write (True)]
    string Roles[];

        [Description (
          "A string that describes the enabled or disabled state of the "
          "element when the EnabledState property is set to 1 (\"Other\"). "
          "This property must be set to null when EnabledState is any value "
          "other than 1."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"}]
    string OtherEnabledState;

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The System object and its derivatives are top-level objects of "
          "CIM. They provide the scope for numerous components. Having unique "
          "System keys is required. A heuristic can be defined in individual "
          "System subclasses to attempt to always generate the same System "
          "Name Key. The NameFormat property identifies how the System name "
          "was generated, using the heuristic of the subclass."),
        MaxLen (64)]
    string NameFormat;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for providing "
          "more detail with respect to the value of EnabledState. It can also "
          "provide the transitional states when an element is transitioning "
          "from one state to another, such as when an element is "
          "transitioning between EnabledState and RequestedState, as well as "
          "other transitional conditions.\nOperatingStatus consists of one of "
          "the following values: Unknown, Not Available, In Service, "
          "Starting, Stopping, Stopped, Aborted, Dormant, Completed, "
          "Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"None\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n\"Starting\" "
          "describes an element being initialized. \n\"Stopping\" describes "
          "an element being brought to an orderly stop. \n\"Stopped\" and "
          "\"Aborted\" are similar, although the former implies a clean and "
          "orderly stop, while the latter implies an abrupt stop where the "
          "state and configuration of the element might need to be updated. "
          "\n\"Dormant\" indicates that the element is inactive or quiesced. "
          "\n\"Completed\" indicates that the element has completed its "
          "operation. This value should be combined with either OK, Error, or "
          "Degraded in the PrimaryStatus so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed with "
          "Error (failed), or Completed with Degraded (the operation "
          "finished, but it did not complete OK or did not report an error). "
          "\n\"Migrating\" element is being moved between host elements. "
          "\n\"Immigrating\" element is being moved to new host element. "
          "\n\"Emigrating\" element is being moved away from host element. "
          "\n\"Shutting Down\" describes an element being brought to an "
          "abrupt stop. \n\"In Test\" element is performing test functions. "
          "\n\"Transitioning\" describes an element that is between states, "
          "that is, it is not fully available in either its previous state or "
          "its next state. This value should be used if other values "
          "indicating a transition to a specific state are not "
          "applicable.\n\"In Service\" describes an element that is in "
          "service and operational."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Servicing", "Starting",
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed",
          "Migrating", "Emigrating", "Immigrating", "Snapshotting",
          "Shutting Down", "In Test", "Transitioning", "In Service",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperatingStatus;

        [Description (
          "Distribution describes how the application system is distributed "
          "with respect to its underlying servers. In general, the "
          "application system is distributed or local. This property "
          "indicates whether the application system is running on one or "
          "multiple servers. This can be determined without having to query "
          "for associated servers represented by ComputerSystems. Distributed "
          "systems also introduce a virtual notion to themselves. Note that a "
          "distributed application system is not tangible but virtual. Only "
          "its contained local systems can be found as processes or threads, "
          "and can therefore be regarded as tangible. The distributed system "
          "remains a named, virtual entity, that scopes strongly bound "
          "constituents and allows the application to be managed in its "
          "entirety. \nThe property is needed to help root cause analysis and "
          "operations, especially when these are automated, in order to "
          "clearly know that more than one executed application - most likely "
          "the local application systems - is affected by the management "
          "task. This is particularly true if the contained application "
          "systems provide uniform functionality like webserver or "
          "application server farms. \nTo express constraints between "
          "distributed and local system, this class must be derived and "
          "appropriate associations must be defined. \nThis property should "
          "not be confused with the Roles[] property defined in System. The "
          "latter is reserved for administrator assigned roles."),
        ValueMap { "0", "1", "2", "3..32767", "32768..65535"},
        Values { "Unknown", "Distributed", "Local", "DMTF Reserved",
          "Vendor Specific"}]
    uint16 Distribution;

        [Description (
          "AvailableRequestedStates indicates the possible values for the "
          "RequestedState parameter of the method RequestStateChange, used to "
          "initiate a state change. The values listed shall be a subset of "
          "the values contained in the RequestedStatesSupported property of "
          "the associated instance of CIM_EnabledLogicalElementCapabilities "
          "where the values selected are a function of the current state of "
          "the CIM_EnabledLogicalElement. This property may be non-null if an "
          "implementation is able to advertise the set of possible values as "
          "a function of the current state. This property shall be null if an "
          "implementation is unable to determine the set of possible values "
          "as a function of the current state."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported"},
        ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".."},
        Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
          "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved"}]
    uint16 AvailableRequestedStates[];

        [Description (
          "Requests that the state of the element be changed to the value "
          "specified in the RequestedState parameter. When the requested "
          "state change takes place, the EnabledState and RequestedState of "
          "the element will be the same. Invoking the RequestStateChange "
          "method multiple times could result in earlier requests being "
          "overwritten or lost. \nA return code of 0 shall indicate the state "
          "change was successfully initiated. \nA return code of 3 shall "
          "indicate that the state transition cannot complete within the "
          "interval specified by the TimeoutPeriod parameter. \nA return code "
          "of 4096 (0x1000) shall indicate the state change was successfully "
          "initiated, a ConcreteJob has been created, and its reference "
          "returned in the output parameter Job. Any other return code "
          "indicates an error condition."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535"},
        Values { "Completed with No Error", "Not Supported",
          "Unknown or Unspecified Error",
          "Cannot complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Job Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific"}]
    uint32 RequestStateChange(
          [Description (
            "The state requested for the element. This information will be "
            "placed into the RequestedState property of the instance if the "
            "return code of the RequestStateChange method is 0 (\'Completed "
            "with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to "
            "the description of the EnabledState and RequestedState "
            "properties for the detailed explanations of the RequestedState "
            "values."),
          IN (True),
          ModelCorrespondence {
            "CIM_EnabledLogicalElement.RequestedState"},
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", "..",
            "32768..65535"},
          Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
            "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved",
            "Vendor Reserved"}]
        uint16 RequestedState,
          [Description (
            "May contain a reference to the ConcreteJob created to track the "
            "state transition initiated by the method invocation."),
          IN (False),
          OUT (True)]
        CIM_ConcreteJob REF Job,
          [Description (
            "A timeout period that specifies the maximum amount of time that "
            "the client expects the transition to the new state to take. The "
            "interval format must be used to specify the TimeoutPeriod. A "
            "value of 0 or a null parameter indicates that the client has no "
            "time requirements for the transition. \nIf this property does "
            "not contain 0 or null and the implementation does not support "
            "this parameter, a return code of \'Use Of Timeout Parameter Not "
            "Supported\' shall be returned."),
          IN (True)]
        datetime TimeoutPeriod);

        [Description (
          "StopApplication() allows for stopping/shutting down an application "
          "system. It is up to the implementation of the method to define "
          "which of the contained or dependent sub-elements are to be stopped "
          "and in which order their stop has to occur. \nSince a system "
          "shutdown can last considerable time (several minutes is not "
          "necessarily unusual for complex distributed applications), the "
          "method can be implemented synchronously or asynchronously. In both "
          "cases EnabledState and RequestedState reflect the current state of "
          "the application and the desired state (Disabled) respectively. The "
          "exact nature of the errors during the stop cannot be determined in "
          "the asynchronous case. The method must return one of the "
          "following: \nUnspecified Error: If no return code can be "
          "identified \nCompleted with No Error: successful invocation \nStop "
          "Already in Process: application is shutting down \nFailed: "
          "Indicates errors upon execution."),
        ModelCorrespondence { "CIM_ApplicationSystem.EnabledState",
          "CIM_ApplicationSystem.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4..4096", "4097..32767",
          "32768..65535"},
        Values { "Unspecified Error", "Completed with No Error",
          "Stop Already in Process", "Failed", "DMTF Reserved",
          "Method Reserved", "Vendor Specific"}]
    uint16 StopApplication();

        [Description (
          "StartApplication() starts an application system. The "
          "ApplicationSystem object must have been created prior to the "
          "invocation of this method. It is up to the implementation of the "
          "method to define which of the contained or dependent sub-elements "
          "are to be started and in which order their startup may occur. "
          "\nSince a system startup can extend over long periods of time "
          "(several minutes is not unusual for complex distributed "
          "applications), the method can be implemented synchronously or "
          "asynchronously. In both cases EnabledState and RequestedState "
          "reflect the current state of the application and the desired state "
          "(Enabled) respectively. The exact nature of the errors during the "
          "startup cannot be determined in the asynchronous case. The method "
          "must return one of the following values: \nUnspecified Error: If "
          "no return code can be identified \nCompleted with No Error: "
          "successful invocation \nStart Already in Progress: application "
          "still being started \nFailed:Indicates errors upon execution."),
        ModelCorrespondence { "CIM_ApplicationSystem.EnabledState",
          "CIM_ApplicationSystem.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4..4096", "4097..32767",
          "32768..65535"},
        Values { "Unspecified Error", "Completed with No Error",
          "Start Already in Progress", "Failed", "DMTF Reserved",
          "Method Reserved", "Vendor Specific"}]
    uint16 StartApplication();
};

    [Description (
      "A class derived from System that is a special collection of "
      "ManagedSystemElements. This collection is related to the providing of "
      "compute capabilities and MAY serve as an aggregation point to "
      "associate one or more of the following elements: FileSystem, "
      "OperatingSystem, Processor and Memory (Volatile and/or NonVolatile "
      "Storage)."),
    UMLPackagePath ("CIM::System::SystemElements"),
    Version ("2.36.0")]
class CIM_ComputerSystem : CIM_System {

        [Description (
          "RequestedState is an integer enumeration that indicates the last "
          "requested or desired state for the element, irrespective of the "
          "mechanism through which it was requested. The actual state of the "
          "element is represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or disabled "
          "states. Note that when EnabledState is set to 5 (\"Not "
          "Applicable\"), then this property has no meaning. Refer to the "
          "EnabledState property description for explanations of the values "
          "in the RequestedState enumeration. \n\"Unknown\" (0) indicates the "
          "last requested state for the element is unknown.\nNote that the "
          "value \"No Change\" (5) has been deprecated in lieu of indicating "
          "the last requested state is \"Unknown\" (0). If the last requested "
          "or desired state is unknown, RequestedState should have the value "
          "\"Unknown\" (0), but may have the value \"No Change\" (5).Offline "
          "(6) indicates that the element has been requested to transition to "
          "the Enabled but Offline EnabledState. \nIt should be noted that "
          "there are two new values in RequestedState that build on the "
          "statuses of EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then moving to an "
          "\"Enabled\" state. Reset indicates that the element is first "
          "\"Disabled\" and then \"Enabled\". The distinction between "
          "requesting \"Shut Down\" and \"Disabled\" should also be noted. "
          "Shut Down requests an orderly transition to the Disabled state, "
          "and might involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate disabling of the "
          "element, such that it will not execute or accept any commands or "
          "processing requests. \n\nThis property is set as the result of a "
          "method invocation (such as Start or StopService on CIM_Service), "
          "or can be overridden and defined as WRITEable in a subclass. The "
          "method approach is considered superior to a WRITEable property, "
          "because it allows an explicit invocation of the operation and the "
          "return of a result code. \n\nIf knowledge of the last "
          "RequestedState is not supported for the EnabledLogicalElement, the "
          "property shall be NULL or have the value 12 \"Not Applicable\"."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "..", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Deferred", "Quiesce",
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 RequestedState = 12;

        [Description (
          "Indicates the current health of the element. This attribute "
          "expresses the health of this element but not necessarily that of "
          "its subcomponents. The possible values are 0 to 30, where 5 means "
          "the element is entirely healthy and 30 means the element is "
          "completely non-functional. The following continuum is defined: "
          "\n\"Non-recoverable Error\" (30) - The element has completely "
          "failed, and recovery is not possible. All functionality provided "
          "by this element has been lost. \n\"Critical Failure\" (25) - The "
          "element is non-functional and recovery might not be possible. "
          "\n\"Major Failure\" (20) - The element is failing. It is possible "
          "that some or all of the functionality of this component is "
          "degraded or not working. \n\"Minor Failure\" (15) - All "
          "functionality is available but some might be degraded. "
          "\n\"Degraded/Warning\" (10) - The element is in working order and "
          "all functionality is provided. However, the element is not working "
          "to the best of its abilities. For example, the element might not "
          "be operating at optimal performance or it might be reporting "
          "recoverable errors. \n\"OK\" (5) - The element is fully functional "
          "and is operating within normal operational parameters and without "
          "error. \n\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \nDMTF has reserved the unused portion "
          "of the continuum for additional HealthStates in the future."),
        ValueMap { "0", "5", "10", "15", "20", "25", "30", "..",
          "32768..65535"},
        Values { "Unknown", "OK", "Degraded/Warning", "Minor failure",
          "Major failure", "Critical failure", "Non-recoverable error",
          "DMTF Reserved", "Vendor Specific"}]
    uint16 HealthState;

        [ArrayType ("Indexed"),
        Description (
          "Strings describing the various OperationalStatus array values. For "
          "example, if \"Stopping\" is the value assigned to "
          "OperationalStatus, then this property may contain an explanation "
          "as to why an object is being stopped. Note that entries in this "
          "array are correlated with those at the same array index in "
          "OperationalStatus."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"}]
    string StatusDescriptions[];

        [Description (
          "TransitioningToState indicates the target state to which the "
          "instance is transitioning. \nA value of 5 \"No Change\" shall "
          "indicate that no transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not support "
          "representing ongoing transitions. \nA value other than 5 or 12 "
          "shall identify the state to which the element is in the process of "
          "transitioning."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElement.RequestedState",
          "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", ".."},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Defer", "Quiesce", "Reboot",
          "Reset", "Not Applicable", "DMTF Reserved"}]
    uint16 TransitioningToState = 12;

        [ArrayType ("Indexed"),
        Description (
          "Enumeration indicating the purpose(s) to which the ComputerSystem "
          "is dedicated, if any, and what functionality is provided. For "
          "example, one could specify that the System is dedicated to "
          "\"Print\" (value=11) or acts as a \"Hub\" (value=8). \nAlso, one "
          "could indicate that this is a general purpose system by indicating "
          "\'Not Dedicated\' (value=0) but that it also hosts \'Print\' "
          "(value=11) or mobile phone \'Mobile User Device\' (value=17) "
          "services. \nA clarification is needed with respect to the value 17 "
          "(\"Mobile User Device\"). An example of a dedicated user device is "
          "a mobile phone or a barcode scanner in a store that communicates "
          "via radio frequency. These systems are quite limited in "
          "functionality and programmability, and are not considered "
          "\'general purpose\' computing platforms. Alternately, an example "
          "of a mobile system that is \'general purpose\' (i.e., is NOT "
          "dedicated) is a hand-held computer. Although limited in its "
          "programmability, new software can be downloaded and its "
          "functionality expanded by the user. \nA value of \"Management\" "
          "indicates this instance is dedicated to hosting system management "
          "software.\nA value of \"Management Controller\" indicates this "
          "instance represents specialized hardware dedicated to systems "
          "management (i.e., a Baseboard Management Controller (BMC) or "
          "service processor).\nThe management scope of a \"Management "
          "Controller\" is typically a single managed system in which it is "
          "contained.\nA value of \"Chassis Manager\" indicates this instance "
          "represents a system dedicated to management of a blade chassis and "
          "its contained devices. This value would be used to represent a "
          "Shelf Controller. A \"Chassis Manager\" is an aggregation point "
          "for management and may rely on subordinate management controllers "
          "for the management of constituent parts. A value of \"Host-based "
          "RAID Controller\" indicates this instance represents a RAID "
          "storage controller contained within a host computer. A value of "
          "\"Storage Device Enclosure\" indicates this instance represents an "
          "enclosure that contains storage devices. A \"Virtual Tape "
          "Library\" is the emulation of a tape library by a Virtual Library "
          "System. A \"Virtual Library System\" uses disk storage to emulate "
          "tape libraries.A \"FC Switch\" indicates this instance is "
          "dedicated to switching layer 2 fibre channel frames. An \"Ethernet "
          "Switch\" indicates this instance is dedicated to switching layer 2 "
          "ethernet frames.\n\"Server\" indicates that the system is an "
          "independent computer system whose primary purpose is to host "
          "services for other systems and devices to access; typically as in "
          "a stand-alone floor or rack-mounted system.\n\"Blade\" indicates "
          "this instance is a computer system that fits into another chassis "
          "and depends on it for services, such as power, cooling, etc."),
        MappingStrings { "MIB.IETF|MIB-II.sysServices",
          "FC-GS.INCITS-T11 | Platform | PlatformType"},
        ModelCorrespondence {
          "CIM_ComputerSystem.OtherDedicatedDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
          "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
          "31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
          "..", "32568..65535"},
        Values { "Not Dedicated", "Unknown", "Other", "Storage", "Router",
          "Switch", "Layer 3 Switch", "Central Office Switch", "Hub",
          "Access Server", "Firewall", "Print", "I/O", "Web Caching",
          "Management", "Block Server", "File Server",
          "Mobile User Device", "Repeater", "Bridge/Extender", "Gateway",
          "Storage Virtualizer", "Media Library", "ExtenderNode",
          "NAS Head", "Self-contained NAS", "UPS", "IP Phone",
          "Management Controller", "Chassis Manager",
          "Host-based RAID controller", "Storage Device Enclosure",
          "Desktop", "Laptop", "Virtual Tape Library",
          "Virtual Library System", "Network PC/Thin Client",
          "FC Switch", "Ethernet Switch", "Server", "Blade",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 Dedicated[];

        [Description (
          "CommunicationStatus indicates the ability of the instrumentation "
          "to communicate with the underlying ManagedElement. "
          "CommunicationStatus consists of one of the following values: "
          "Unknown, None, Communication OK, Lost Communication, or No "
          "Contact. \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"Not Available\" indicates "
          "that the implementation (provider) is capable of returning a value "
          "for this property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any quality of "
          "service. \n\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to establish "
          "communications with it. \n\"Lost Communication\" indicates that "
          "the Managed Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable."),
        ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Communication OK",
          "Lost Communication", "No Contact", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 CommunicationStatus;

        [Description (
          "A string that provides information on how the primary system owner "
          "can be reached (for example, phone number, e-mail address, and so "
          "on)."),
        MappingStrings { "MIF.DMTF|General Information|001.4"},
        MaxLen (256),
        Write (True)]
    string PrimaryOwnerContact;

        [Description (
          "DetailedStatus compliments PrimaryStatus with additional status "
          "detail. It consists of one of the following values: Not Available, "
          "No Additional Information, Stressed, Predictive Failure, Error, "
          "Non-Recoverable Error, SupportingEntityInError. Detailed status is "
          "used to expand upon the PrimaryStatus of the element. \nA Null "
          "return indicates the implementation (provider) does not implement "
          "this property. \n\"Not Available\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"No Additional Information\" indicates that the "
          "element is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are overload, "
          "overheated, and so on. \n\"Predictive Failure\" indicates that an "
          "element is functioning normally but a failure is predicted in the "
          "near future. \n\"Non-Recoverable Error \" indicates that this "
          "element is in an error condition that requires human intervention. "
          "\n\"Supporting Entity in Error\" indicates that this element might "
          "be \"OK\" but that another element, on which it is dependent, is "
          "in error. An example is a network service or endpoint that cannot "
          "function due to lower-layer networking problems."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.PrimaryStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.."},
        Values { "Not Available", "No Additional Information", "Stressed",
          "Predictive Failure", "Non-Recoverable Error",
          "Supporting Entity in Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 DetailedStatus;

        [ArrayType ("Indexed"),
        Description (
          "OtherIdentifyingInfo captures additional data, beyond System Name "
          "information, that could be used to identify a ComputerSystem. One "
          "example would be to hold the Fibre Channel World-Wide Name (WWN) "
          "of a node. Note that if only the Fibre Channel name is available "
          "and is unique (able to be used as the System key), then this "
          "property would be NULL and the WWN would become the System key, "
          "its data placed in the Name property."),
        MaxLen (256),
        ModelCorrespondence { "CIM_System.IdentifyingDescriptions"}]
    string OtherIdentifyingInfo[];

        [ArrayType ("Indexed"),
        Description (
          "An array of free-form strings providing explanations and details "
          "behind the entries in the OtherIdentifying Info array. Note, each "
          "entry of this array is related to the entry in "
          "OtherIdentifyingInfo that is located at the same index."),
        ModelCorrespondence { "CIM_System.OtherIdentifyingInfo"}]
    string IdentifyingDescriptions[];

        [ArrayType ("Indexed"),
        Description (
          "Indicates the current statuses of the element. Various operational "
          "statuses are defined. Many of the enumeration\'s values are "
          "self-explanatory. However, a few are not and are described here in "
          "more detail. \n\"Stressed\" indicates that the element is "
          "functioning, but needs attention. Examples of \"Stressed\" states "
          "are overload, overheated, and so on. \n\"Predictive Failure\" "
          "indicates that an element is functioning nominally but predicting "
          "a failure in the near future. \n\"In Service\" describes an "
          "element being configured, maintained, cleaned, or otherwise "
          "administered. \n\"No Contact\" indicates that the monitoring "
          "system has knowledge of this element, but has never been able to "
          "establish communications with it. \n\"Lost Communication\" "
          "indicates that the ManagedSystem Element is known to exist and has "
          "been contacted successfully in the past, but is currently "
          "unreachable. \n\"Stopped\" and \"Aborted\" are similar, although "
          "the former implies a clean and orderly stop, while the latter "
          "implies an abrupt stop where the state and configuration of the "
          "element might need to be updated. \n\"Dormant\" indicates that the "
          "element is inactive or quiesced. \n\"Supporting Entity in Error\" "
          "indicates that this element might be \"OK\" but that another "
          "element, on which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n\"Completed\" indicates that "
          "the element has completed its operation. This value should be "
          "combined with either OK, Error, or Degraded so that a client can "
          "tell if the complete operation Completed with OK (passed), "
          "Completed with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did not report "
          "an error). \n\"Power Mode\" indicates that the element has "
          "additional power model information contained in the Associated "
          "PowerManagementService association. \n\"Relocating\" indicates the "
          "element is being relocated.\nOperationalStatus replaces the Status "
          "property on ManagedSystemElement to provide a consistent approach "
          "to enumerations, to address implementation needs for an array "
          "property, and to provide a migration path from today\'s "
          "environment to the future. This change was not made earlier "
          "because it required the deprecated qualifier. Due to the "
          "widespread use of the existing Status property in management "
          "applications, it is strongly recommended that providers or "
          "instrumentation provide both the Status and OperationalStatus "
          "properties. Further, the first value of OperationalStatus should "
          "contain the primary status for the element. When instrumented, "
          "Status (because it is single-valued) should also provide the "
          "primary status of the element."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.StatusDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "..",
          "0x8000.."},
        Values { "Unknown", "Other", "OK", "Degraded", "Stressed",
          "Predictive Failure", "Error", "Non-Recoverable Error",
          "Starting", "Stopping", "Stopped", "In Service", "No Contact",
          "Lost Communication", "Aborted", "Dormant",
          "Supporting Entity in Error", "Completed", "Power Mode",
          "Relocating", "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperationalStatus[];

        [Description (
          "The name of the primary system owner. The system owner is the "
          "primary user of the system."),
        MappingStrings { "MIF.DMTF|General Information|001.3"},
        MaxLen (64),
        Write (True)]
    string PrimaryOwnerName;

        [ArrayType ("Indexed"),
        Description (
          "A string describing how or why the system is dedicated when the "
          "Dedicated array includes the value 2, \"Other\"."),
        ModelCorrespondence { "CIM_ComputerSystem.Dedicated"}]
    string OtherDedicatedDescriptions[];

        [Deprecated { "CIM_ManagedSystemElement.OperationalStatus"},
        Description (
          "A string indicating the current status of the object. Various "
          "operational and non-operational statuses are defined. This "
          "property is deprecated in lieu of OperationalStatus, which "
          "includes the same semantics in its enumeration. This change is "
          "made for 3 reasons: \n1) Status is more correctly defined as an "
          "array. This definition overcomes the limitation of describing "
          "status using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND Stopped. \n2) A "
          "MaxLen of 10 is too restrictive and leads to unclear enumerated "
          "values. \n3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 implementations used "
          "the string property and did not want to modify their code. "
          "Therefore, Status was grandfathered into the Schema. Use of the "
          "deprecated qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus."),
        MaxLen (10),
        ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail",
          "Starting", "Stopping", "Service", "Stressed", "NonRecover",
          "No Contact", "Lost Comm", "Stopped"}]
    string Status;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;

        [Description (
          "A datetime value that indicates when the object was installed. "
          "Lack of a value does not indicate that the object is not installed."),
        MappingStrings { "MIF.DMTF|ComponentID|001.5"}]
    datetime InstallDate;

        [Description (
          "An enumerated value indicating an administrator\'s default or "
          "startup configuration for the Enabled State of an element. By "
          "default, the element is \"Enabled\" (value=2)."),
        ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535"},
        Values { "Enabled", "Disabled", "Not Applicable",
          "Enabled but Offline", "No Default", "Quiesce",
          "DMTF Reserved", "Vendor Reserved"},
        Write (True)]
    uint16 EnabledDefault = 2;

        [Description (
          "EnabledState is an integer enumeration that indicates the enabled "
          "and disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down (value=4) and starting (value=10) are transient states "
          "between enabled and disabled. The following text briefly "
          "summarizes the various enabled and disabled states: \nEnabled (2) "
          "indicates that the element is or could be executing commands, will "
          "process any queued commands, and queues new requests. \nDisabled "
          "(3) indicates that the element will not execute commands and will "
          "drop any new requests. \nShutting Down (4) indicates that the "
          "element is in the process of going to a Disabled state. \nNot "
          "Applicable (5) indicates the element does not support being "
          "enabled or disabled. \nEnabled but Offline (6) indicates that the "
          "element might be completing commands, and will drop any new "
          "requests. \nTest (7) indicates that the element is in a test "
          "state. \nDeferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \nQuiesce "
          "(9) indicates that the element is enabled but in a restricted "
          "mode.\nStarting (10) indicates that the element is in the process "
          "of going to an Enabled state. New requests are queued."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.OtherEnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11..32767", "32768..65535"},
        Values { "Unknown", "Other", "Enabled", "Disabled",
          "Shutting Down", "Not Applicable", "Enabled but Offline",
          "In Test", "Deferred", "Quiesce", "Starting", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 EnabledState = 5;

        [Description (
          "The date or time when the EnabledState of the element last "
          "changed. If the state of the element has not changed and this "
          "property is populated, then it must be set to a 0 interval value. "
          "If a state change was requested, but rejected or not yet "
          "processed, the property must not be updated.")]
    datetime TimeOfLastStateChange;

        [Description (
          "CreationClassName indicates the name of the class or the subclass "
          "used in the creation of an instance. When used with the other key "
          "properties of this class, this property allows all instances of "
          "this class and its subclasses to be uniquely identified."),
        Key (True),
        MaxLen (256)]
    string CreationClassName;

        [Description (
          "PrimaryStatus provides a high level status value, intended to "
          "align with Red-Yellow-Green type representation of status. It "
          "should be used in conjunction with DetailedStatus to provide high "
          "level and detailed health status of the ManagedElement and its "
          "subcomponents. \nPrimaryStatus consists of one of the following "
          "values: Unknown, OK, Degraded or Error. \"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"OK\" indicates the "
          "ManagedElement is functioning normally. \n\"Degraded\" indicates "
          "the ManagedElement is functioning below normal. \n\"Error\" "
          "indicates the ManagedElement is in an Error condition."),
        ModelCorrespondence { "CIM_ManagedSystemElement.DetailedStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "..", "0x8000.."},
        Values { "Unknown", "OK", "Degraded", "Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 PrimaryStatus;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The inherited Name serves as the key of a System instance in an "
          "enterprise environment."),
        Key (True),
        MaxLen (256),
        Override ("Name")]
    string Name;

        [Description (
          "An array (bag) of strings that specifies the administrator "
          "-defined roles this System plays in the managed environment. "
          "Examples might be \'Building 8 print server\' or \'Boise user "
          "directories\'. A single system may perform multiple roles. \nNote "
          "that the instrumentation view of the \'roles\' of a System is "
          "defined by instantiating a specific subclass of System, or by "
          "properties in a subclass, or both. For example, the purpose of a "
          "ComputerSystem is defined using the Dedicated and "
          "OtherDedicatedDescription properties."),
        Write (True)]
    string Roles[];

        [Description (
          "A string that describes the enabled or disabled state of the "
          "element when the EnabledState property is set to 1 (\"Other\"). "
          "This property must be set to null when EnabledState is any value "
          "other than 1."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"}]
    string OtherEnabledState;

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "If enabled (value = 4), the ComputerSystem can be reset via "
          "hardware (e.g. the power and reset buttons). If disabled (value = "
          "3), hardware reset is not allowed. In addition to Enabled and "
          "Disabled, other Values for the property are also defined - \"Not "
          "Implemented\" (5), \"Other\" (1) and \"Unknown\" (2)."),
        MappingStrings { "MIF.DMTF|System Hardware Security|001.4"},
        ValueMap { "1", "2", "3", "4", "5"},
        Values { "Other", "Unknown", "Disabled", "Enabled",
          "Not Implemented"}]
    uint16 ResetCapability;

        [Description (
          "The ComputerSystem object and its derivatives are Top Level "
          "Objects of CIM. They provide the scope for numerous components. "
          "Having unique System keys is required. The NameFormat property "
          "identifies how the ComputerSystem Name is generated. The "
          "NameFormat ValueMap qualifier defines the various mechanisms for "
          "assigning the name. Note that another name can be assigned and "
          "used for the ComputerSystem that better suit a business, using the "
          "inherited ElementName property.\nIf the NameFormat is set to "
          "\"UUID\", then the Name property shall be a UUID in its canonical "
          "form consisting of 32 hexadecimal digits in 5 groups separated by "
          "hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 "
          "digits and 4 hyphens). For the first three fields, the most "
          "significant digit is on the left. The last two fields are treated "
          "as eight separate bytes, each having their most significant digit "
          "on the left, and they follow each other from left to right."),
        MaxLen (64),
        Override ("NameFormat"),
        ValueMap { "Other", "IP", "Dial", "HID", "NWA", "HWA", "X25",
          "ISDN", "IPX", "DCC", "ICD", "E.164", "SNA", "OID/OSI", "WWN",
          "NAA", "UUID"}]
    string NameFormat;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for providing "
          "more detail with respect to the value of EnabledState. It can also "
          "provide the transitional states when an element is transitioning "
          "from one state to another, such as when an element is "
          "transitioning between EnabledState and RequestedState, as well as "
          "other transitional conditions.\nOperatingStatus consists of one of "
          "the following values: Unknown, Not Available, In Service, "
          "Starting, Stopping, Stopped, Aborted, Dormant, Completed, "
          "Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"None\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n\"Starting\" "
          "describes an element being initialized. \n\"Stopping\" describes "
          "an element being brought to an orderly stop. \n\"Stopped\" and "
          "\"Aborted\" are similar, although the former implies a clean and "
          "orderly stop, while the latter implies an abrupt stop where the "
          "state and configuration of the element might need to be updated. "
          "\n\"Dormant\" indicates that the element is inactive or quiesced. "
          "\n\"Completed\" indicates that the element has completed its "
          "operation. This value should be combined with either OK, Error, or "
          "Degraded in the PrimaryStatus so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed with "
          "Error (failed), or Completed with Degraded (the operation "
          "finished, but it did not complete OK or did not report an error). "
          "\n\"Migrating\" element is being moved between host elements. "
          "\n\"Immigrating\" element is being moved to new host element. "
          "\n\"Emigrating\" element is being moved away from host element. "
          "\n\"Shutting Down\" describes an element being brought to an "
          "abrupt stop. \n\"In Test\" element is performing test functions. "
          "\n\"Transitioning\" describes an element that is between states, "
          "that is, it is not fully available in either its previous state or "
          "its next state. This value should be used if other values "
          "indicating a transition to a specific state are not "
          "applicable.\n\"In Service\" describes an element that is in "
          "service and operational."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Servicing", "Starting",
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed",
          "Migrating", "Emigrating", "Immigrating", "Snapshotting",
          "Shutting Down", "In Test", "Transitioning", "In Service",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperatingStatus;

        [Deprecated { "CIM_PowerManagementCapabilities.PowerCapabilities"},
        Description (
          "An enumerated array describing the power management capabilities "
          "of the ComputerSystem. The use of this property has been "
          "deprecated. Instead, the Power Capabilites property in an "
          "associated PowerManagement Capabilities class should be used."),
        MappingStrings { "MIF.DMTF|System Power Controls|001.2"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7"},
        Values { "Unknown", "Not Supported", "Disabled", "Enabled",
          "Power Saving Modes Entered Automatically",
          "Power State Settable", "Power Cycling Supported",
          "Timed Power On Supported"}]
    uint16 PowerManagementCapabilities[];

        [Description (
          "AvailableRequestedStates indicates the possible values for the "
          "RequestedState parameter of the method RequestStateChange, used to "
          "initiate a state change. The values listed shall be a subset of "
          "the values contained in the RequestedStatesSupported property of "
          "the associated instance of CIM_EnabledLogicalElementCapabilities "
          "where the values selected are a function of the current state of "
          "the CIM_EnabledLogicalElement. This property may be non-null if an "
          "implementation is able to advertise the set of possible values as "
          "a function of the current state. This property shall be null if an "
          "implementation is unable to determine the set of possible values "
          "as a function of the current state."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported"},
        ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".."},
        Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
          "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved"}]
    uint16 AvailableRequestedStates[];

        [Description (
          "Requests that the state of the element be changed to the value "
          "specified in the RequestedState parameter. When the requested "
          "state change takes place, the EnabledState and RequestedState of "
          "the element will be the same. Invoking the RequestStateChange "
          "method multiple times could result in earlier requests being "
          "overwritten or lost. \nA return code of 0 shall indicate the state "
          "change was successfully initiated. \nA return code of 3 shall "
          "indicate that the state transition cannot complete within the "
          "interval specified by the TimeoutPeriod parameter. \nA return code "
          "of 4096 (0x1000) shall indicate the state change was successfully "
          "initiated, a ConcreteJob has been created, and its reference "
          "returned in the output parameter Job. Any other return code "
          "indicates an error condition."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535"},
        Values { "Completed with No Error", "Not Supported",
          "Unknown or Unspecified Error",
          "Cannot complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Job Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific"}]
    uint32 RequestStateChange(
          [Description (
            "The state requested for the element. This information will be "
            "placed into the RequestedState property of the instance if the "
            "return code of the RequestStateChange method is 0 (\'Completed "
            "with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to "
            "the description of the EnabledState and RequestedState "
            "properties for the detailed explanations of the RequestedState "
            "values."),
          IN (True),
          ModelCorrespondence {
            "CIM_EnabledLogicalElement.RequestedState"},
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", "..",
            "32768..65535"},
          Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
            "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved",
            "Vendor Reserved"}]
        uint16 RequestedState,
          [Description (
            "May contain a reference to the ConcreteJob created to track the "
            "state transition initiated by the method invocation."),
          IN (False),
          OUT (True)]
        CIM_ConcreteJob REF Job,
          [Description (
            "A timeout period that specifies the maximum amount of time that "
            "the client expects the transition to the new state to take. The "
            "interval format must be used to specify the TimeoutPeriod. A "
            "value of 0 or a null parameter indicates that the client has no "
            "time requirements for the transition. \nIf this property does "
            "not contain 0 or null and the implementation does not support "
            "this parameter, a return code of \'Use Of Timeout Parameter Not "
            "Supported\' shall be returned."),
          IN (True)]
        datetime TimeoutPeriod);

        [Deprecated { "CIM_PowerManagementService.SetPowerState"},
        Description (
          "Sets the power state of the computer. The use of this method has "
          "been deprecated. Instead, use the SetPowerState method in the "
          "associated PowerManagementService class.")]
    uint32 SetPowerState(
          [Description ("The Desired state for the COmputerSystem."),
          ValueMap { "1", "2", "3", "4", "5", "6", "7", "8"},
          Values { "Full Power", "Power Save - Low Power Mode",
            "Power Save - Standby", "Power Save - Other", "Power Cycle",
            "Power Off", "Hibernate", "Soft Off"}]
        uint32 PowerState,
          [Description (
            "Time indicates when the power state should be set, either as a "
            "regular date-time value or as an interval value (where the "
            "interval begins when the method invocation is received.")]
        datetime Time);
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class enumerate CIM_System -d
===== Command Result
ERROR: pywbemcli -s http://localhost class enumerate CIM_System -d
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class enumerate CIM_System -l
===== Command Result
    [Description (
      "This is a special grouping of ManagedSystemElements. The grouping is "
      "viewed as a single entity, reflecting that all of its components are "
      "administered similarly, either by the same user, group of users, or "
      "policy. It serves as an aggregation point to associate one or more of "
      "the following elements: network devices, such as routers and switches, "
      "servers, and other resources that can be accessed by end systems. This "
      "grouping of devices plays an essential role in ensuring that the same "
      "administrative policy and actions are applied to all of the devices in "
      "the grouping. The specific behavior and/or semantics of the "
      "AdminDomain can be identified through its aggregated and associated "
      "entities."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.10.0")]
class CIM_AdminDomain : CIM_System {

        [Description (
          "The NameFormat property identifies how the Name of the AdminDomain "
          "is generated, using the heuristic specified in the CIM V2 System "
          "Model specification. The property assumes that to determine and "
          "assign a Name the documented rules are traversed in order. The "
          "NameFormat Values list defines the precedence order for assigning "
          "the Name of the AdminDomain. \n\n\"FC\" has been deprecated and "
          "replaced by \"WWN\" to be consistent with the other ValueMaps."),
        ModelCorrespondence { "CIM_AdminDomain.Name"},
        Override ("NameFormat"),
        ValueMap { "Other", "AS", "NAP", "NOC", "POP", "RNP", "IP", "IPX",
          "SNA", "Dial", "WAN", "LAN", "ISDN", "Frame Relay", "ATM",
          "E.164", "IB", "FC", "Policy Repository", "WWN"},
        Values { "Other", "Autonomous System", "Network Access Provider",
          "Network Operations Center", "Point of Presence",
          "Regional Network Provider", "IP", "IPX", "SNA", "Dial", "WAN",
          "LAN", "ISDN", "Frame Relay", "ATM", "E.164", "Infiniband",
          "Fibre Channel", "Policy Repository",
          "Fibre Channel Worldwide Name"}]
    string NameFormat;
};

    [Deprecated { "CIM_ComputerSystem", "CIM_StorageLibraryCapabilities"},
    Description (
      "A StorageLibrary is a collection of ManagedSystemElements that operate "
      "together to provide cartridge library capabilities. This object serves "
      "as an aggregation point to group the following elements: "
      "MediaTransferDevices, a Label Reader, a library Door, "
      "MediaAccessDevices, and other Library components. \nThe use of this "
      "class is deprecated in favor of CIM_ComputerSystem. Originally it was "
      "felt that a media library could be purely mechanical and thus not a "
      "ComputerSystem. However all manageable libraries are ComputerSystems. "
      "This change simplifies the use of the model by client software."),
    UMLPackagePath ("CIM::Device::StorageLib"),
    Version ("2.9.0")]
class CIM_StorageLibrary : CIM_System {

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 4 (\'stressed\').\nBoolean set to TRUE if there are more "
          "PhysicalMedia in a Library than there are StorageMediaLocations to "
          "contain them. For instance, if all MediaAccessDevices have a Media "
          "loaded in them, and all StorageMediaLocations are loaded by an "
          "operator, then an Overfilled condition exists.")]
    boolean Overfilled;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 10 (\'Stopped\').\nBoolean indicating whether the "
          "Library\'s robotics are currently active/enabled. If TRUE, then "
          "the Library may not be safe for a human to enter.")]
    boolean RoboticsEnabled;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 11 (\'In Service\').\nBoolean set to TRUE if an audit of "
          "the location of some or all of the Library\'s PhysicalMedia is "
          "currently being performed. That an individual Changer is currently "
          "doing an audit is indicated by a similar AuditInProgress boolean "
          "property on the Changer object.")]
    boolean AuditInProgress;

        [Description (
          "Maximum time in seconds that it takes for the Storage Library to "
          "perform a complete audit of each StorageMedia Location, to "
          "determine the absence or presence of a Physical Media. If "
          "automated support is not provided, then this property\'s value is "
          "undefined."),
        PUnit ("second"),
        Units ("Seconds")]
    uint64 MaxAuditTime;

        [Description (
          "Capabilities of the StorageLibrary. For example, it can be "
          "indicated that the Library can perform automatic cleaning of the "
          "MediaAccessDevices contained in it (value=1) or that the Library "
          "provides physical door access for an operator (value=2)."),
        ValueMap { "0", "2", "3", "4"},
        Values { "Unknown", "Automatic Cleaning", "Manual Operation",
          "Front Panel Lockable"}]
    uint16 Capabilities[];

        [Deprecated { "No value"},
        Description (
          "This property is deprecated since all managed libraries willbe "
          "automated.\nBoolean set to TRUE if the Library includes a robotics "
          "mechanism that can be controlled by a ComputerSystem, to "
          "automatically load and unload PhysicalMedia to/from "
          "MediaAccessDevices and StorageMediaLocations. The property is set "
          "to FALSE if the Library represents a repository of Media that are "
          "inaccessible to a MediaAccess Device without human intervention. "
          "An example of a non- automated Library is a \'shelf\' or \'vault\' "
          "where Physical Media are kept for extended periods of time.")]
    boolean Automated;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 0 (\'Unknown\').\nBoolean set to TRUE if the Library can "
          "not currently report the correct state of each PhysicalMedia "
          "within its proper StorageMediaLocation.")]
    boolean AuditNeeded;

        [Deprecated { "CIM_ComputerSystem.RequestStateChange"},
        Description (
          "Requests that the Library robotics be enabled for automated "
          "operation (input parameter, Enabled, set to TRUE), or disabled for "
          "manual operation (input parameter set to FALSE). The return value "
          "should be 0 if the request was successfully executed, 1 if the "
          "request is not supported and some other value if an error "
          "occurred. In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The strings "
          "to which the ValueMap contents are \'translated\' may also be "
          "specified in the subclass as a Values array qualifier.")]
    uint32 EnableRobotics(
          [Description ("Set TRUE to enable."),
          IN (True)]
        boolean Enable);
};

    [Description (
      "The ApplicationSystem class represents an application or a software "
      "system that supports a particular business function and that can be "
      "managed as an independent unit. Such a system can be decomposed into "
      "its functional components using the CIM_SoftwareFeature class. The "
      "Features for a particular application or software system are located "
      "using the CIM_ApplicationSystemSoftwareFeature association. The "
      "features are part of the deployment-oriented aspects of the "
      "application system. \nWith regard to the application runtime aspects, "
      "the ApplicationSystem class also represents the core class of the "
      "Application Systems\' sub-model which of the application runtime "
      "model. Its role in the systems sub-model is a) the root node of the "
      "containment hierarchy of the application elements (at runtime) as "
      "services, components, sub-systems, etc., b) the place for runtime "
      "overview information such as response time or system status, c) "
      "runtime control of the entire application (e.g., start/stop), and d) "
      "the main entry point to the navigation through and drill-down into the "
      "runtime model. \nThe lifetime of an instance of this class is not "
      "limited to the application instance it represents. Even if the "
      "application is not running, the ApplicationSystem object can report "
      "properties that have values (e.g., the name of the application or the "
      "current status). Note that it is also possible to define the lifetime "
      "of the objects through the lifetime of the application instances. "
      "\nThrough ApplicationSystemDependency, non-containment relationships "
      "can be expressed."),
    UMLPackagePath ("CIM::Application::DeploymentModel"),
    Version ("2.8.0")]
class CIM_ApplicationSystem : CIM_System {

        [Description (
          "The point in time at which the ServingStatus property was last "
          "updated."),
        ModelCorrespondence { "CIM_ApplicationSystem.ServingStatus"}]
    datetime LastServingStatusUpdate;

        [Description (
          "Distribution describes how the application system is distributed "
          "with respect to its underlying servers. In general, the "
          "application system is distributed or local. This property "
          "indicates whether the application system is running on one or "
          "multiple servers. This can be determined without having to query "
          "for associated servers represented by ComputerSystems. Distributed "
          "systems also introduce a virtual notion to themselves. Note that a "
          "distributed application system is not tangible but virtual. Only "
          "its contained local systems can be found as processes or threads, "
          "and can therefore be regarded as tangible. The distributed system "
          "remains a named, virtual entity, that scopes strongly bound "
          "constituents and allows the application to be managed in its "
          "entirety. \nThe property is needed to help root cause analysis and "
          "operations, especially when these are automated, in order to "
          "clearly know that more than one executed application - most likely "
          "the local application systems - is affected by the management "
          "task. This is particularly true if the contained application "
          "systems provide uniform functionality like webserver or "
          "application server farms. \nTo express constraints between "
          "distributed and local system, this class must be derived and "
          "appropriate associations must be defined. \nThis property should "
          "not be confused with the Roles[] property defined in System. The "
          "latter is reserved for administrator assigned roles."),
        ValueMap { "0", "1", "2", "3..32767", "32768..65535"},
        Values { "Unknown", "Distributed", "Local", "DMTF Reserved",
          "Vendor Specific"}]
    uint16 Distribution;

        [Description (
          "The point in time (date and time) when the application system was "
          "last started. If the application system is in a state other the "
          "state Enabled (i.e., started and running) this value is not "
          "meaningful and the property value MUST be set to all zeros. "
          "\nStartupTime is preferably the point in time when the application "
          "is available to the user. Instead, if the provider and/or the "
          "instrumentation cannot determine the point in time the application "
          "becomes available, the point in time can be used at which the "
          "underlying operating system reports successful launch of the "
          "application. If no value can be provided the property value MUST "
          "be set to all zeros.")]
    datetime StartupTime;

        [Description (
          "EnabledState is an integer enumeration that indicates the "
          "enabled/disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down and starting are transient states between enabled and "
          "disabled. \nIn contrast to the original version defined higher in "
          "the inheritance hierarchy (EnabledLogicalElement), EnabledState is "
          "simplified. It reflects the notion of an execution status tailored "
          "to applications and represents a summary of the original property. "
          "It allows simplified and efficient determination of whether the "
          "application is started, stopped or in transition between either of "
          "these states. The property does not show any errors. Errors MUST "
          "be described in MSE.OperationalStatus, and MAY also be described "
          "in logs or other data sources. \nThe mapping to "
          "MSE.OperationalStatus is as follows: \nExecutionStatus <- "
          "MSE.OperationalStatus \nUnknown <- Unknown, No Contact, Lost "
          "Communication, \nEither of the values <- Other \nEnabled (started) "
          "<- OK, Degraded, Stressed, Predictive Failure, In Service, "
          "Dormant, Supporting Entity in Error, Completed \nEnabled or "
          "Disabled (Started or Stopped) <- Error, Non-Recoverable Error "
          "\nStarting <- Starting \nShutting Down (Stopping) <- Stopping "
          "\nDisabled (Stopped) <- Stopped, Aborted. \nThe mapping to the "
          "original EnabledState property is as follows: \nUnknown <- "
          "Unknown, Not Applicable \nEither of the values <-Other \nEnabled "
          "<- Enabled, Enabled but Offline, In Test, Deferred, Quiesce "
          "\nDisabled <- Disabled \nShuttingDown <- ShuttingDown \nStarting "
          "<- Starting."),
        Override ("EnabledState"),
        ValueMap { "0", "2", "3", "4", "10", "11..32767", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shutting Down",
          "Starting", "DMTF Reserved", "Vendor Reserved"}]
    uint16 EnabledState = 0;

        [Description (
          "ServingStatus is a summary of MSE.OperationalStatus. It allows "
          "simplified and efficient determination of whether the application "
          "is providing service or has stopped doing so for various reasons "
          "like errors, shutdown, abort, etc. Therefore, no transitional "
          "values are provided. The property does not show any errors. Errors "
          "MUST be described in MSE.OperationalStatus, and MAY also be "
          "described in logs or other data sources. Therefore, ServingStatus "
          "is suited to provide summary information for monitoring purposes "
          "and service level management. \nThe mapping to "
          "MSE.OperationalStatus is as follows: \nServingStatus <- "
          "MSE.OperationalStatus \nUnknown <- Unknown, No Contact, Lost "
          "Communication \nEither of the values <- Other \nServing <- OK, "
          "Degraded, Stressed, Predictive Failure, Completed \nNot Serving <- "
          "Error, Non-Recoverable Error, Starting, Stopping, Stopped, In "
          "Service, Aborted, Dormant, Supporting Entity in Error."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"},
        ValueMap { "0", "1", "2", "5..4096", "4097..65535"},
        Values { "Unknown", "Serving", "Not Serving", "DMTF Reserved",
          "Vendor Specific"}]
    uint16 ServingStatus;

        [Description (
          "StopApplication() allows for stopping/shutting down an application "
          "system. It is up to the implementation of the method to define "
          "which of the contained or dependent sub-elements are to be stopped "
          "and in which order their stop has to occur. \nSince a system "
          "shutdown can last considerable time (several minutes is not "
          "necessarily unusual for complex distributed applications), the "
          "method can be implemented synchronously or asynchronously. In both "
          "cases EnabledState and RequestedState reflect the current state of "
          "the application and the desired state (Disabled) respectively. The "
          "exact nature of the errors during the stop cannot be determined in "
          "the asynchronous case. The method must return one of the "
          "following: \nUnspecified Error: If no return code can be "
          "identified \nCompleted with No Error: successful invocation \nStop "
          "Already in Process: application is shutting down \nFailed: "
          "Indicates errors upon execution."),
        ModelCorrespondence { "CIM_ApplicationSystem.EnabledState",
          "CIM_ApplicationSystem.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4..4096", "4097..32767",
          "32768..65535"},
        Values { "Unspecified Error", "Completed with No Error",
          "Stop Already in Process", "Failed", "DMTF Reserved",
          "Method Reserved", "Vendor Specific"}]
    uint16 StopApplication();

        [Description (
          "StartApplication() starts an application system. The "
          "ApplicationSystem object must have been created prior to the "
          "invocation of this method. It is up to the implementation of the "
          "method to define which of the contained or dependent sub-elements "
          "are to be started and in which order their startup may occur. "
          "\nSince a system startup can extend over long periods of time "
          "(several minutes is not unusual for complex distributed "
          "applications), the method can be implemented synchronously or "
          "asynchronously. In both cases EnabledState and RequestedState "
          "reflect the current state of the application and the desired state "
          "(Enabled) respectively. The exact nature of the errors during the "
          "startup cannot be determined in the asynchronous case. The method "
          "must return one of the following values: \nUnspecified Error: If "
          "no return code can be identified \nCompleted with No Error: "
          "successful invocation \nStart Already in Progress: application "
          "still being started \nFailed:Indicates errors upon execution."),
        ModelCorrespondence { "CIM_ApplicationSystem.EnabledState",
          "CIM_ApplicationSystem.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4..4096", "4097..32767",
          "32768..65535"},
        Values { "Unspecified Error", "Completed with No Error",
          "Start Already in Progress", "Failed", "DMTF Reserved",
          "Method Reserved", "Vendor Specific"}]
    uint16 StartApplication();
};

    [Description (
      "A class derived from System that is a special collection of "
      "ManagedSystemElements. This collection is related to the providing of "
      "compute capabilities and MAY serve as an aggregation point to "
      "associate one or more of the following elements: FileSystem, "
      "OperatingSystem, Processor and Memory (Volatile and/or NonVolatile "
      "Storage)."),
    UMLPackagePath ("CIM::System::SystemElements"),
    Version ("2.36.0")]
class CIM_ComputerSystem : CIM_System {

        [ArrayType ("Indexed"),
        Description (
          "Enumeration indicating the purpose(s) to which the ComputerSystem "
          "is dedicated, if any, and what functionality is provided. For "
          "example, one could specify that the System is dedicated to "
          "\"Print\" (value=11) or acts as a \"Hub\" (value=8). \nAlso, one "
          "could indicate that this is a general purpose system by indicating "
          "\'Not Dedicated\' (value=0) but that it also hosts \'Print\' "
          "(value=11) or mobile phone \'Mobile User Device\' (value=17) "
          "services. \nA clarification is needed with respect to the value 17 "
          "(\"Mobile User Device\"). An example of a dedicated user device is "
          "a mobile phone or a barcode scanner in a store that communicates "
          "via radio frequency. These systems are quite limited in "
          "functionality and programmability, and are not considered "
          "\'general purpose\' computing platforms. Alternately, an example "
          "of a mobile system that is \'general purpose\' (i.e., is NOT "
          "dedicated) is a hand-held computer. Although limited in its "
          "programmability, new software can be downloaded and its "
          "functionality expanded by the user. \nA value of \"Management\" "
          "indicates this instance is dedicated to hosting system management "
          "software.\nA value of \"Management Controller\" indicates this "
          "instance represents specialized hardware dedicated to systems "
          "management (i.e., a Baseboard Management Controller (BMC) or "
          "service processor).\nThe management scope of a \"Management "
          "Controller\" is typically a single managed system in which it is "
          "contained.\nA value of \"Chassis Manager\" indicates this instance "
          "represents a system dedicated to management of a blade chassis and "
          "its contained devices. This value would be used to represent a "
          "Shelf Controller. A \"Chassis Manager\" is an aggregation point "
          "for management and may rely on subordinate management controllers "
          "for the management of constituent parts. A value of \"Host-based "
          "RAID Controller\" indicates this instance represents a RAID "
          "storage controller contained within a host computer. A value of "
          "\"Storage Device Enclosure\" indicates this instance represents an "
          "enclosure that contains storage devices. A \"Virtual Tape "
          "Library\" is the emulation of a tape library by a Virtual Library "
          "System. A \"Virtual Library System\" uses disk storage to emulate "
          "tape libraries.A \"FC Switch\" indicates this instance is "
          "dedicated to switching layer 2 fibre channel frames. An \"Ethernet "
          "Switch\" indicates this instance is dedicated to switching layer 2 "
          "ethernet frames.\n\"Server\" indicates that the system is an "
          "independent computer system whose primary purpose is to host "
          "services for other systems and devices to access; typically as in "
          "a stand-alone floor or rack-mounted system.\n\"Blade\" indicates "
          "this instance is a computer system that fits into another chassis "
          "and depends on it for services, such as power, cooling, etc."),
        MappingStrings { "MIB.IETF|MIB-II.sysServices",
          "FC-GS.INCITS-T11 | Platform | PlatformType"},
        ModelCorrespondence {
          "CIM_ComputerSystem.OtherDedicatedDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
          "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
          "31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
          "..", "32568..65535"},
        Values { "Not Dedicated", "Unknown", "Other", "Storage", "Router",
          "Switch", "Layer 3 Switch", "Central Office Switch", "Hub",
          "Access Server", "Firewall", "Print", "I/O", "Web Caching",
          "Management", "Block Server", "File Server",
          "Mobile User Device", "Repeater", "Bridge/Extender", "Gateway",
          "Storage Virtualizer", "Media Library", "ExtenderNode",
          "NAS Head", "Self-contained NAS", "UPS", "IP Phone",
          "Management Controller", "Chassis Manager",
          "Host-based RAID controller", "Storage Device Enclosure",
          "Desktop", "Laptop", "Virtual Tape Library",
          "Virtual Library System", "Network PC/Thin Client",
          "FC Switch", "Ethernet Switch", "Server", "Blade",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 Dedicated[];

        [Description (
          "If enabled (value = 4), the ComputerSystem can be reset via "
          "hardware (e.g. the power and reset buttons). If disabled (value = "
          "3), hardware reset is not allowed. In addition to Enabled and "
          "Disabled, other Values for the property are also defined - \"Not "
          "Implemented\" (5), \"Other\" (1) and \"Unknown\" (2)."),
        MappingStrings { "MIF.DMTF|System Hardware Security|001.4"},
        ValueMap { "1", "2", "3", "4", "5"},
        Values { "Other", "Unknown", "Disabled", "Enabled",
          "Not Implemented"}]
    uint16 ResetCapability;

        [Description (
          "The ComputerSystem object and its derivatives are Top Level "
          "Objects of CIM. They provide the scope for numerous components. "
          "Having unique System keys is required. The NameFormat property "
          "identifies how the ComputerSystem Name is generated. The "
          "NameFormat ValueMap qualifier defines the various mechanisms for "
          "assigning the name. Note that another name can be assigned and "
          "used for the ComputerSystem that better suit a business, using the "
          "inherited ElementName property.\nIf the NameFormat is set to "
          "\"UUID\", then the Name property shall be a UUID in its canonical "
          "form consisting of 32 hexadecimal digits in 5 groups separated by "
          "hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 "
          "digits and 4 hyphens). For the first three fields, the most "
          "significant digit is on the left. The last two fields are treated "
          "as eight separate bytes, each having their most significant digit "
          "on the left, and they follow each other from left to right."),
        Override ("NameFormat"),
        ValueMap { "Other", "IP", "Dial", "HID", "NWA", "HWA", "X25",
          "ISDN", "IPX", "DCC", "ICD", "E.164", "SNA", "OID/OSI", "WWN",
          "NAA", "UUID"}]
    string NameFormat;

        [ArrayType ("Indexed"),
        Description (
          "A string describing how or why the system is dedicated when the "
          "Dedicated array includes the value 2, \"Other\"."),
        ModelCorrespondence { "CIM_ComputerSystem.Dedicated"}]
    string OtherDedicatedDescriptions[];

        [Deprecated { "CIM_PowerManagementCapabilities.PowerCapabilities"},
        Description (
          "An enumerated array describing the power management capabilities "
          "of the ComputerSystem. The use of this property has been "
          "deprecated. Instead, the Power Capabilites property in an "
          "associated PowerManagement Capabilities class should be used."),
        MappingStrings { "MIF.DMTF|System Power Controls|001.2"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7"},
        Values { "Unknown", "Not Supported", "Disabled", "Enabled",
          "Power Saving Modes Entered Automatically",
          "Power State Settable", "Power Cycling Supported",
          "Timed Power On Supported"}]
    uint16 PowerManagementCapabilities[];

        [Deprecated { "CIM_PowerManagementService.SetPowerState"},
        Description (
          "Sets the power state of the computer. The use of this method has "
          "been deprecated. Instead, use the SetPowerState method in the "
          "associated PowerManagementService class.")]
    uint32 SetPowerState(
          [Description ("The Desired state for the COmputerSystem."),
          ValueMap { "1", "2", "3", "4", "5", "6", "7", "8"},
          Values { "Full Power", "Power Save - Low Power Mode",
            "Power Save - Standby", "Power Save - Other", "Power Cycle",
            "Power Off", "Hibernate", "Soft Off"}]
        uint32 PowerState,
          [Description (
            "Time indicates when the power state should be set, either as a "
            "regular date-time value or as an interval value (where the "
            "interval begins when the method invocation is received.")]
        datetime Time);
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class enumerate CIM_System -s
===== Command Result
    [Description (
      "This is a special grouping of ManagedSystemElements. The grouping is "
      "viewed as a single entity, reflecting that all of its components are "
      "administered similarly, either by the same user, group of users, or "
      "policy. It serves as an aggregation point to associate one or more of "
      "the following elements: network devices, such as routers and switches, "
      "servers, and other resources that can be accessed by end systems. This "
      "grouping of devices plays an essential role in ensuring that the same "
      "administrative policy and actions are applied to all of the devices in "
      "the grouping. The specific behavior and/or semantics of the "
      "AdminDomain can be identified through its aggregated and associated "
      "entities."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.10.0")]
class CIM_AdminDomain : CIM_System {

        [Description (
          "RequestedState is an integer enumeration that indicates the last "
          "requested or desired state for the element, irrespective of the "
          "mechanism through which it was requested. The actual state of the "
          "element is represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or disabled "
          "states. Note that when EnabledState is set to 5 (\"Not "
          "Applicable\"), then this property has no meaning. Refer to the "
          "EnabledState property description for explanations of the values "
          "in the RequestedState enumeration. \n\"Unknown\" (0) indicates the "
          "last requested state for the element is unknown.\nNote that the "
          "value \"No Change\" (5) has been deprecated in lieu of indicating "
          "the last requested state is \"Unknown\" (0). If the last requested "
          "or desired state is unknown, RequestedState should have the value "
          "\"Unknown\" (0), but may have the value \"No Change\" (5).Offline "
          "(6) indicates that the element has been requested to transition to "
          "the Enabled but Offline EnabledState. \nIt should be noted that "
          "there are two new values in RequestedState that build on the "
          "statuses of EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then moving to an "
          "\"Enabled\" state. Reset indicates that the element is first "
          "\"Disabled\" and then \"Enabled\". The distinction between "
          "requesting \"Shut Down\" and \"Disabled\" should also be noted. "
          "Shut Down requests an orderly transition to the Disabled state, "
          "and might involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate disabling of the "
          "element, such that it will not execute or accept any commands or "
          "processing requests. \n\nThis property is set as the result of a "
          "method invocation (such as Start or StopService on CIM_Service), "
          "or can be overridden and defined as WRITEable in a subclass. The "
          "method approach is considered superior to a WRITEable property, "
          "because it allows an explicit invocation of the operation and the "
          "return of a result code. \n\nIf knowledge of the last "
          "RequestedState is not supported for the EnabledLogicalElement, the "
          "property shall be NULL or have the value 12 \"Not Applicable\"."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "..", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Deferred", "Quiesce",
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 RequestedState = 12;

        [Description (
          "Indicates the current health of the element. This attribute "
          "expresses the health of this element but not necessarily that of "
          "its subcomponents. The possible values are 0 to 30, where 5 means "
          "the element is entirely healthy and 30 means the element is "
          "completely non-functional. The following continuum is defined: "
          "\n\"Non-recoverable Error\" (30) - The element has completely "
          "failed, and recovery is not possible. All functionality provided "
          "by this element has been lost. \n\"Critical Failure\" (25) - The "
          "element is non-functional and recovery might not be possible. "
          "\n\"Major Failure\" (20) - The element is failing. It is possible "
          "that some or all of the functionality of this component is "
          "degraded or not working. \n\"Minor Failure\" (15) - All "
          "functionality is available but some might be degraded. "
          "\n\"Degraded/Warning\" (10) - The element is in working order and "
          "all functionality is provided. However, the element is not working "
          "to the best of its abilities. For example, the element might not "
          "be operating at optimal performance or it might be reporting "
          "recoverable errors. \n\"OK\" (5) - The element is fully functional "
          "and is operating within normal operational parameters and without "
          "error. \n\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \nDMTF has reserved the unused portion "
          "of the continuum for additional HealthStates in the future."),
        ValueMap { "0", "5", "10", "15", "20", "25", "30", "..",
          "32768..65535"},
        Values { "Unknown", "OK", "Degraded/Warning", "Minor failure",
          "Major failure", "Critical failure", "Non-recoverable error",
          "DMTF Reserved", "Vendor Specific"}]
    uint16 HealthState;

        [ArrayType ("Indexed"),
        Description (
          "Strings describing the various OperationalStatus array values. For "
          "example, if \"Stopping\" is the value assigned to "
          "OperationalStatus, then this property may contain an explanation "
          "as to why an object is being stopped. Note that entries in this "
          "array are correlated with those at the same array index in "
          "OperationalStatus."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"}]
    string StatusDescriptions[];

        [Description (
          "TransitioningToState indicates the target state to which the "
          "instance is transitioning. \nA value of 5 \"No Change\" shall "
          "indicate that no transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not support "
          "representing ongoing transitions. \nA value other than 5 or 12 "
          "shall identify the state to which the element is in the process of "
          "transitioning."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElement.RequestedState",
          "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", ".."},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Defer", "Quiesce", "Reboot",
          "Reset", "Not Applicable", "DMTF Reserved"}]
    uint16 TransitioningToState = 12;

        [Description (
          "A string that describes the enabled or disabled state of the "
          "element when the EnabledState property is set to 1 (\"Other\"). "
          "This property must be set to null when EnabledState is any value "
          "other than 1."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"}]
    string OtherEnabledState;

        [Description (
          "A string that provides information on how the primary system owner "
          "can be reached (for example, phone number, e-mail address, and so "
          "on)."),
        MappingStrings { "MIF.DMTF|General Information|001.4"},
        MaxLen (256),
        Write (True)]
    string PrimaryOwnerContact;

        [Description (
          "DetailedStatus compliments PrimaryStatus with additional status "
          "detail. It consists of one of the following values: Not Available, "
          "No Additional Information, Stressed, Predictive Failure, Error, "
          "Non-Recoverable Error, SupportingEntityInError. Detailed status is "
          "used to expand upon the PrimaryStatus of the element. \nA Null "
          "return indicates the implementation (provider) does not implement "
          "this property. \n\"Not Available\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"No Additional Information\" indicates that the "
          "element is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are overload, "
          "overheated, and so on. \n\"Predictive Failure\" indicates that an "
          "element is functioning normally but a failure is predicted in the "
          "near future. \n\"Non-Recoverable Error \" indicates that this "
          "element is in an error condition that requires human intervention. "
          "\n\"Supporting Entity in Error\" indicates that this element might "
          "be \"OK\" but that another element, on which it is dependent, is "
          "in error. An example is a network service or endpoint that cannot "
          "function due to lower-layer networking problems."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.PrimaryStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.."},
        Values { "Not Available", "No Additional Information", "Stressed",
          "Predictive Failure", "Non-Recoverable Error",
          "Supporting Entity in Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 DetailedStatus;

        [ArrayType ("Indexed"),
        Description (
          "OtherIdentifyingInfo captures additional data, beyond System Name "
          "information, that could be used to identify a ComputerSystem. One "
          "example would be to hold the Fibre Channel World-Wide Name (WWN) "
          "of a node. Note that if only the Fibre Channel name is available "
          "and is unique (able to be used as the System key), then this "
          "property would be NULL and the WWN would become the System key, "
          "its data placed in the Name property."),
        MaxLen (256),
        ModelCorrespondence { "CIM_System.IdentifyingDescriptions"}]
    string OtherIdentifyingInfo[];

        [ArrayType ("Indexed"),
        Description (
          "An array of free-form strings providing explanations and details "
          "behind the entries in the OtherIdentifying Info array. Note, each "
          "entry of this array is related to the entry in "
          "OtherIdentifyingInfo that is located at the same index."),
        ModelCorrespondence { "CIM_System.OtherIdentifyingInfo"}]
    string IdentifyingDescriptions[];

        [ArrayType ("Indexed"),
        Description (
          "Indicates the current statuses of the element. Various operational "
          "statuses are defined. Many of the enumeration\'s values are "
          "self-explanatory. However, a few are not and are described here in "
          "more detail. \n\"Stressed\" indicates that the element is "
          "functioning, but needs attention. Examples of \"Stressed\" states "
          "are overload, overheated, and so on. \n\"Predictive Failure\" "
          "indicates that an element is functioning nominally but predicting "
          "a failure in the near future. \n\"In Service\" describes an "
          "element being configured, maintained, cleaned, or otherwise "
          "administered. \n\"No Contact\" indicates that the monitoring "
          "system has knowledge of this element, but has never been able to "
          "establish communications with it. \n\"Lost Communication\" "
          "indicates that the ManagedSystem Element is known to exist and has "
          "been contacted successfully in the past, but is currently "
          "unreachable. \n\"Stopped\" and \"Aborted\" are similar, although "
          "the former implies a clean and orderly stop, while the latter "
          "implies an abrupt stop where the state and configuration of the "
          "element might need to be updated. \n\"Dormant\" indicates that the "
          "element is inactive or quiesced. \n\"Supporting Entity in Error\" "
          "indicates that this element might be \"OK\" but that another "
          "element, on which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n\"Completed\" indicates that "
          "the element has completed its operation. This value should be "
          "combined with either OK, Error, or Degraded so that a client can "
          "tell if the complete operation Completed with OK (passed), "
          "Completed with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did not report "
          "an error). \n\"Power Mode\" indicates that the element has "
          "additional power model information contained in the Associated "
          "PowerManagementService association. \n\"Relocating\" indicates the "
          "element is being relocated.\nOperationalStatus replaces the Status "
          "property on ManagedSystemElement to provide a consistent approach "
          "to enumerations, to address implementation needs for an array "
          "property, and to provide a migration path from today\'s "
          "environment to the future. This change was not made earlier "
          "because it required the deprecated qualifier. Due to the "
          "widespread use of the existing Status property in management "
          "applications, it is strongly recommended that providers or "
          "instrumentation provide both the Status and OperationalStatus "
          "properties. Further, the first value of OperationalStatus should "
          "contain the primary status for the element. When instrumented, "
          "Status (because it is single-valued) should also provide the "
          "primary status of the element."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.StatusDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "..",
          "0x8000.."},
        Values { "Unknown", "Other", "OK", "Degraded", "Stressed",
          "Predictive Failure", "Error", "Non-Recoverable Error",
          "Starting", "Stopping", "Stopped", "In Service", "No Contact",
          "Lost Communication", "Aborted", "Dormant",
          "Supporting Entity in Error", "Completed", "Power Mode",
          "Relocating", "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperationalStatus[];

        [Description (
          "The name of the primary system owner. The system owner is the "
          "primary user of the system."),
        MappingStrings { "MIF.DMTF|General Information|001.3"},
        MaxLen (64),
        Write (True)]
    string PrimaryOwnerName;

        [Deprecated { "CIM_ManagedSystemElement.OperationalStatus"},
        Description (
          "A string indicating the current status of the object. Various "
          "operational and non-operational statuses are defined. This "
          "property is deprecated in lieu of OperationalStatus, which "
          "includes the same semantics in its enumeration. This change is "
          "made for 3 reasons: \n1) Status is more correctly defined as an "
          "array. This definition overcomes the limitation of describing "
          "status using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND Stopped. \n2) A "
          "MaxLen of 10 is too restrictive and leads to unclear enumerated "
          "values. \n3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 implementations used "
          "the string property and did not want to modify their code. "
          "Therefore, Status was grandfathered into the Schema. Use of the "
          "deprecated qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus."),
        MaxLen (10),
        ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail",
          "Starting", "Stopping", "Service", "Stressed", "NonRecover",
          "No Contact", "Lost Comm", "Stopped"}]
    string Status;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;

        [Description (
          "A datetime value that indicates when the object was installed. "
          "Lack of a value does not indicate that the object is not installed."),
        MappingStrings { "MIF.DMTF|ComponentID|001.5"}]
    datetime InstallDate;

        [Description (
          "An enumerated value indicating an administrator\'s default or "
          "startup configuration for the Enabled State of an element. By "
          "default, the element is \"Enabled\" (value=2)."),
        ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535"},
        Values { "Enabled", "Disabled", "Not Applicable",
          "Enabled but Offline", "No Default", "Quiesce",
          "DMTF Reserved", "Vendor Reserved"},
        Write (True)]
    uint16 EnabledDefault = 2;

        [Description (
          "EnabledState is an integer enumeration that indicates the enabled "
          "and disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down (value=4) and starting (value=10) are transient states "
          "between enabled and disabled. The following text briefly "
          "summarizes the various enabled and disabled states: \nEnabled (2) "
          "indicates that the element is or could be executing commands, will "
          "process any queued commands, and queues new requests. \nDisabled "
          "(3) indicates that the element will not execute commands and will "
          "drop any new requests. \nShutting Down (4) indicates that the "
          "element is in the process of going to a Disabled state. \nNot "
          "Applicable (5) indicates the element does not support being "
          "enabled or disabled. \nEnabled but Offline (6) indicates that the "
          "element might be completing commands, and will drop any new "
          "requests. \nTest (7) indicates that the element is in a test "
          "state. \nDeferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \nQuiesce "
          "(9) indicates that the element is enabled but in a restricted "
          "mode.\nStarting (10) indicates that the element is in the process "
          "of going to an Enabled state. New requests are queued."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.OtherEnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11..32767", "32768..65535"},
        Values { "Unknown", "Other", "Enabled", "Disabled",
          "Shutting Down", "Not Applicable", "Enabled but Offline",
          "In Test", "Deferred", "Quiesce", "Starting", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 EnabledState = 5;

        [Description (
          "The date or time when the EnabledState of the element last "
          "changed. If the state of the element has not changed and this "
          "property is populated, then it must be set to a 0 interval value. "
          "If a state change was requested, but rejected or not yet "
          "processed, the property must not be updated.")]
    datetime TimeOfLastStateChange;

        [Description (
          "CreationClassName indicates the name of the class or the subclass "
          "used in the creation of an instance. When used with the other key "
          "properties of this class, this property allows all instances of "
          "this class and its subclasses to be uniquely identified."),
        Key (True),
        MaxLen (256)]
    string CreationClassName;

        [Description (
          "PrimaryStatus provides a high level status value, intended to "
          "align with Red-Yellow-Green type representation of status. It "
          "should be used in conjunction with DetailedStatus to provide high "
          "level and detailed health status of the ManagedElement and its "
          "subcomponents. \nPrimaryStatus consists of one of the following "
          "values: Unknown, OK, Degraded or Error. \"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"OK\" indicates the "
          "ManagedElement is functioning normally. \n\"Degraded\" indicates "
          "the ManagedElement is functioning below normal. \n\"Error\" "
          "indicates the ManagedElement is in an Error condition."),
        ModelCorrespondence { "CIM_ManagedSystemElement.DetailedStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "..", "0x8000.."},
        Values { "Unknown", "OK", "Degraded", "Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 PrimaryStatus;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The inherited Name serves as the key of a System instance in an "
          "enterprise environment."),
        Key (True),
        MaxLen (256),
        Override ("Name")]
    string Name;

        [Description (
          "An array (bag) of strings that specifies the administrator "
          "-defined roles this System plays in the managed environment. "
          "Examples might be \'Building 8 print server\' or \'Boise user "
          "directories\'. A single system may perform multiple roles. \nNote "
          "that the instrumentation view of the \'roles\' of a System is "
          "defined by instantiating a specific subclass of System, or by "
          "properties in a subclass, or both. For example, the purpose of a "
          "ComputerSystem is defined using the Dedicated and "
          "OtherDedicatedDescription properties."),
        Write (True)]
    string Roles[];

        [Description (
          "CommunicationStatus indicates the ability of the instrumentation "
          "to communicate with the underlying ManagedElement. "
          "CommunicationStatus consists of one of the following values: "
          "Unknown, None, Communication OK, Lost Communication, or No "
          "Contact. \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"Not Available\" indicates "
          "that the implementation (provider) is capable of returning a value "
          "for this property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any quality of "
          "service. \n\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to establish "
          "communications with it. \n\"Lost Communication\" indicates that "
          "the Managed Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable."),
        ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Communication OK",
          "Lost Communication", "No Contact", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 CommunicationStatus;

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The NameFormat property identifies how the Name of the AdminDomain "
          "is generated, using the heuristic specified in the CIM V2 System "
          "Model specification. The property assumes that to determine and "
          "assign a Name the documented rules are traversed in order. The "
          "NameFormat Values list defines the precedence order for assigning "
          "the Name of the AdminDomain. \n\n\"FC\" has been deprecated and "
          "replaced by \"WWN\" to be consistent with the other ValueMaps."),
        MaxLen (64),
        ModelCorrespondence { "CIM_AdminDomain.Name"},
        Override ("NameFormat"),
        ValueMap { "Other", "AS", "NAP", "NOC", "POP", "RNP", "IP", "IPX",
          "SNA", "Dial", "WAN", "LAN", "ISDN", "Frame Relay", "ATM",
          "E.164", "IB", "FC", "Policy Repository", "WWN"},
        Values { "Other", "Autonomous System", "Network Access Provider",
          "Network Operations Center", "Point of Presence",
          "Regional Network Provider", "IP", "IPX", "SNA", "Dial", "WAN",
          "LAN", "ISDN", "Frame Relay", "ATM", "E.164", "Infiniband",
          "Fibre Channel", "Policy Repository",
          "Fibre Channel Worldwide Name"}]
    string NameFormat;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for providing "
          "more detail with respect to the value of EnabledState. It can also "
          "provide the transitional states when an element is transitioning "
          "from one state to another, such as when an element is "
          "transitioning between EnabledState and RequestedState, as well as "
          "other transitional conditions.\nOperatingStatus consists of one of "
          "the following values: Unknown, Not Available, In Service, "
          "Starting, Stopping, Stopped, Aborted, Dormant, Completed, "
          "Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"None\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n\"Starting\" "
          "describes an element being initialized. \n\"Stopping\" describes "
          "an element being brought to an orderly stop. \n\"Stopped\" and "
          "\"Aborted\" are similar, although the former implies a clean and "
          "orderly stop, while the latter implies an abrupt stop where the "
          "state and configuration of the element might need to be updated. "
          "\n\"Dormant\" indicates that the element is inactive or quiesced. "
          "\n\"Completed\" indicates that the element has completed its "
          "operation. This value should be combined with either OK, Error, or "
          "Degraded in the PrimaryStatus so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed with "
          "Error (failed), or Completed with Degraded (the operation "
          "finished, but it did not complete OK or did not report an error). "
          "\n\"Migrating\" element is being moved between host elements. "
          "\n\"Immigrating\" element is being moved to new host element. "
          "\n\"Emigrating\" element is being moved away from host element. "
          "\n\"Shutting Down\" describes an element being brought to an "
          "abrupt stop. \n\"In Test\" element is performing test functions. "
          "\n\"Transitioning\" describes an element that is between states, "
          "that is, it is not fully available in either its previous state or "
          "its next state. This value should be used if other values "
          "indicating a transition to a specific state are not "
          "applicable.\n\"In Service\" describes an element that is in "
          "service and operational."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Servicing", "Starting",
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed",
          "Migrating", "Emigrating", "Immigrating", "Snapshotting",
          "Shutting Down", "In Test", "Transitioning", "In Service",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperatingStatus;

        [Description (
          "AvailableRequestedStates indicates the possible values for the "
          "RequestedState parameter of the method RequestStateChange, used to "
          "initiate a state change. The values listed shall be a subset of "
          "the values contained in the RequestedStatesSupported property of "
          "the associated instance of CIM_EnabledLogicalElementCapabilities "
          "where the values selected are a function of the current state of "
          "the CIM_EnabledLogicalElement. This property may be non-null if an "
          "implementation is able to advertise the set of possible values as "
          "a function of the current state. This property shall be null if an "
          "implementation is unable to determine the set of possible values "
          "as a function of the current state."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported"},
        ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".."},
        Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
          "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved"}]
    uint16 AvailableRequestedStates[];

        [Description (
          "Requests that the state of the element be changed to the value "
          "specified in the RequestedState parameter. When the requested "
          "state change takes place, the EnabledState and RequestedState of "
          "the element will be the same. Invoking the RequestStateChange "
          "method multiple times could result in earlier requests being "
          "overwritten or lost. \nA return code of 0 shall indicate the state "
          "change was successfully initiated. \nA return code of 3 shall "
          "indicate that the state transition cannot complete within the "
          "interval specified by the TimeoutPeriod parameter. \nA return code "
          "of 4096 (0x1000) shall indicate the state change was successfully "
          "initiated, a ConcreteJob has been created, and its reference "
          "returned in the output parameter Job. Any other return code "
          "indicates an error condition."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535"},
        Values { "Completed with No Error", "Not Supported",
          "Unknown or Unspecified Error",
          "Cannot complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Job Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific"}]
    uint32 RequestStateChange(
          [Description (
            "The state requested for the element. This information will be "
            "placed into the RequestedState property of the instance if the "
            "return code of the RequestStateChange method is 0 (\'Completed "
            "with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to "
            "the description of the EnabledState and RequestedState "
            "properties for the detailed explanations of the RequestedState "
            "values."),
          IN (True),
          ModelCorrespondence {
            "CIM_EnabledLogicalElement.RequestedState"},
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", "..",
            "32768..65535"},
          Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
            "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved",
            "Vendor Reserved"}]
        uint16 RequestedState,
          [Description (
            "May contain a reference to the ConcreteJob created to track the "
            "state transition initiated by the method invocation."),
          IN (False),
          OUT (True)]
        CIM_ConcreteJob REF Job,
          [Description (
            "A timeout period that specifies the maximum amount of time that "
            "the client expects the transition to the new state to take. The "
            "interval format must be used to specify the TimeoutPeriod. A "
            "value of 0 or a null parameter indicates that the client has no "
            "time requirements for the transition. \nIf this property does "
            "not contain 0 or null and the implementation does not support "
            "this parameter, a return code of \'Use Of Timeout Parameter Not "
            "Supported\' shall be returned."),
          IN (True)]
        datetime TimeoutPeriod);
};

    [Description (
      "The ApplicationSystem class represents an application or a software "
      "system that supports a particular business function and that can be "
      "managed as an independent unit. Such a system can be decomposed into "
      "its functional components using the CIM_SoftwareFeature class. The "
      "Features for a particular application or software system are located "
      "using the CIM_ApplicationSystemSoftwareFeature association. The "
      "features are part of the deployment-oriented aspects of the "
      "application system. \nWith regard to the application runtime aspects, "
      "the ApplicationSystem class also represents the core class of the "
      "Application Systems\' sub-model which of the application runtime "
      "model. Its role in the systems sub-model is a) the root node of the "
      "containment hierarchy of the application elements (at runtime) as "
      "services, components, sub-systems, etc., b) the place for runtime "
      "overview information such as response time or system status, c) "
      "runtime control of the entire application (e.g., start/stop), and d) "
      "the main entry point to the navigation through and drill-down into the "
      "runtime model. \nThe lifetime of an instance of this class is not "
      "limited to the application instance it represents. Even if the "
      "application is not running, the ApplicationSystem object can report "
      "properties that have values (e.g., the name of the application or the "
      "current status). Note that it is also possible to define the lifetime "
      "of the objects through the lifetime of the application instances. "
      "\nThrough ApplicationSystemDependency, non-containment relationships "
      "can be expressed."),
    UMLPackagePath ("CIM::Application::DeploymentModel"),
    Version ("2.8.0")]
class CIM_ApplicationSystem : CIM_System {

        [Description (
          "RequestedState is an integer enumeration that indicates the last "
          "requested or desired state for the element, irrespective of the "
          "mechanism through which it was requested. The actual state of the "
          "element is represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or disabled "
          "states. Note that when EnabledState is set to 5 (\"Not "
          "Applicable\"), then this property has no meaning. Refer to the "
          "EnabledState property description for explanations of the values "
          "in the RequestedState enumeration. \n\"Unknown\" (0) indicates the "
          "last requested state for the element is unknown.\nNote that the "
          "value \"No Change\" (5) has been deprecated in lieu of indicating "
          "the last requested state is \"Unknown\" (0). If the last requested "
          "or desired state is unknown, RequestedState should have the value "
          "\"Unknown\" (0), but may have the value \"No Change\" (5).Offline "
          "(6) indicates that the element has been requested to transition to "
          "the Enabled but Offline EnabledState. \nIt should be noted that "
          "there are two new values in RequestedState that build on the "
          "statuses of EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then moving to an "
          "\"Enabled\" state. Reset indicates that the element is first "
          "\"Disabled\" and then \"Enabled\". The distinction between "
          "requesting \"Shut Down\" and \"Disabled\" should also be noted. "
          "Shut Down requests an orderly transition to the Disabled state, "
          "and might involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate disabling of the "
          "element, such that it will not execute or accept any commands or "
          "processing requests. \n\nThis property is set as the result of a "
          "method invocation (such as Start or StopService on CIM_Service), "
          "or can be overridden and defined as WRITEable in a subclass. The "
          "method approach is considered superior to a WRITEable property, "
          "because it allows an explicit invocation of the operation and the "
          "return of a result code. \n\nIf knowledge of the last "
          "RequestedState is not supported for the EnabledLogicalElement, the "
          "property shall be NULL or have the value 12 \"Not Applicable\"."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "..", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Deferred", "Quiesce",
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 RequestedState = 12;

        [Description (
          "Indicates the current health of the element. This attribute "
          "expresses the health of this element but not necessarily that of "
          "its subcomponents. The possible values are 0 to 30, where 5 means "
          "the element is entirely healthy and 30 means the element is "
          "completely non-functional. The following continuum is defined: "
          "\n\"Non-recoverable Error\" (30) - The element has completely "
          "failed, and recovery is not possible. All functionality provided "
          "by this element has been lost. \n\"Critical Failure\" (25) - The "
          "element is non-functional and recovery might not be possible. "
          "\n\"Major Failure\" (20) - The element is failing. It is possible "
          "that some or all of the functionality of this component is "
          "degraded or not working. \n\"Minor Failure\" (15) - All "
          "functionality is available but some might be degraded. "
          "\n\"Degraded/Warning\" (10) - The element is in working order and "
          "all functionality is provided. However, the element is not working "
          "to the best of its abilities. For example, the element might not "
          "be operating at optimal performance or it might be reporting "
          "recoverable errors. \n\"OK\" (5) - The element is fully functional "
          "and is operating within normal operational parameters and without "
          "error. \n\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \nDMTF has reserved the unused portion "
          "of the continuum for additional HealthStates in the future."),
        ValueMap { "0", "5", "10", "15", "20", "25", "30", "..",
          "32768..65535"},
        Values { "Unknown", "OK", "Degraded/Warning", "Minor failure",
          "Major failure", "Critical failure", "Non-recoverable error",
          "DMTF Reserved", "Vendor Specific"}]
    uint16 HealthState;

        [ArrayType ("Indexed"),
        Description (
          "Strings describing the various OperationalStatus array values. For "
          "example, if \"Stopping\" is the value assigned to "
          "OperationalStatus, then this property may contain an explanation "
          "as to why an object is being stopped. Note that entries in this "
          "array are correlated with those at the same array index in "
          "OperationalStatus."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"}]
    string StatusDescriptions[];

        [Description (
          "TransitioningToState indicates the target state to which the "
          "instance is transitioning. \nA value of 5 \"No Change\" shall "
          "indicate that no transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not support "
          "representing ongoing transitions. \nA value other than 5 or 12 "
          "shall identify the state to which the element is in the process of "
          "transitioning."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElement.RequestedState",
          "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", ".."},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Defer", "Quiesce", "Reboot",
          "Reset", "Not Applicable", "DMTF Reserved"}]
    uint16 TransitioningToState = 12;

        [Description (
          "ServingStatus is a summary of MSE.OperationalStatus. It allows "
          "simplified and efficient determination of whether the application "
          "is providing service or has stopped doing so for various reasons "
          "like errors, shutdown, abort, etc. Therefore, no transitional "
          "values are provided. The property does not show any errors. Errors "
          "MUST be described in MSE.OperationalStatus, and MAY also be "
          "described in logs or other data sources. Therefore, ServingStatus "
          "is suited to provide summary information for monitoring purposes "
          "and service level management. \nThe mapping to "
          "MSE.OperationalStatus is as follows: \nServingStatus <- "
          "MSE.OperationalStatus \nUnknown <- Unknown, No Contact, Lost "
          "Communication \nEither of the values <- Other \nServing <- OK, "
          "Degraded, Stressed, Predictive Failure, Completed \nNot Serving <- "
          "Error, Non-Recoverable Error, Starting, Stopping, Stopped, In "
          "Service, Aborted, Dormant, Supporting Entity in Error."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"},
        ValueMap { "0", "1", "2", "5..4096", "4097..65535"},
        Values { "Unknown", "Serving", "Not Serving", "DMTF Reserved",
          "Vendor Specific"}]
    uint16 ServingStatus;

        [Description (
          "CommunicationStatus indicates the ability of the instrumentation "
          "to communicate with the underlying ManagedElement. "
          "CommunicationStatus consists of one of the following values: "
          "Unknown, None, Communication OK, Lost Communication, or No "
          "Contact. \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"Not Available\" indicates "
          "that the implementation (provider) is capable of returning a value "
          "for this property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any quality of "
          "service. \n\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to establish "
          "communications with it. \n\"Lost Communication\" indicates that "
          "the Managed Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable."),
        ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Communication OK",
          "Lost Communication", "No Contact", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 CommunicationStatus;

        [Description (
          "A string that provides information on how the primary system owner "
          "can be reached (for example, phone number, e-mail address, and so "
          "on)."),
        MappingStrings { "MIF.DMTF|General Information|001.4"},
        MaxLen (256),
        Write (True)]
    string PrimaryOwnerContact;

        [Description (
          "DetailedStatus compliments PrimaryStatus with additional status "
          "detail. It consists of one of the following values: Not Available, "
          "No Additional Information, Stressed, Predictive Failure, Error, "
          "Non-Recoverable Error, SupportingEntityInError. Detailed status is "
          "used to expand upon the PrimaryStatus of the element. \nA Null "
          "return indicates the implementation (provider) does not implement "
          "this property. \n\"Not Available\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"No Additional Information\" indicates that the "
          "element is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are overload, "
          "overheated, and so on. \n\"Predictive Failure\" indicates that an "
          "element is functioning normally but a failure is predicted in the "
          "near future. \n\"Non-Recoverable Error \" indicates that this "
          "element is in an error condition that requires human intervention. "
          "\n\"Supporting Entity in Error\" indicates that this element might "
          "be \"OK\" but that another element, on which it is dependent, is "
          "in error. An example is a network service or endpoint that cannot "
          "function due to lower-layer networking problems."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.PrimaryStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.."},
        Values { "Not Available", "No Additional Information", "Stressed",
          "Predictive Failure", "Non-Recoverable Error",
          "Supporting Entity in Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 DetailedStatus;

        [ArrayType ("Indexed"),
        Description (
          "OtherIdentifyingInfo captures additional data, beyond System Name "
          "information, that could be used to identify a ComputerSystem. One "
          "example would be to hold the Fibre Channel World-Wide Name (WWN) "
          "of a node. Note that if only the Fibre Channel name is available "
          "and is unique (able to be used as the System key), then this "
          "property would be NULL and the WWN would become the System key, "
          "its data placed in the Name property."),
        MaxLen (256),
        ModelCorrespondence { "CIM_System.IdentifyingDescriptions"}]
    string OtherIdentifyingInfo[];

        [Description (
          "The point in time (date and time) when the application system was "
          "last started. If the application system is in a state other the "
          "state Enabled (i.e., started and running) this value is not "
          "meaningful and the property value MUST be set to all zeros. "
          "\nStartupTime is preferably the point in time when the application "
          "is available to the user. Instead, if the provider and/or the "
          "instrumentation cannot determine the point in time the application "
          "becomes available, the point in time can be used at which the "
          "underlying operating system reports successful launch of the "
          "application. If no value can be provided the property value MUST "
          "be set to all zeros.")]
    datetime StartupTime;

        [ArrayType ("Indexed"),
        Description (
          "An array of free-form strings providing explanations and details "
          "behind the entries in the OtherIdentifying Info array. Note, each "
          "entry of this array is related to the entry in "
          "OtherIdentifyingInfo that is located at the same index."),
        ModelCorrespondence { "CIM_System.OtherIdentifyingInfo"}]
    string IdentifyingDescriptions[];

        [ArrayType ("Indexed"),
        Description (
          "Indicates the current statuses of the element. Various operational "
          "statuses are defined. Many of the enumeration\'s values are "
          "self-explanatory. However, a few are not and are described here in "
          "more detail. \n\"Stressed\" indicates that the element is "
          "functioning, but needs attention. Examples of \"Stressed\" states "
          "are overload, overheated, and so on. \n\"Predictive Failure\" "
          "indicates that an element is functioning nominally but predicting "
          "a failure in the near future. \n\"In Service\" describes an "
          "element being configured, maintained, cleaned, or otherwise "
          "administered. \n\"No Contact\" indicates that the monitoring "
          "system has knowledge of this element, but has never been able to "
          "establish communications with it. \n\"Lost Communication\" "
          "indicates that the ManagedSystem Element is known to exist and has "
          "been contacted successfully in the past, but is currently "
          "unreachable. \n\"Stopped\" and \"Aborted\" are similar, although "
          "the former implies a clean and orderly stop, while the latter "
          "implies an abrupt stop where the state and configuration of the "
          "element might need to be updated. \n\"Dormant\" indicates that the "
          "element is inactive or quiesced. \n\"Supporting Entity in Error\" "
          "indicates that this element might be \"OK\" but that another "
          "element, on which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n\"Completed\" indicates that "
          "the element has completed its operation. This value should be "
          "combined with either OK, Error, or Degraded so that a client can "
          "tell if the complete operation Completed with OK (passed), "
          "Completed with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did not report "
          "an error). \n\"Power Mode\" indicates that the element has "
          "additional power model information contained in the Associated "
          "PowerManagementService association. \n\"Relocating\" indicates the "
          "element is being relocated.\nOperationalStatus replaces the Status "
          "property on ManagedSystemElement to provide a consistent approach "
          "to enumerations, to address implementation needs for an array "
          "property, and to provide a migration path from today\'s "
          "environment to the future. This change was not made earlier "
          "because it required the deprecated qualifier. Due to the "
          "widespread use of the existing Status property in management "
          "applications, it is strongly recommended that providers or "
          "instrumentation provide both the Status and OperationalStatus "
          "properties. Further, the first value of OperationalStatus should "
          "contain the primary status for the element. When instrumented, "
          "Status (because it is single-valued) should also provide the "
          "primary status of the element."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.StatusDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "..",
          "0x8000.."},
        Values { "Unknown", "Other", "OK", "Degraded", "Stressed",
          "Predictive Failure", "Error", "Non-Recoverable Error",
          "Starting", "Stopping", "Stopped", "In Service", "No Contact",
          "Lost Communication", "Aborted", "Dormant",
          "Supporting Entity in Error", "Completed", "Power Mode",
          "Relocating", "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperationalStatus[];

        [Description (
          "The name of the primary system owner. The system owner is the "
          "primary user of the system."),
        MappingStrings { "MIF.DMTF|General Information|001.3"},
        MaxLen (64),
        Write (True)]
    string PrimaryOwnerName;

        [Deprecated { "CIM_ManagedSystemElement.OperationalStatus"},
        Description (
          "A string indicating the current status of the object. Various "
          "operational and non-operational statuses are defined. This "
          "property is deprecated in lieu of OperationalStatus, which "
          "includes the same semantics in its enumeration. This change is "
          "made for 3 reasons: \n1) Status is more correctly defined as an "
          "array. This definition overcomes the limitation of describing "
          "status using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND Stopped. \n2) A "
          "MaxLen of 10 is too restrictive and leads to unclear enumerated "
          "values. \n3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 implementations used "
          "the string property and did not want to modify their code. "
          "Therefore, Status was grandfathered into the Schema. Use of the "
          "deprecated qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus."),
        MaxLen (10),
        ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail",
          "Starting", "Stopping", "Service", "Stressed", "NonRecover",
          "No Contact", "Lost Comm", "Stopped"}]
    string Status;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;

        [Description (
          "A datetime value that indicates when the object was installed. "
          "Lack of a value does not indicate that the object is not installed."),
        MappingStrings { "MIF.DMTF|ComponentID|001.5"}]
    datetime InstallDate;

        [Description (
          "An enumerated value indicating an administrator\'s default or "
          "startup configuration for the Enabled State of an element. By "
          "default, the element is \"Enabled\" (value=2)."),
        ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535"},
        Values { "Enabled", "Disabled", "Not Applicable",
          "Enabled but Offline", "No Default", "Quiesce",
          "DMTF Reserved", "Vendor Reserved"},
        Write (True)]
    uint16 EnabledDefault = 2;

        [Description (
          "EnabledState is an integer enumeration that indicates the "
          "enabled/disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down and starting are transient states between enabled and "
          "disabled. \nIn contrast to the original version defined higher in "
          "the inheritance hierarchy (EnabledLogicalElement), EnabledState is "
          "simplified. It reflects the notion of an execution status tailored "
          "to applications and represents a summary of the original property. "
          "It allows simplified and efficient determination of whether the "
          "application is started, stopped or in transition between either of "
          "these states. The property does not show any errors. Errors MUST "
          "be described in MSE.OperationalStatus, and MAY also be described "
          "in logs or other data sources. \nThe mapping to "
          "MSE.OperationalStatus is as follows: \nExecutionStatus <- "
          "MSE.OperationalStatus \nUnknown <- Unknown, No Contact, Lost "
          "Communication, \nEither of the values <- Other \nEnabled (started) "
          "<- OK, Degraded, Stressed, Predictive Failure, In Service, "
          "Dormant, Supporting Entity in Error, Completed \nEnabled or "
          "Disabled (Started or Stopped) <- Error, Non-Recoverable Error "
          "\nStarting <- Starting \nShutting Down (Stopping) <- Stopping "
          "\nDisabled (Stopped) <- Stopped, Aborted. \nThe mapping to the "
          "original EnabledState property is as follows: \nUnknown <- "
          "Unknown, Not Applicable \nEither of the values <-Other \nEnabled "
          "<- Enabled, Enabled but Offline, In Test, Deferred, Quiesce "
          "\nDisabled <- Disabled \nShuttingDown <- ShuttingDown \nStarting "
          "<- Starting."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.OtherEnabledState"},
        Override ("EnabledState"),
        ValueMap { "0", "2", "3", "4", "10", "11..32767", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shutting Down",
          "Starting", "DMTF Reserved", "Vendor Reserved"}]
    uint16 EnabledState = 0;

        [Description (
          "The date or time when the EnabledState of the element last "
          "changed. If the state of the element has not changed and this "
          "property is populated, then it must be set to a 0 interval value. "
          "If a state change was requested, but rejected or not yet "
          "processed, the property must not be updated.")]
    datetime TimeOfLastStateChange;

        [Description (
          "The point in time at which the ServingStatus property was last "
          "updated."),
        ModelCorrespondence { "CIM_ApplicationSystem.ServingStatus"}]
    datetime LastServingStatusUpdate;

        [Description (
          "CreationClassName indicates the name of the class or the subclass "
          "used in the creation of an instance. When used with the other key "
          "properties of this class, this property allows all instances of "
          "this class and its subclasses to be uniquely identified."),
        Key (True),
        MaxLen (256)]
    string CreationClassName;

        [Description (
          "PrimaryStatus provides a high level status value, intended to "
          "align with Red-Yellow-Green type representation of status. It "
          "should be used in conjunction with DetailedStatus to provide high "
          "level and detailed health status of the ManagedElement and its "
          "subcomponents. \nPrimaryStatus consists of one of the following "
          "values: Unknown, OK, Degraded or Error. \"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"OK\" indicates the "
          "ManagedElement is functioning normally. \n\"Degraded\" indicates "
          "the ManagedElement is functioning below normal. \n\"Error\" "
          "indicates the ManagedElement is in an Error condition."),
        ModelCorrespondence { "CIM_ManagedSystemElement.DetailedStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "..", "0x8000.."},
        Values { "Unknown", "OK", "Degraded", "Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 PrimaryStatus;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The inherited Name serves as the key of a System instance in an "
          "enterprise environment."),
        Key (True),
        MaxLen (256),
        Override ("Name")]
    string Name;

        [Description (
          "An array (bag) of strings that specifies the administrator "
          "-defined roles this System plays in the managed environment. "
          "Examples might be \'Building 8 print server\' or \'Boise user "
          "directories\'. A single system may perform multiple roles. \nNote "
          "that the instrumentation view of the \'roles\' of a System is "
          "defined by instantiating a specific subclass of System, or by "
          "properties in a subclass, or both. For example, the purpose of a "
          "ComputerSystem is defined using the Dedicated and "
          "OtherDedicatedDescription properties."),
        Write (True)]
    string Roles[];

        [Description (
          "A string that describes the enabled or disabled state of the "
          "element when the EnabledState property is set to 1 (\"Other\"). "
          "This property must be set to null when EnabledState is any value "
          "other than 1."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"}]
    string OtherEnabledState;

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "The System object and its derivatives are top-level objects of "
          "CIM. They provide the scope for numerous components. Having unique "
          "System keys is required. A heuristic can be defined in individual "
          "System subclasses to attempt to always generate the same System "
          "Name Key. The NameFormat property identifies how the System name "
          "was generated, using the heuristic of the subclass."),
        MaxLen (64)]
    string NameFormat;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for providing "
          "more detail with respect to the value of EnabledState. It can also "
          "provide the transitional states when an element is transitioning "
          "from one state to another, such as when an element is "
          "transitioning between EnabledState and RequestedState, as well as "
          "other transitional conditions.\nOperatingStatus consists of one of "
          "the following values: Unknown, Not Available, In Service, "
          "Starting, Stopping, Stopped, Aborted, Dormant, Completed, "
          "Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"None\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n\"Starting\" "
          "describes an element being initialized. \n\"Stopping\" describes "
          "an element being brought to an orderly stop. \n\"Stopped\" and "
          "\"Aborted\" are similar, although the former implies a clean and "
          "orderly stop, while the latter implies an abrupt stop where the "
          "state and configuration of the element might need to be updated. "
          "\n\"Dormant\" indicates that the element is inactive or quiesced. "
          "\n\"Completed\" indicates that the element has completed its "
          "operation. This value should be combined with either OK, Error, or "
          "Degraded in the PrimaryStatus so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed with "
          "Error (failed), or Completed with Degraded (the operation "
          "finished, but it did not complete OK or did not report an error). "
          "\n\"Migrating\" element is being moved between host elements. "
          "\n\"Immigrating\" element is being moved to new host element. "
          "\n\"Emigrating\" element is being moved away from host element. "
          "\n\"Shutting Down\" describes an element being brought to an "
          "abrupt stop. \n\"In Test\" element is performing test functions. "
          "\n\"Transitioning\" describes an element that is between states, "
          "that is, it is not fully available in either its previous state or "
          "its next state. This value should be used if other values "
          "indicating a transition to a specific state are not "
          "applicable.\n\"In Service\" describes an element that is in "
          "service and operational."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Servicing", "Starting",
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed",
          "Migrating", "Emigrating", "Immigrating", "Snapshotting",
          "Shutting Down", "In Test", "Transitioning", "In Service",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperatingStatus;

        [Description (
          "Distribution describes how the application system is distributed "
          "with respect to its underlying servers. In general, the "
          "application system is distributed or local. This property "
          "indicates whether the application system is running on one or "
          "multiple servers. This can be determined without having to query "
          "for associated servers represented by ComputerSystems. Distributed "
          "systems also introduce a virtual notion to themselves. Note that a "
          "distributed application system is not tangible but virtual. Only "
          "its contained local systems can be found as processes or threads, "
          "and can therefore be regarded as tangible. The distributed system "
          "remains a named, virtual entity, that scopes strongly bound "
          "constituents and allows the application to be managed in its "
          "entirety. \nThe property is needed to help root cause analysis and "
          "operations, especially when these are automated, in order to "
          "clearly know that more than one executed application - most likely "
          "the local application systems - is affected by the management "
          "task. This is particularly true if the contained application "
          "systems provide uniform functionality like webserver or "
          "application server farms. \nTo express constraints between "
          "distributed and local system, this class must be derived and "
          "appropriate associations must be defined. \nThis property should "
          "not be confused with the Roles[] property defined in System. The "
          "latter is reserved for administrator assigned roles."),
        ValueMap { "0", "1", "2", "3..32767", "32768..65535"},
        Values { "Unknown", "Distributed", "Local", "DMTF Reserved",
          "Vendor Specific"}]
    uint16 Distribution;

        [Description (
          "AvailableRequestedStates indicates the possible values for the "
          "RequestedState parameter of the method RequestStateChange, used to "
          "initiate a state change. The values listed shall be a subset of "
          "the values contained in the RequestedStatesSupported property of "
          "the associated instance of CIM_EnabledLogicalElementCapabilities "
          "where the values selected are a function of the current state of "
          "the CIM_EnabledLogicalElement. This property may be non-null if an "
          "implementation is able to advertise the set of possible values as "
          "a function of the current state. This property shall be null if an "
          "implementation is unable to determine the set of possible values "
          "as a function of the current state."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported"},
        ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".."},
        Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
          "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved"}]
    uint16 AvailableRequestedStates[];

        [Description (
          "Requests that the state of the element be changed to the value "
          "specified in the RequestedState parameter. When the requested "
          "state change takes place, the EnabledState and RequestedState of "
          "the element will be the same. Invoking the RequestStateChange "
          "method multiple times could result in earlier requests being "
          "overwritten or lost. \nA return code of 0 shall indicate the state "
          "change was successfully initiated. \nA return code of 3 shall "
          "indicate that the state transition cannot complete within the "
          "interval specified by the TimeoutPeriod parameter. \nA return code "
          "of 4096 (0x1000) shall indicate the state change was successfully "
          "initiated, a ConcreteJob has been created, and its reference "
          "returned in the output parameter Job. Any other return code "
          "indicates an error condition."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535"},
        Values { "Completed with No Error", "Not Supported",
          "Unknown or Unspecified Error",
          "Cannot complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Job Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific"}]
    uint32 RequestStateChange(
          [Description (
            "The state requested for the element. This information will be "
            "placed into the RequestedState property of the instance if the "
            "return code of the RequestStateChange method is 0 (\'Completed "
            "with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to "
            "the description of the EnabledState and RequestedState "
            "properties for the detailed explanations of the RequestedState "
            "values."),
          IN (True),
          ModelCorrespondence {
            "CIM_EnabledLogicalElement.RequestedState"},
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", "..",
            "32768..65535"},
          Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
            "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved",
            "Vendor Reserved"}]
        uint16 RequestedState,
          [Description (
            "May contain a reference to the ConcreteJob created to track the "
            "state transition initiated by the method invocation."),
          IN (False),
          OUT (True)]
        CIM_ConcreteJob REF Job,
          [Description (
            "A timeout period that specifies the maximum amount of time that "
            "the client expects the transition to the new state to take. The "
            "interval format must be used to specify the TimeoutPeriod. A "
            "value of 0 or a null parameter indicates that the client has no "
            "time requirements for the transition. \nIf this property does "
            "not contain 0 or null and the implementation does not support "
            "this parameter, a return code of \'Use Of Timeout Parameter Not "
            "Supported\' shall be returned."),
          IN (True)]
        datetime TimeoutPeriod);

        [Description (
          "StopApplication() allows for stopping/shutting down an application "
          "system. It is up to the implementation of the method to define "
          "which of the contained or dependent sub-elements are to be stopped "
          "and in which order their stop has to occur. \nSince a system "
          "shutdown can last considerable time (several minutes is not "
          "necessarily unusual for complex distributed applications), the "
          "method can be implemented synchronously or asynchronously. In both "
          "cases EnabledState and RequestedState reflect the current state of "
          "the application and the desired state (Disabled) respectively. The "
          "exact nature of the errors during the stop cannot be determined in "
          "the asynchronous case. The method must return one of the "
          "following: \nUnspecified Error: If no return code can be "
          "identified \nCompleted with No Error: successful invocation \nStop "
          "Already in Process: application is shutting down \nFailed: "
          "Indicates errors upon execution."),
        ModelCorrespondence { "CIM_ApplicationSystem.EnabledState",
          "CIM_ApplicationSystem.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4..4096", "4097..32767",
          "32768..65535"},
        Values { "Unspecified Error", "Completed with No Error",
          "Stop Already in Process", "Failed", "DMTF Reserved",
          "Method Reserved", "Vendor Specific"}]
    uint16 StopApplication();

        [Description (
          "StartApplication() starts an application system. The "
          "ApplicationSystem object must have been created prior to the "
          "invocation of this method. It is up to the implementation of the "
          "method to define which of the contained or dependent sub-elements "
          "are to be started and in which order their startup may occur. "
          "\nSince a system startup can extend over long periods of time "
          "(several minutes is not unusual for complex distributed "
          "applications), the method can be implemented synchronously or "
          "asynchronously. In both cases EnabledState and RequestedState "
          "reflect the current state of the application and the desired state "
          "(Enabled) respectively. The exact nature of the errors during the "
          "startup cannot be determined in the asynchronous case. The method "
          "must return one of the following values: \nUnspecified Error: If "
          "no return code can be identified \nCompleted with No Error: "
          "successful invocation \nStart Already in Progress: application "
          "still being started \nFailed:Indicates errors upon execution."),
        ModelCorrespondence { "CIM_ApplicationSystem.EnabledState",
          "CIM_ApplicationSystem.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4..4096", "4097..32767",
          "32768..65535"},
        Values { "Unspecified Error", "Completed with No Error",
          "Start Already in Progress", "Failed", "DMTF Reserved",
          "Method Reserved", "Vendor Specific"}]
    uint16 StartApplication();
};

    [Description (
      "A class derived from System that is a special collection of "
      "ManagedSystemElements. This collection is related to the providing of "
      "compute capabilities and MAY serve as an aggregation point to "
      "associate one or more of the following elements: FileSystem, "
      "OperatingSystem, Processor and Memory (Volatile and/or NonVolatile "
      "Storage)."),
    UMLPackagePath ("CIM::System::SystemElements"),
    Version ("2.36.0")]
class CIM_ComputerSystem : CIM_System {

        [Description (
          "RequestedState is an integer enumeration that indicates the last "
          "requested or desired state for the element, irrespective of the "
          "mechanism through which it was requested. The actual state of the "
          "element is represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or disabled "
          "states. Note that when EnabledState is set to 5 (\"Not "
          "Applicable\"), then this property has no meaning. Refer to the "
          "EnabledState property description for explanations of the values "
          "in the RequestedState enumeration. \n\"Unknown\" (0) indicates the "
          "last requested state for the element is unknown.\nNote that the "
          "value \"No Change\" (5) has been deprecated in lieu of indicating "
          "the last requested state is \"Unknown\" (0). If the last requested "
          "or desired state is unknown, RequestedState should have the value "
          "\"Unknown\" (0), but may have the value \"No Change\" (5).Offline "
          "(6) indicates that the element has been requested to transition to "
          "the Enabled but Offline EnabledState. \nIt should be noted that "
          "there are two new values in RequestedState that build on the "
          "statuses of EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then moving to an "
          "\"Enabled\" state. Reset indicates that the element is first "
          "\"Disabled\" and then \"Enabled\". The distinction between "
          "requesting \"Shut Down\" and \"Disabled\" should also be noted. "
          "Shut Down requests an orderly transition to the Disabled state, "
          "and might involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate disabling of the "
          "element, such that it will not execute or accept any commands or "
          "processing requests. \n\nThis property is set as the result of a "
          "method invocation (such as Start or StopService on CIM_Service), "
          "or can be overridden and defined as WRITEable in a subclass. The "
          "method approach is considered superior to a WRITEable property, "
          "because it allows an explicit invocation of the operation and the "
          "return of a result code. \n\nIf knowledge of the last "
          "RequestedState is not supported for the EnabledLogicalElement, the "
          "property shall be NULL or have the value 12 \"Not Applicable\"."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "..", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Deferred", "Quiesce",
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 RequestedState = 12;

        [Description (
          "Indicates the current health of the element. This attribute "
          "expresses the health of this element but not necessarily that of "
          "its subcomponents. The possible values are 0 to 30, where 5 means "
          "the element is entirely healthy and 30 means the element is "
          "completely non-functional. The following continuum is defined: "
          "\n\"Non-recoverable Error\" (30) - The element has completely "
          "failed, and recovery is not possible. All functionality provided "
          "by this element has been lost. \n\"Critical Failure\" (25) - The "
          "element is non-functional and recovery might not be possible. "
          "\n\"Major Failure\" (20) - The element is failing. It is possible "
          "that some or all of the functionality of this component is "
          "degraded or not working. \n\"Minor Failure\" (15) - All "
          "functionality is available but some might be degraded. "
          "\n\"Degraded/Warning\" (10) - The element is in working order and "
          "all functionality is provided. However, the element is not working "
          "to the best of its abilities. For example, the element might not "
          "be operating at optimal performance or it might be reporting "
          "recoverable errors. \n\"OK\" (5) - The element is fully functional "
          "and is operating within normal operational parameters and without "
          "error. \n\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \nDMTF has reserved the unused portion "
          "of the continuum for additional HealthStates in the future."),
        ValueMap { "0", "5", "10", "15", "20", "25", "30", "..",
          "32768..65535"},
        Values { "Unknown", "OK", "Degraded/Warning", "Minor failure",
          "Major failure", "Critical failure", "Non-recoverable error",
          "DMTF Reserved", "Vendor Specific"}]
    uint16 HealthState;

        [ArrayType ("Indexed"),
        Description (
          "Strings describing the various OperationalStatus array values. For "
          "example, if \"Stopping\" is the value assigned to "
          "OperationalStatus, then this property may contain an explanation "
          "as to why an object is being stopped. Note that entries in this "
          "array are correlated with those at the same array index in "
          "OperationalStatus."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"}]
    string StatusDescriptions[];

        [Description (
          "TransitioningToState indicates the target state to which the "
          "instance is transitioning. \nA value of 5 \"No Change\" shall "
          "indicate that no transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not support "
          "representing ongoing transitions. \nA value other than 5 or 12 "
          "shall identify the state to which the element is in the process of "
          "transitioning."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElement.RequestedState",
          "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", ".."},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Defer", "Quiesce", "Reboot",
          "Reset", "Not Applicable", "DMTF Reserved"}]
    uint16 TransitioningToState = 12;

        [ArrayType ("Indexed"),
        Description (
          "Enumeration indicating the purpose(s) to which the ComputerSystem "
          "is dedicated, if any, and what functionality is provided. For "
          "example, one could specify that the System is dedicated to "
          "\"Print\" (value=11) or acts as a \"Hub\" (value=8). \nAlso, one "
          "could indicate that this is a general purpose system by indicating "
          "\'Not Dedicated\' (value=0) but that it also hosts \'Print\' "
          "(value=11) or mobile phone \'Mobile User Device\' (value=17) "
          "services. \nA clarification is needed with respect to the value 17 "
          "(\"Mobile User Device\"). An example of a dedicated user device is "
          "a mobile phone or a barcode scanner in a store that communicates "
          "via radio frequency. These systems are quite limited in "
          "functionality and programmability, and are not considered "
          "\'general purpose\' computing platforms. Alternately, an example "
          "of a mobile system that is \'general purpose\' (i.e., is NOT "
          "dedicated) is a hand-held computer. Although limited in its "
          "programmability, new software can be downloaded and its "
          "functionality expanded by the user. \nA value of \"Management\" "
          "indicates this instance is dedicated to hosting system management "
          "software.\nA value of \"Management Controller\" indicates this "
          "instance represents specialized hardware dedicated to systems "
          "management (i.e., a Baseboard Management Controller (BMC) or "
          "service processor).\nThe management scope of a \"Management "
          "Controller\" is typically a single managed system in which it is "
          "contained.\nA value of \"Chassis Manager\" indicates this instance "
          "represents a system dedicated to management of a blade chassis and "
          "its contained devices. This value would be used to represent a "
          "Shelf Controller. A \"Chassis Manager\" is an aggregation point "
          "for management and may rely on subordinate management controllers "
          "for the management of constituent parts. A value of \"Host-based "
          "RAID Controller\" indicates this instance represents a RAID "
          "storage controller contained within a host computer. A value of "
          "\"Storage Device Enclosure\" indicates this instance represents an "
          "enclosure that contains storage devices. A \"Virtual Tape "
          "Library\" is the emulation of a tape library by a Virtual Library "
          "System. A \"Virtual Library System\" uses disk storage to emulate "
          "tape libraries.A \"FC Switch\" indicates this instance is "
          "dedicated to switching layer 2 fibre channel frames. An \"Ethernet "
          "Switch\" indicates this instance is dedicated to switching layer 2 "
          "ethernet frames.\n\"Server\" indicates that the system is an "
          "independent computer system whose primary purpose is to host "
          "services for other systems and devices to access; typically as in "
          "a stand-alone floor or rack-mounted system.\n\"Blade\" indicates "
          "this instance is a computer system that fits into another chassis "
          "and depends on it for services, such as power, cooling, etc."),
        MappingStrings { "MIB.IETF|MIB-II.sysServices",
          "FC-GS.INCITS-T11 | Platform | PlatformType"},
        ModelCorrespondence {
          "CIM_ComputerSystem.OtherDedicatedDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
          "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
          "31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
          "..", "32568..65535"},
        Values { "Not Dedicated", "Unknown", "Other", "Storage", "Router",
          "Switch", "Layer 3 Switch", "Central Office Switch", "Hub",
          "Access Server", "Firewall", "Print", "I/O", "Web Caching",
          "Management", "Block Server", "File Server",
          "Mobile User Device", "Repeater", "Bridge/Extender", "Gateway",
          "Storage Virtualizer", "Media Library", "ExtenderNode",
          "NAS Head", "Self-contained NAS", "UPS", "IP Phone",
          "Management Controller", "Chassis Manager",
          "Host-based RAID controller", "Storage Device Enclosure",
          "Desktop", "Laptop", "Virtual Tape Library",
          "Virtual Library System", "Network PC/Thin Client",
          "FC Switch", "Ethernet Switch", "Server", "Blade",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 Dedicated[];

        [Description (
          "CommunicationStatus indicates the ability of the instrumentation "
          "to communicate with the underlying ManagedElement. "
          "CommunicationStatus consists of one of the following values: "
          "Unknown, None, Communication OK, Lost Communication, or No "
          "Contact. \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"Not Available\" indicates "
          "that the implementation (provider) is capable of returning a value "
          "for this property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any quality of "
          "service. \n\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to establish "
          "communications with it. \n\"Lost Communication\" indicates that "
          "the Managed Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable."),
        ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Communication OK",
          "Lost Communication", "No Contact", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 CommunicationStatus;

        [Description (
          "A string that provides information on how the primary system owner "
          "can be reached (for example, phone number, e-mail address, and so "
          "on)."),
        MappingStrings { "MIF.DMTF|General Information|001.4"},
        MaxLen (256),
        Write (True)]
    string PrimaryOwnerContact;

        [Description (
          "DetailedStatus compliments PrimaryStatus with additional status "
          "detail. It consists of one of the following values: Not Available, "
          "No Additional Information, Stressed, Predictive Failure, Error, "
          "Non-Recoverable Error, SupportingEntityInError. Detailed status is "
          "used to expand upon the PrimaryStatus of the element. \nA Null "
          "return indicates the implementation (provider) does not implement "
          "this property. \n\"Not Available\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"No Additional Information\" indicates that the "
          "element is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are overload, "
          "overheated, and so on. \n\"Predictive Failure\" indicates that an "
          "element is functioning normally but a failure is predicted in the "
          "near future. \n\"Non-Recoverable Error \" indicates that this "
          "element is in an error condition that requires human intervention. "
          "\n\"Supporting Entity in Error\" indicates that this element might "
          "be \"OK\" but that another element, on which it is dependent, is "
          "in error. An example is a network service or endpoint that cannot "
          "function due to lower-layer networking problems."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.PrimaryStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.."},
        Values { "Not Available", "No Additional Information", "Stressed",
          "Predictive Failure", "Non-Recoverable Error",
          "Supporting Entity in Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 DetailedStatus;

        [ArrayType ("Indexed"),
        Description (
          "OtherIdentifyingInfo captures additional data, beyond System Name "
          "information, that could be used to identify a ComputerSystem. One "
          "example would be to hold the Fibre Channel World-Wide Name (WWN) "
          "of a node. Note that if only the Fibre Channel name is available "
          "and is unique (able to be used as the System key), then this "
          "property would be NULL and the WWN would become the System key, "
          "its data placed in the Name property."),
        MaxLen (256),
        ModelCorrespondence { "CIM_System.IdentifyingDescriptions"}]
    string OtherIdentifyingInfo[];

        [ArrayType ("Indexed"),
        Description (
          "An array of free-form strings providing explanations and details "
          "behind the entries in the OtherIdentifying Info array. Note, each "
          "entry of this array is related to the entry in "
          "OtherIdentifyingInfo that is located at the same index."),
        ModelCorrespondence { "CIM_System.OtherIdentifyingInfo"}]
    string IdentifyingDescriptions[];

        [ArrayType ("Indexed"),
        Description (
          "Indicates the current statuses of the element. Various operational "
          "statuses are defined. Many of the enumeration\'s values are "
          "self-explanatory. However, a few are not and are described here in "
          "more detail. \n\"Stressed\" indicates that the element is "
          "functioning, but needs attention. Examples of \"Stressed\" states "
          "are overload, overheated, and so on. \n\"Predictive Failure\" "
          "indicates that an element is functioning nominally but predicting "
          "a failure in the near future. \n\"In Service\" describes an "
          "element being configured, maintained, cleaned, or otherwise "
          "administered. \n\"No Contact\" indicates that the monitoring "
          "system has knowledge of this element, but has never been able to "
          "establish communications with it. \n\"Lost Communication\" "
          "indicates that the ManagedSystem Element is known to exist and has "
          "been contacted successfully in the past, but is currently "
          "unreachable. \n\"Stopped\" and \"Aborted\" are similar, although "
          "the former implies a clean and orderly stop, while the latter "
          "implies an abrupt stop where the state and configuration of the "
          "element might need to be updated. \n\"Dormant\" indicates that the "
          "element is inactive or quiesced. \n\"Supporting Entity in Error\" "
          "indicates that this element might be \"OK\" but that another "
          "element, on which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n\"Completed\" indicates that "
          "the element has completed its operation. This value should be "
          "combined with either OK, Error, or Degraded so that a client can "
          "tell if the complete operation Completed with OK (passed), "
          "Completed with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did not report "
          "an error). \n\"Power Mode\" indicates that the element has "
          "additional power model information contained in the Associated "
          "PowerManagementService association. \n\"Relocating\" indicates the "
          "element is being relocated.\nOperationalStatus replaces the Status "
          "property on ManagedSystemElement to provide a consistent approach "
          "to enumerations, to address implementation needs for an array "
          "property, and to provide a migration path from today\'s "
          "environment to the future. This change was not made earlier "
          "because it required the deprecated qualifier. Due to the "
          "widespread use of the existing Status property in management "
          "applications, it is strongly recommended that providers or "
          "instrumentation provide both the Status and OperationalStatus "
          "properties. Further, the first value of OperationalStatus should "
          "contain the primary status for the element. When instrumented, "
          "Status (because it is single-valued) should also provide the "
          "primary status of the element."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.StatusDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "..",
          "0x8000.."},
        Values { "Unknown", "Other", "OK", "Degraded", "Stressed",
          "Predictive Failure", "Error", "Non-Recoverable Error",
          "Starting", "Stopping", "Stopped", "In Service", "No Contact",
          "Lost Communication", "Aborted", "Dormant",
          "Supporting Entity in Error", "Completed", "Power Mode",
          "Relocating", "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperationalStatus[];

        [Description (
          "The name of the primary system owner. The system owner is the "
          "primary user of the system."),
        MappingStrings { "MIF.DMTF|General Information|001.3"},
        MaxLen (64),
        Write (True)]
    string PrimaryOwnerName;

        [ArrayType ("Indexed"),
        Description (
          "A string describing how or why the system is dedicated when the "
          "Dedicated array includes the value 2, \"Other\"."),
        ModelCorrespondence { "CIM_ComputerSystem.Dedicated"}]
    string OtherDedicatedDescriptions[];

        [Deprecated { "CIM_ManagedSystemElement.OperationalStatus"},
        Description (
          "A string indicating the current status of the object. Various "
          "operational and non-operational statuses are defined. This "
          "property is deprecated in lieu of OperationalStatus, which "
          "includes the same semantics in its enumeration. This change is "
          "made for 3 reasons: \n1) Status is more correctly defined as an "
          "array. This definition overcomes the limitation of describing "
          "status using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND Stopped. \n2) A "
          "MaxLen of 10 is too restrictive and leads to unclear enumerated "
          "values. \n3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 implementations used "
          "the string property and did not want to modify their code. "
          "Therefore, Status was grandfathered into the Schema. Use of the "
          "deprecated qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus."),
        MaxLen (10),
        ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail",
          "Starting", "Stopping", "Service", "Stressed", "NonRecover",
          "No Contact", "Lost Comm", "Stopped"}]
    string Status;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;

        [Description (
          "A datetime value that indicates when the object was installed. "
          "Lack of a value does not indicate that the object is not installed."),
        MappingStrings { "MIF.DMTF|ComponentID|001.5"}]
    datetime InstallDate;

        [Description (
          "An enumerated value indicating an administrator\'s default or "
          "startup configuration for the Enabled State of an element. By "
          "default, the element is \"Enabled\" (value=2)."),
        ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535"},
        Values { "Enabled", "Disabled", "Not Applicable",
          "Enabled but Offline", "No Default", "Quiesce",
          "DMTF Reserved", "Vendor Reserved"},
        Write (True)]
    uint16 EnabledDefault = 2;

        [Description (
          "EnabledState is an integer enumeration that indicates the enabled "
          "and disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down (value=4) and starting (value=10) are transient states "
          "between enabled and disabled. The following text briefly "
          "summarizes the various enabled and disabled states: \nEnabled (2) "
          "indicates that the element is or could be executing commands, will "
          "process any queued commands, and queues new requests. \nDisabled "
          "(3) indicates that the element will not execute commands and will "
          "drop any new requests. \nShutting Down (4) indicates that the "
          "element is in the process of going to a Disabled state. \nNot "
          "Applicable (5) indicates the element does not support being "
          "enabled or disabled. \nEnabled but Offline (6) indicates that the "
          "element might be completing commands, and will drop any new "
          "requests. \nTest (7) indicates that the element is in a test "
          "state. \nDeferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \nQuiesce "
          "(9) indicates that the element is enabled but in a restricted "
          "mode.\nStarting (10) indicates that the element is in the process "
          "of going to an Enabled state. New requests are queued."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.OtherEnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11..32767", "32768..65535"},
        Values { "Unknown", "Other", "Enabled", "Disabled",
          "Shutting Down", "Not Applicable", "Enabled but Offline",
          "In Test", "Deferred", "Quiesce", "Starting", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 EnabledState = 5;

        [Description (
          "The date or time when the EnabledState of the element last "
          "changed. If the state of the element has not changed and this "
          "property is populated, then it must be set to a 0 interval value. "
          "If a state change was requested, but rejected or not yet "
          "processed, the property must not be updated.")]
    datetime TimeOfLastStateChange;

        [Description (
          "CreationClassName indicates the name of the class or the subclass "
          "used in the creation of an instance. When used with the other key "
          "properties of this class, this property allows all instances of "
          "this class and its subclasses to be uniquely identified."),
        Key (True),
        MaxLen (256)]
    string CreationClassName;

        [Description (
          "PrimaryStatus provides a high level status value, intended to "
          "align with Red-Yellow-Green type representation of status. It "
          "should be used in conjunction with DetailedStatus to provide high "
          "level and detailed health status of the ManagedElement and its "
          "subcomponents. \nPrimaryStatus consists of one of the following "
          "values: Unknown, OK, Degraded or Error. \"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"OK\" indicates the "
          "ManagedElement is functioning normally. \n\"Degraded\" indicates "
          "the ManagedElement is functioning below normal. \n\"Error\" "
          "indicates the ManagedElement is in an Error condition."),
        ModelCorrespondence { "CIM_ManagedSystemElement.DetailedStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "..", "0x8000.."},
        Values { "Unknown", "OK", "Degraded", "Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 PrimaryStatus;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The inherited Name serves as the key of a System instance in an "
          "enterprise environment."),
        Key (True),
        MaxLen (256),
        Override ("Name")]
    string Name;

        [Description (
          "An array (bag) of strings that specifies the administrator "
          "-defined roles this System plays in the managed environment. "
          "Examples might be \'Building 8 print server\' or \'Boise user "
          "directories\'. A single system may perform multiple roles. \nNote "
          "that the instrumentation view of the \'roles\' of a System is "
          "defined by instantiating a specific subclass of System, or by "
          "properties in a subclass, or both. For example, the purpose of a "
          "ComputerSystem is defined using the Dedicated and "
          "OtherDedicatedDescription properties."),
        Write (True)]
    string Roles[];

        [Description (
          "A string that describes the enabled or disabled state of the "
          "element when the EnabledState property is set to 1 (\"Other\"). "
          "This property must be set to null when EnabledState is any value "
          "other than 1."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"}]
    string OtherEnabledState;

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "If enabled (value = 4), the ComputerSystem can be reset via "
          "hardware (e.g. the power and reset buttons). If disabled (value = "
          "3), hardware reset is not allowed. In addition to Enabled and "
          "Disabled, other Values for the property are also defined - \"Not "
          "Implemented\" (5), \"Other\" (1) and \"Unknown\" (2)."),
        MappingStrings { "MIF.DMTF|System Hardware Security|001.4"},
        ValueMap { "1", "2", "3", "4", "5"},
        Values { "Other", "Unknown", "Disabled", "Enabled",
          "Not Implemented"}]
    uint16 ResetCapability;

        [Description (
          "The ComputerSystem object and its derivatives are Top Level "
          "Objects of CIM. They provide the scope for numerous components. "
          "Having unique System keys is required. The NameFormat property "
          "identifies how the ComputerSystem Name is generated. The "
          "NameFormat ValueMap qualifier defines the various mechanisms for "
          "assigning the name. Note that another name can be assigned and "
          "used for the ComputerSystem that better suit a business, using the "
          "inherited ElementName property.\nIf the NameFormat is set to "
          "\"UUID\", then the Name property shall be a UUID in its canonical "
          "form consisting of 32 hexadecimal digits in 5 groups separated by "
          "hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 "
          "digits and 4 hyphens). For the first three fields, the most "
          "significant digit is on the left. The last two fields are treated "
          "as eight separate bytes, each having their most significant digit "
          "on the left, and they follow each other from left to right."),
        MaxLen (64),
        Override ("NameFormat"),
        ValueMap { "Other", "IP", "Dial", "HID", "NWA", "HWA", "X25",
          "ISDN", "IPX", "DCC", "ICD", "E.164", "SNA", "OID/OSI", "WWN",
          "NAA", "UUID"}]
    string NameFormat;

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Description (
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for providing "
          "more detail with respect to the value of EnabledState. It can also "
          "provide the transitional states when an element is transitioning "
          "from one state to another, such as when an element is "
          "transitioning between EnabledState and RequestedState, as well as "
          "other transitional conditions.\nOperatingStatus consists of one of "
          "the following values: Unknown, Not Available, In Service, "
          "Starting, Stopping, Stopped, Aborted, Dormant, Completed, "
          "Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"None\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n\"Starting\" "
          "describes an element being initialized. \n\"Stopping\" describes "
          "an element being brought to an orderly stop. \n\"Stopped\" and "
          "\"Aborted\" are similar, although the former implies a clean and "
          "orderly stop, while the latter implies an abrupt stop where the "
          "state and configuration of the element might need to be updated. "
          "\n\"Dormant\" indicates that the element is inactive or quiesced. "
          "\n\"Completed\" indicates that the element has completed its "
          "operation. This value should be combined with either OK, Error, or "
          "Degraded in the PrimaryStatus so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed with "
          "Error (failed), or Completed with Degraded (the operation "
          "finished, but it did not complete OK or did not report an error). "
          "\n\"Migrating\" element is being moved between host elements. "
          "\n\"Immigrating\" element is being moved to new host element. "
          "\n\"Emigrating\" element is being moved away from host element. "
          "\n\"Shutting Down\" describes an element being brought to an "
          "abrupt stop. \n\"In Test\" element is performing test functions. "
          "\n\"Transitioning\" describes an element that is between states, "
          "that is, it is not fully available in either its previous state or "
          "its next state. This value should be used if other values "
          "indicating a transition to a specific state are not "
          "applicable.\n\"In Service\" describes an element that is in "
          "service and operational."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Servicing", "Starting",
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed",
          "Migrating", "Emigrating", "Immigrating", "Snapshotting",
          "Shutting Down", "In Test", "Transitioning", "In Service",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperatingStatus;

        [Deprecated { "CIM_PowerManagementCapabilities.PowerCapabilities"},
        Description (
          "An enumerated array describing the power management capabilities "
          "of the ComputerSystem. The use of this property has been "
          "deprecated. Instead, the Power Capabilites property in an "
          "associated PowerManagement Capabilities class should be used."),
        MappingStrings { "MIF.DMTF|System Power Controls|001.2"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7"},
        Values { "Unknown", "Not Supported", "Disabled", "Enabled",
          "Power Saving Modes Entered Automatically",
          "Power State Settable", "Power Cycling Supported",
          "Timed Power On Supported"}]
    uint16 PowerManagementCapabilities[];

        [Description (
          "AvailableRequestedStates indicates the possible values for the "
          "RequestedState parameter of the method RequestStateChange, used to "
          "initiate a state change. The values listed shall be a subset of "
          "the values contained in the RequestedStatesSupported property of "
          "the associated instance of CIM_EnabledLogicalElementCapabilities "
          "where the values selected are a function of the current state of "
          "the CIM_EnabledLogicalElement. This property may be non-null if an "
          "implementation is able to advertise the set of possible values as "
          "a function of the current state. This property shall be null if an "
          "implementation is unable to determine the set of possible values "
          "as a function of the current state."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported"},
        ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".."},
        Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
          "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved"}]
    uint16 AvailableRequestedStates[];

        [Description (
          "Requests that the state of the element be changed to the value "
          "specified in the RequestedState parameter. When the requested "
          "state change takes place, the EnabledState and RequestedState of "
          "the element will be the same. Invoking the RequestStateChange "
          "method multiple times could result in earlier requests being "
          "overwritten or lost. \nA return code of 0 shall indicate the state "
          "change was successfully initiated. \nA return code of 3 shall "
          "indicate that the state transition cannot complete within the "
          "interval specified by the TimeoutPeriod parameter. \nA return code "
          "of 4096 (0x1000) shall indicate the state change was successfully "
          "initiated, a ConcreteJob has been created, and its reference "
          "returned in the output parameter Job. Any other return code "
          "indicates an error condition."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535"},
        Values { "Completed with No Error", "Not Supported",
          "Unknown or Unspecified Error",
          "Cannot complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Job Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific"}]
    uint32 RequestStateChange(
          [Description (
            "The state requested for the element. This information will be "
            "placed into the RequestedState property of the instance if the "
            "return code of the RequestStateChange method is 0 (\'Completed "
            "with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to "
            "the description of the EnabledState and RequestedState "
            "properties for the detailed explanations of the RequestedState "
            "values."),
          IN (True),
          ModelCorrespondence {
            "CIM_EnabledLogicalElement.RequestedState"},
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", "..",
            "32768..65535"},
          Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
            "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved",
            "Vendor Reserved"}]
        uint16 RequestedState,
          [Description (
            "May contain a reference to the ConcreteJob created to track the "
            "state transition initiated by the method invocation."),
          IN (False),
          OUT (True)]
        CIM_ConcreteJob REF Job,
          [Description (
            "A timeout period that specifies the maximum amount of time that "
            "the client expects the transition to the new state to take. The "
            "interval format must be used to specify the TimeoutPeriod. A "
            "value of 0 or a null parameter indicates that the client has no "
            "time requirements for the transition. \nIf this property does "
            "not contain 0 or null and the implementation does not support "
            "this parameter, a return code of \'Use Of Timeout Parameter Not "
            "Supported\' shall be returned."),
          IN (True)]
        datetime TimeoutPeriod);

        [Deprecated { "CIM_PowerManagementService.SetPowerState"},
        Description (
          "Sets the power state of the computer. The use of this method has "
          "been deprecated. Instead, use the SetPowerState method in the "
          "associated PowerManagementService class.")]
    uint32 SetPowerState(
          [Description ("The Desired state for the COmputerSystem."),
          ValueMap { "1", "2", "3", "4", "5", "6", "7", "8"},
          Values { "Full Power", "Power Save - Low Power Mode",
            "Power Save - Standby", "Power Save - Other", "Power Cycle",
            "Power Off", "Hibernate", "Soft Off"}]
        uint32 PowerState,
          [Description (
            "Time indicates when the power state should be set, either as a "
            "regular date-time value or as an interval value (where the "
            "interval begins when the method invocation is received.")]
        datetime Time);
};

    [Deprecated { "CIM_ComputerSystem", "CIM_StorageLibraryCapabilities"},
    Description (
      "A StorageLibrary is a collection of ManagedSystemElements that operate "
      "together to provide cartridge library capabilities. This object serves "
      "as an aggregation point to group the following elements: "
      "MediaTransferDevices, a Label Reader, a library Door, "
      "MediaAccessDevices, and other Library components. \nThe use of this "
      "class is deprecated in favor of CIM_ComputerSystem. Originally it was "
      "felt that a media library could be purely mechanical and thus not a "
      "ComputerSystem. However all manageable libraries are ComputerSystems. "
      "This change simplifies the use of the model by client software."),
    UMLPackagePath ("CIM::Device::StorageLib"),
    Version ("2.9.0")]
class CIM_StorageLibrary : CIM_System {

        [Description (
          "RequestedState is an integer enumeration that indicates the last "
          "requested or desired state for the element, irrespective of the "
          "mechanism through which it was requested. The actual state of the "
          "element is represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or disabled "
          "states. Note that when EnabledState is set to 5 (\"Not "
          "Applicable\"), then this property has no meaning. Refer to the "
          "EnabledState property description for explanations of the values "
          "in the RequestedState enumeration. \n\"Unknown\" (0) indicates the "
          "last requested state for the element is unknown.\nNote that the "
          "value \"No Change\" (5) has been deprecated in lieu of indicating "
          "the last requested state is \"Unknown\" (0). If the last requested "
          "or desired state is unknown, RequestedState should have the value "
          "\"Unknown\" (0), but may have the value \"No Change\" (5).Offline "
          "(6) indicates that the element has been requested to transition to "
          "the Enabled but Offline EnabledState. \nIt should be noted that "
          "there are two new values in RequestedState that build on the "
          "statuses of EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then moving to an "
          "\"Enabled\" state. Reset indicates that the element is first "
          "\"Disabled\" and then \"Enabled\". The distinction between "
          "requesting \"Shut Down\" and \"Disabled\" should also be noted. "
          "Shut Down requests an orderly transition to the Disabled state, "
          "and might involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate disabling of the "
          "element, such that it will not execute or accept any commands or "
          "processing requests. \n\nThis property is set as the result of a "
          "method invocation (such as Start or StopService on CIM_Service), "
          "or can be overridden and defined as WRITEable in a subclass. The "
          "method approach is considered superior to a WRITEable property, "
          "because it allows an explicit invocation of the operation and the "
          "return of a result code. \n\nIf knowledge of the last "
          "RequestedState is not supported for the EnabledLogicalElement, the "
          "property shall be NULL or have the value 12 \"Not Applicable\"."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "..", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Deferred", "Quiesce",
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 RequestedState = 12;

        [Description (
          "Indicates the current health of the element. This attribute "
          "expresses the health of this element but not necessarily that of "
          "its subcomponents. The possible values are 0 to 30, where 5 means "
          "the element is entirely healthy and 30 means the element is "
          "completely non-functional. The following continuum is defined: "
          "\n\"Non-recoverable Error\" (30) - The element has completely "
          "failed, and recovery is not possible. All functionality provided "
          "by this element has been lost. \n\"Critical Failure\" (25) - The "
          "element is non-functional and recovery might not be possible. "
          "\n\"Major Failure\" (20) - The element is failing. It is possible "
          "that some or all of the functionality of this component is "
          "degraded or not working. \n\"Minor Failure\" (15) - All "
          "functionality is available but some might be degraded. "
          "\n\"Degraded/Warning\" (10) - The element is in working order and "
          "all functionality is provided. However, the element is not working "
          "to the best of its abilities. For example, the element might not "
          "be operating at optimal performance or it might be reporting "
          "recoverable errors. \n\"OK\" (5) - The element is fully functional "
          "and is operating within normal operational parameters and without "
          "error. \n\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \nDMTF has reserved the unused portion "
          "of the continuum for additional HealthStates in the future."),
        ValueMap { "0", "5", "10", "15", "20", "25", "30", "..",
          "32768..65535"},
        Values { "Unknown", "OK", "Degraded/Warning", "Minor failure",
          "Major failure", "Critical failure", "Non-recoverable error",
          "DMTF Reserved", "Vendor Specific"}]
    uint16 HealthState;

        [ArrayType ("Indexed"),
        Description (
          "Strings describing the various OperationalStatus array values. For "
          "example, if \"Stopping\" is the value assigned to "
          "OperationalStatus, then this property may contain an explanation "
          "as to why an object is being stopped. Note that entries in this "
          "array are correlated with those at the same array index in "
          "OperationalStatus."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"}]
    string StatusDescriptions[];

        [Description (
          "TransitioningToState indicates the target state to which the "
          "instance is transitioning. \nA value of 5 \"No Change\" shall "
          "indicate that no transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not support "
          "representing ongoing transitions. \nA value other than 5 or 12 "
          "shall identify the state to which the element is in the process of "
          "transitioning."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElement.RequestedState",
          "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", ".."},
        Values { "Unknown", "Enabled", "Disabled", "Shut Down",
          "No Change", "Offline", "Test", "Defer", "Quiesce", "Reboot",
          "Reset", "Not Applicable", "DMTF Reserved"}]
    uint16 TransitioningToState = 12;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 11 (\'In Service\').\nBoolean set to TRUE if an audit of "
          "the location of some or all of the Library\'s PhysicalMedia is "
          "currently being performed. That an individual Changer is currently "
          "doing an audit is indicated by a similar AuditInProgress boolean "
          "property on the Changer object.")]
    boolean AuditInProgress;

        [Description (
          "CommunicationStatus indicates the ability of the instrumentation "
          "to communicate with the underlying ManagedElement. "
          "CommunicationStatus consists of one of the following values: "
          "Unknown, None, Communication OK, Lost Communication, or No "
          "Contact. \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"Not Available\" indicates "
          "that the implementation (provider) is capable of returning a value "
          "for this property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any quality of "
          "service. \n\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to establish "
          "communications with it. \n\"Lost Communication\" indicates that "
          "the Managed Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable."),
        ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Communication OK",
          "Lost Communication", "No Contact", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 CommunicationStatus;

        [Description (
          "A string that provides information on how the primary system owner "
          "can be reached (for example, phone number, e-mail address, and so "
          "on)."),
        MappingStrings { "MIF.DMTF|General Information|001.4"},
        MaxLen (256),
        Write (True)]
    string PrimaryOwnerContact;

        [Description (
          "DetailedStatus compliments PrimaryStatus with additional status "
          "detail. It consists of one of the following values: Not Available, "
          "No Additional Information, Stressed, Predictive Failure, Error, "
          "Non-Recoverable Error, SupportingEntityInError. Detailed status is "
          "used to expand upon the PrimaryStatus of the element. \nA Null "
          "return indicates the implementation (provider) does not implement "
          "this property. \n\"Not Available\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"No Additional Information\" indicates that the "
          "element is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are overload, "
          "overheated, and so on. \n\"Predictive Failure\" indicates that an "
          "element is functioning normally but a failure is predicted in the "
          "near future. \n\"Non-Recoverable Error \" indicates that this "
          "element is in an error condition that requires human intervention. "
          "\n\"Supporting Entity in Error\" indicates that this element might "
          "be \"OK\" but that another element, on which it is dependent, is "
          "in error. An example is a network service or endpoint that cannot "
          "function due to lower-layer networking problems."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.PrimaryStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.."},
        Values { "Not Available", "No Additional Information", "Stressed",
          "Predictive Failure", "Non-Recoverable Error",
          "Supporting Entity in Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 DetailedStatus;

        [ArrayType ("Indexed"),
        Description (
          "OtherIdentifyingInfo captures additional data, beyond System Name "
          "information, that could be used to identify a ComputerSystem. One "
          "example would be to hold the Fibre Channel World-Wide Name (WWN) "
          "of a node. Note that if only the Fibre Channel name is available "
          "and is unique (able to be used as the System key), then this "
          "property would be NULL and the WWN would become the System key, "
          "its data placed in the Name property."),
        MaxLen (256),
        ModelCorrespondence { "CIM_System.IdentifyingDescriptions"}]
    string OtherIdentifyingInfo[];

        [Description (
          "The Caption property is a short textual description (one- line "
          "string) of the object."),
        MaxLen (64)]
    string Caption;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 10 (\'Stopped\').\nBoolean indicating whether the "
          "Library\'s robotics are currently active/enabled. If TRUE, then "
          "the Library may not be safe for a human to enter.")]
    boolean RoboticsEnabled;

        [ArrayType ("Indexed"),
        Description (
          "An array of free-form strings providing explanations and details "
          "behind the entries in the OtherIdentifying Info array. Note, each "
          "entry of this array is related to the entry in "
          "OtherIdentifyingInfo that is located at the same index."),
        ModelCorrespondence { "CIM_System.OtherIdentifyingInfo"}]
    string IdentifyingDescriptions[];

        [Description (
          "Capabilities of the StorageLibrary. For example, it can be "
          "indicated that the Library can perform automatic cleaning of the "
          "MediaAccessDevices contained in it (value=1) or that the Library "
          "provides physical door access for an operator (value=2)."),
        ValueMap { "0", "2", "3", "4"},
        Values { "Unknown", "Automatic Cleaning", "Manual Operation",
          "Front Panel Lockable"}]
    uint16 Capabilities[];

        [ArrayType ("Indexed"),
        Description (
          "Indicates the current statuses of the element. Various operational "
          "statuses are defined. Many of the enumeration\'s values are "
          "self-explanatory. However, a few are not and are described here in "
          "more detail. \n\"Stressed\" indicates that the element is "
          "functioning, but needs attention. Examples of \"Stressed\" states "
          "are overload, overheated, and so on. \n\"Predictive Failure\" "
          "indicates that an element is functioning nominally but predicting "
          "a failure in the near future. \n\"In Service\" describes an "
          "element being configured, maintained, cleaned, or otherwise "
          "administered. \n\"No Contact\" indicates that the monitoring "
          "system has knowledge of this element, but has never been able to "
          "establish communications with it. \n\"Lost Communication\" "
          "indicates that the ManagedSystem Element is known to exist and has "
          "been contacted successfully in the past, but is currently "
          "unreachable. \n\"Stopped\" and \"Aborted\" are similar, although "
          "the former implies a clean and orderly stop, while the latter "
          "implies an abrupt stop where the state and configuration of the "
          "element might need to be updated. \n\"Dormant\" indicates that the "
          "element is inactive or quiesced. \n\"Supporting Entity in Error\" "
          "indicates that this element might be \"OK\" but that another "
          "element, on which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n\"Completed\" indicates that "
          "the element has completed its operation. This value should be "
          "combined with either OK, Error, or Degraded so that a client can "
          "tell if the complete operation Completed with OK (passed), "
          "Completed with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did not report "
          "an error). \n\"Power Mode\" indicates that the element has "
          "additional power model information contained in the Associated "
          "PowerManagementService association. \n\"Relocating\" indicates the "
          "element is being relocated.\nOperationalStatus replaces the Status "
          "property on ManagedSystemElement to provide a consistent approach "
          "to enumerations, to address implementation needs for an array "
          "property, and to provide a migration path from today\'s "
          "environment to the future. This change was not made earlier "
          "because it required the deprecated qualifier. Due to the "
          "widespread use of the existing Status property in management "
          "applications, it is strongly recommended that providers or "
          "instrumentation provide both the Status and OperationalStatus "
          "properties. Further, the first value of OperationalStatus should "
          "contain the primary status for the element. When instrumented, "
          "Status (because it is single-valued) should also provide the "
          "primary status of the element."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.StatusDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "..",
          "0x8000.."},
        Values { "Unknown", "Other", "OK", "Degraded", "Stressed",
          "Predictive Failure", "Error", "Non-Recoverable Error",
          "Starting", "Stopping", "Stopped", "In Service", "No Contact",
          "Lost Communication", "Aborted", "Dormant",
          "Supporting Entity in Error", "Completed", "Power Mode",
          "Relocating", "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperationalStatus[];

        [Description (
          "The name of the primary system owner. The system owner is the "
          "primary user of the system."),
        MappingStrings { "MIF.DMTF|General Information|001.3"},
        MaxLen (64),
        Write (True)]
    string PrimaryOwnerName;

        [Deprecated { "CIM_ManagedSystemElement.OperationalStatus"},
        Description (
          "A string indicating the current status of the object. Various "
          "operational and non-operational statuses are defined. This "
          "property is deprecated in lieu of OperationalStatus, which "
          "includes the same semantics in its enumeration. This change is "
          "made for 3 reasons: \n1) Status is more correctly defined as an "
          "array. This definition overcomes the limitation of describing "
          "status using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND Stopped. \n2) A "
          "MaxLen of 10 is too restrictive and leads to unclear enumerated "
          "values. \n3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 implementations used "
          "the string property and did not want to modify their code. "
          "Therefore, Status was grandfathered into the Schema. Use of the "
          "deprecated qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus."),
        MaxLen (10),
        ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail",
          "Starting", "Stopping", "Service", "Stressed", "NonRecover",
          "No Contact", "Lost Comm", "Stopped"}]
    string Status;

        [Description (
          "The Description property provides a textual description of the "
          "object.")]
    string Description;

        [Description (
          "A datetime value that indicates when the object was installed. "
          "Lack of a value does not indicate that the object is not installed."),
        MappingStrings { "MIF.DMTF|ComponentID|001.5"}]
    datetime InstallDate;

        [Description (
          "An enumerated value indicating an administrator\'s default or "
          "startup configuration for the Enabled State of an element. By "
          "default, the element is \"Enabled\" (value=2)."),
        ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535"},
        Values { "Enabled", "Disabled", "Not Applicable",
          "Enabled but Offline", "No Default", "Quiesce",
          "DMTF Reserved", "Vendor Reserved"},
        Write (True)]
    uint16 EnabledDefault = 2;

        [Description (
          "EnabledState is an integer enumeration that indicates the enabled "
          "and disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down (value=4) and starting (value=10) are transient states "
          "between enabled and disabled. The following text briefly "
          "summarizes the various enabled and disabled states: \nEnabled (2) "
          "indicates that the element is or could be executing commands, will "
          "process any queued commands, and queues new requests. \nDisabled "
          "(3) indicates that the element will not execute commands and will "
          "drop any new requests. \nShutting Down (4) indicates that the "
          "element is in the process of going to a Disabled state. \nNot "
          "Applicable (5) indicates the element does not support being "
          "enabled or disabled. \nEnabled but Offline (6) indicates that the "
          "element might be completing commands, and will drop any new "
          "requests. \nTest (7) indicates that the element is in a test "
          "state. \nDeferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \nQuiesce "
          "(9) indicates that the element is enabled but in a restricted "
          "mode.\nStarting (10) indicates that the element is in the process "
          "of going to an Enabled state. New requests are queued."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.OtherEnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11..32767", "32768..65535"},
        Values { "Unknown", "Other", "Enabled", "Disabled",
          "Shutting Down", "Not Applicable", "Enabled but Offline",
          "In Test", "Deferred", "Quiesce", "Starting", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 EnabledState = 5;

        [Description (
          "The date or time when the EnabledState of the element last "
          "changed. If the state of the element has not changed and this "
          "property is populated, then it must be set to a 0 interval value. "
          "If a state change was requested, but rejected or not yet "
          "processed, the property must not be updated.")]
    datetime TimeOfLastStateChange;

        [Deprecated { "No value"},
        Description (
          "This property is deprecated since all managed libraries willbe "
          "automated.\nBoolean set to TRUE if the Library includes a robotics "
          "mechanism that can be controlled by a ComputerSystem, to "
          "automatically load and unload PhysicalMedia to/from "
          "MediaAccessDevices and StorageMediaLocations. The property is set "
          "to FALSE if the Library represents a repository of Media that are "
          "inaccessible to a MediaAccess Device without human intervention. "
          "An example of a non- automated Library is a \'shelf\' or \'vault\' "
          "where Physical Media are kept for extended periods of time.")]
    boolean Automated;

        [Description (
          "CreationClassName indicates the name of the class or the subclass "
          "used in the creation of an instance. When used with the other key "
          "properties of this class, this property allows all instances of "
          "this class and its subclasses to be uniquely identified."),
        Key (True),
        MaxLen (256)]
    string CreationClassName;

        [Description (
          "PrimaryStatus provides a high level status value, intended to "
          "align with Red-Yellow-Green type representation of status. It "
          "should be used in conjunction with DetailedStatus to provide high "
          "level and detailed health status of the ManagedElement and its "
          "subcomponents. \nPrimaryStatus consists of one of the following "
          "values: Unknown, OK, Degraded or Error. \"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"OK\" indicates the "
          "ManagedElement is functioning normally. \n\"Degraded\" indicates "
          "the ManagedElement is functioning below normal. \n\"Error\" "
          "indicates the ManagedElement is in an Error condition."),
        ModelCorrespondence { "CIM_ManagedSystemElement.DetailedStatus",
          "CIM_ManagedSystemElement.HealthState"},
        ValueMap { "0", "1", "2", "3", "..", "0x8000.."},
        Values { "Unknown", "OK", "Degraded", "Error", "DMTF Reserved",
          "Vendor Reserved"}]
    uint16 PrimaryStatus;

        [Description (
          "A user-friendly name for the object. This property allows each "
          "instance to define a user-friendly name in addition to its key "
          "properties, identity data, and description information. \nNote "
          "that the Name property of ManagedSystemElement is also defined as "
          "a user-friendly name. But, it is often subclassed to be a Key. It "
          "is not reasonable that the same property can convey both identity "
          "and a user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of LogicalDevice), "
          "the same information can be present in both the Name and "
          "ElementName properties. Note that if there is an associated "
          "instance of CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask and "
          "MaxElementNameLen properties defined in that class.")]
    string ElementName;

        [Description (
          "The inherited Name serves as the key of a System instance in an "
          "enterprise environment."),
        Key (True),
        MaxLen (256),
        Override ("Name")]
    string Name;

        [Description (
          "An array (bag) of strings that specifies the administrator "
          "-defined roles this System plays in the managed environment. "
          "Examples might be \'Building 8 print server\' or \'Boise user "
          "directories\'. A single system may perform multiple roles. \nNote "
          "that the instrumentation view of the \'roles\' of a System is "
          "defined by instantiating a specific subclass of System, or by "
          "properties in a subclass, or both. For example, the purpose of a "
          "ComputerSystem is defined using the Dedicated and "
          "OtherDedicatedDescription properties."),
        Write (True)]
    string Roles[];

        [Description (
          "A string that describes the enabled or disabled state of the "
          "element when the EnabledState property is set to 1 (\"Other\"). "
          "This property must be set to null when EnabledState is any value "
          "other than 1."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"}]
    string OtherEnabledState;

        [Description (
          "InstanceID is an optional property that may be used to opaquely "
          "and uniquely identify an instance of this class within the scope "
          "of the instantiating Namespace. Various subclasses of this class "
          "may override this property to make it required, or a key. Such "
          "subclasses may also modify the preferred algorithms for ensuring "
          "uniqueness that are defined below.\nTo ensure uniqueness within "
          "the NameSpace, the value of InstanceID should be constructed using "
          "the following \"preferred\" algorithm: \n<OrgID>:<LocalID> \nWhere "
          "<OrgID> and <LocalID> are separated by a colon (:), and where "
          "<OrgID> must include a copyrighted, trademarked, or otherwise "
          "unique name that is owned by the business entity that is creating "
          "or defining the InstanceID or that is a registered ID assigned to "
          "the business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> structure "
          "of Schema class names.) In addition, to ensure uniqueness, <OrgID> "
          "must not contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> and "
          "<LocalID>. \n<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying (real-world) "
          "elements. If not null and the above \"preferred\" algorithm is not "
          "used, the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by this "
          "or other providers for the NameSpace of this instance. \nIf not "
          "set to null for DMTF-defined instances, the \"preferred\" "
          "algorithm must be used with the <OrgID> set to CIM.")]
    string InstanceID;

        [Description (
          "Maximum time in seconds that it takes for the Storage Library to "
          "perform a complete audit of each StorageMedia Location, to "
          "determine the absence or presence of a Physical Media. If "
          "automated support is not provided, then this property\'s value is "
          "undefined."),
        PUnit ("second"),
        Units ("Seconds")]
    uint64 MaxAuditTime;

        [Description (
          "The System object and its derivatives are top-level objects of "
          "CIM. They provide the scope for numerous components. Having unique "
          "System keys is required. A heuristic can be defined in individual "
          "System subclasses to attempt to always generate the same System "
          "Name Key. The NameFormat property identifies how the System name "
          "was generated, using the heuristic of the subclass."),
        MaxLen (64)]
    string NameFormat;

        [Description (
          "AvailableRequestedStates indicates the possible values for the "
          "RequestedState parameter of the method RequestStateChange, used to "
          "initiate a state change. The values listed shall be a subset of "
          "the values contained in the RequestedStatesSupported property of "
          "the associated instance of CIM_EnabledLogicalElementCapabilities "
          "where the values selected are a function of the current state of "
          "the CIM_EnabledLogicalElement. This property may be non-null if an "
          "implementation is able to advertise the set of possible values as "
          "a function of the current state. This property shall be null if an "
          "implementation is unable to determine the set of possible values "
          "as a function of the current state."),
        ModelCorrespondence {
          "CIM_EnabledLogicalElement.RequestStateChange",
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported"},
        ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".."},
        Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
          "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved"}]
    uint16 AvailableRequestedStates[];

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 4 (\'stressed\').\nBoolean set to TRUE if there are more "
          "PhysicalMedia in a Library than there are StorageMediaLocations to "
          "contain them. For instance, if all MediaAccessDevices have a Media "
          "loaded in them, and all StorageMediaLocations are loaded by an "
          "operator, then an Overfilled condition exists.")]
    boolean Overfilled;

        [Description (
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for providing "
          "more detail with respect to the value of EnabledState. It can also "
          "provide the transitional states when an element is transitioning "
          "from one state to another, such as when an element is "
          "transitioning between EnabledState and RequestedState, as well as "
          "other transitional conditions.\nOperatingStatus consists of one of "
          "the following values: Unknown, Not Available, In Service, "
          "Starting, Stopping, Stopped, Aborted, Dormant, Completed, "
          "Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \nA Null return indicates the implementation (provider) "
          "does not implement this property. \n\"Unknown\" indicates the "
          "implementation is in general capable of returning this property, "
          "but is unable to do so at this time. \n\"None\" indicates that the "
          "implementation (provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not used "
          "because it adds no meaningful information (as in the case of a "
          "property that is intended to add additional info to another "
          "property). \n\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n\"Starting\" "
          "describes an element being initialized. \n\"Stopping\" describes "
          "an element being brought to an orderly stop. \n\"Stopped\" and "
          "\"Aborted\" are similar, although the former implies a clean and "
          "orderly stop, while the latter implies an abrupt stop where the "
          "state and configuration of the element might need to be updated. "
          "\n\"Dormant\" indicates that the element is inactive or quiesced. "
          "\n\"Completed\" indicates that the element has completed its "
          "operation. This value should be combined with either OK, Error, or "
          "Degraded in the PrimaryStatus so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed with "
          "Error (failed), or Completed with Degraded (the operation "
          "finished, but it did not complete OK or did not report an error). "
          "\n\"Migrating\" element is being moved between host elements. "
          "\n\"Immigrating\" element is being moved to new host element. "
          "\n\"Emigrating\" element is being moved away from host element. "
          "\n\"Shutting Down\" describes an element being brought to an "
          "abrupt stop. \n\"In Test\" element is performing test functions. "
          "\n\"Transitioning\" describes an element that is between states, "
          "that is, it is not fully available in either its previous state or "
          "its next state. This value should be used if other values "
          "indicating a transition to a specific state are not "
          "applicable.\n\"In Service\" describes an element that is in "
          "service and operational."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "..", "0x8000.."},
        Values { "Unknown", "Not Available", "Servicing", "Starting",
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed",
          "Migrating", "Emigrating", "Immigrating", "Snapshotting",
          "Shutting Down", "In Test", "Transitioning", "In Service",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 OperatingStatus;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 0 (\'Unknown\').\nBoolean set to TRUE if the Library can "
          "not currently report the correct state of each PhysicalMedia "
          "within its proper StorageMediaLocation.")]
    boolean AuditNeeded;

        [Description (
          "Requests that the state of the element be changed to the value "
          "specified in the RequestedState parameter. When the requested "
          "state change takes place, the EnabledState and RequestedState of "
          "the element will be the same. Invoking the RequestStateChange "
          "method multiple times could result in earlier requests being "
          "overwritten or lost. \nA return code of 0 shall indicate the state "
          "change was successfully initiated. \nA return code of 3 shall "
          "indicate that the state transition cannot complete within the "
          "interval specified by the TimeoutPeriod parameter. \nA return code "
          "of 4096 (0x1000) shall indicate the state change was successfully "
          "initiated, a ConcreteJob has been created, and its reference "
          "returned in the output parameter Job. Any other return code "
          "indicates an error condition."),
        ModelCorrespondence { "CIM_EnabledLogicalElement.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535"},
        Values { "Completed with No Error", "Not Supported",
          "Unknown or Unspecified Error",
          "Cannot complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Job Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific"}]
    uint32 RequestStateChange(
          [Description (
            "The state requested for the element. This information will be "
            "placed into the RequestedState property of the instance if the "
            "return code of the RequestStateChange method is 0 (\'Completed "
            "with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to "
            "the description of the EnabledState and RequestedState "
            "properties for the detailed explanations of the RequestedState "
            "values."),
          IN (True),
          ModelCorrespondence {
            "CIM_EnabledLogicalElement.RequestedState"},
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", "..",
            "32768..65535"},
          Values { "Enabled", "Disabled", "Shut Down", "Offline", "Test",
            "Defer", "Quiesce", "Reboot", "Reset", "DMTF Reserved",
            "Vendor Reserved"}]
        uint16 RequestedState,
          [Description (
            "May contain a reference to the ConcreteJob created to track the "
            "state transition initiated by the method invocation."),
          IN (False),
          OUT (True)]
        CIM_ConcreteJob REF Job,
          [Description (
            "A timeout period that specifies the maximum amount of time that "
            "the client expects the transition to the new state to take. The "
            "interval format must be used to specify the TimeoutPeriod. A "
            "value of 0 or a null parameter indicates that the client has no "
            "time requirements for the transition. \nIf this property does "
            "not contain 0 or null and the implementation does not support "
            "this parameter, a return code of \'Use Of Timeout Parameter Not "
            "Supported\' shall be returned."),
          IN (True)]
        datetime TimeoutPeriod);

        [Deprecated { "CIM_ComputerSystem.RequestStateChange"},
        Description (
          "Requests that the Library robotics be enabled for automated "
          "operation (input parameter, Enabled, set to TRUE), or disabled for "
          "manual operation (input parameter set to FALSE). The return value "
          "should be 0 if the request was successfully executed, 1 if the "
          "request is not supported and some other value if an error "
          "occurred. In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The strings "
          "to which the ValueMap contents are \'translated\' may also be "
          "specified in the subclass as a Values array qualifier.")]
    uint32 EnableRobotics(
          [Description ("Set TRUE to enable."),
          IN (True)]
        boolean Enable);
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class enumerate CIM_System --localonly
===== Command Result
    [Description (
      "This is a special grouping of ManagedSystemElements. The grouping is "
      "viewed as a single entity, reflecting that all of its components are "
      "administered similarly, either by the same user, group of users, or "
      "policy. It serves as an aggregation point to associate one or more of "
      "the following elements: network devices, such as routers and switches, "
      "servers, and other resources that can be accessed by end systems. This "
      "grouping of devices plays an essential role in ensuring that the same "
      "administrative policy and actions are applied to all of the devices in "
      "the grouping. The specific behavior and/or semantics of the "
      "AdminDomain can be identified through its aggregated and associated "
      "entities."),
    UMLPackagePath ("CIM::Core::CoreElements"),
    Version ("2.10.0")]
class CIM_AdminDomain : CIM_System {

        [Description (
          "The NameFormat property identifies how the Name of the AdminDomain "
          "is generated, using the heuristic specified in the CIM V2 System "
          "Model specification. The property assumes that to determine and "
          "assign a Name the documented rules are traversed in order. The "
          "NameFormat Values list defines the precedence order for assigning "
          "the Name of the AdminDomain. \n\n\"FC\" has been deprecated and "
          "replaced by \"WWN\" to be consistent with the other ValueMaps."),
        ModelCorrespondence { "CIM_AdminDomain.Name"},
        Override ("NameFormat"),
        ValueMap { "Other", "AS", "NAP", "NOC", "POP", "RNP", "IP", "IPX",
          "SNA", "Dial", "WAN", "LAN", "ISDN", "Frame Relay", "ATM",
          "E.164", "IB", "FC", "Policy Repository", "WWN"},
        Values { "Other", "Autonomous System", "Network Access Provider",
          "Network Operations Center", "Point of Presence",
          "Regional Network Provider", "IP", "IPX", "SNA", "Dial", "WAN",
          "LAN", "ISDN", "Frame Relay", "ATM", "E.164", "Infiniband",
          "Fibre Channel", "Policy Repository",
          "Fibre Channel Worldwide Name"}]
    string NameFormat;
};

    [Deprecated { "CIM_ComputerSystem", "CIM_StorageLibraryCapabilities"},
    Description (
      "A StorageLibrary is a collection of ManagedSystemElements that operate "
      "together to provide cartridge library capabilities. This object serves "
      "as an aggregation point to group the following elements: "
      "MediaTransferDevices, a Label Reader, a library Door, "
      "MediaAccessDevices, and other Library components. \nThe use of this "
      "class is deprecated in favor of CIM_ComputerSystem. Originally it was "
      "felt that a media library could be purely mechanical and thus not a "
      "ComputerSystem. However all manageable libraries are ComputerSystems. "
      "This change simplifies the use of the model by client software."),
    UMLPackagePath ("CIM::Device::StorageLib"),
    Version ("2.9.0")]
class CIM_StorageLibrary : CIM_System {

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 4 (\'stressed\').\nBoolean set to TRUE if there are more "
          "PhysicalMedia in a Library than there are StorageMediaLocations to "
          "contain them. For instance, if all MediaAccessDevices have a Media "
          "loaded in them, and all StorageMediaLocations are loaded by an "
          "operator, then an Overfilled condition exists.")]
    boolean Overfilled;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 10 (\'Stopped\').\nBoolean indicating whether the "
          "Library\'s robotics are currently active/enabled. If TRUE, then "
          "the Library may not be safe for a human to enter.")]
    boolean RoboticsEnabled;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 11 (\'In Service\').\nBoolean set to TRUE if an audit of "
          "the location of some or all of the Library\'s PhysicalMedia is "
          "currently being performed. That an individual Changer is currently "
          "doing an audit is indicated by a similar AuditInProgress boolean "
          "property on the Changer object.")]
    boolean AuditInProgress;

        [Description (
          "Maximum time in seconds that it takes for the Storage Library to "
          "perform a complete audit of each StorageMedia Location, to "
          "determine the absence or presence of a Physical Media. If "
          "automated support is not provided, then this property\'s value is "
          "undefined."),
        PUnit ("second"),
        Units ("Seconds")]
    uint64 MaxAuditTime;

        [Description (
          "Capabilities of the StorageLibrary. For example, it can be "
          "indicated that the Library can perform automatic cleaning of the "
          "MediaAccessDevices contained in it (value=1) or that the Library "
          "provides physical door access for an operator (value=2)."),
        ValueMap { "0", "2", "3", "4"},
        Values { "Unknown", "Automatic Cleaning", "Manual Operation",
          "Front Panel Lockable"}]
    uint16 Capabilities[];

        [Deprecated { "No value"},
        Description (
          "This property is deprecated since all managed libraries willbe "
          "automated.\nBoolean set to TRUE if the Library includes a robotics "
          "mechanism that can be controlled by a ComputerSystem, to "
          "automatically load and unload PhysicalMedia to/from "
          "MediaAccessDevices and StorageMediaLocations. The property is set "
          "to FALSE if the Library represents a repository of Media that are "
          "inaccessible to a MediaAccess Device without human intervention. "
          "An example of a non- automated Library is a \'shelf\' or \'vault\' "
          "where Physical Media are kept for extended periods of time.")]
    boolean Automated;

        [Deprecated { "CIM_ComputerSystem.OperationalStatus"},
        Description (
          "This property is deprecated in favour of an OperationalStatus "
          "value of 0 (\'Unknown\').\nBoolean set to TRUE if the Library can "
          "not currently report the correct state of each PhysicalMedia "
          "within its proper StorageMediaLocation.")]
    boolean AuditNeeded;

        [Deprecated { "CIM_ComputerSystem.RequestStateChange"},
        Description (
          "Requests that the Library robotics be enabled for automated "
          "operation (input parameter, Enabled, set to TRUE), or disabled for "
          "manual operation (input parameter set to FALSE). The return value "
          "should be 0 if the request was successfully executed, 1 if the "
          "request is not supported and some other value if an error "
          "occurred. In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The strings "
          "to which the ValueMap contents are \'translated\' may also be "
          "specified in the subclass as a Values array qualifier.")]
    uint32 EnableRobotics(
          [Description ("Set TRUE to enable."),
          IN (True)]
        boolean Enable);
};

    [Description (
      "The ApplicationSystem class represents an application or a software "
      "system that supports a particular business function and that can be "
      "managed as an independent unit. Such a system can be decomposed into "
      "its functional components using the CIM_SoftwareFeature class. The "
      "Features for a particular application or software system are located "
      "using the CIM_ApplicationSystemSoftwareFeature association. The "
      "features are part of the deployment-oriented aspects of the "
      "application system. \nWith regard to the application runtime aspects, "
      "the ApplicationSystem class also represents the core class of the "
      "Application Systems\' sub-model which of the application runtime "
      "model. Its role in the systems sub-model is a) the root node of the "
      "containment hierarchy of the application elements (at runtime) as "
      "services, components, sub-systems, etc., b) the place for runtime "
      "overview information such as response time or system status, c) "
      "runtime control of the entire application (e.g., start/stop), and d) "
      "the main entry point to the navigation through and drill-down into the "
      "runtime model. \nThe lifetime of an instance of this class is not "
      "limited to the application instance it represents. Even if the "
      "application is not running, the ApplicationSystem object can report "
      "properties that have values (e.g., the name of the application or the "
      "current status). Note that it is also possible to define the lifetime "
      "of the objects through the lifetime of the application instances. "
      "\nThrough ApplicationSystemDependency, non-containment relationships "
      "can be expressed."),
    UMLPackagePath ("CIM::Application::DeploymentModel"),
    Version ("2.8.0")]
class CIM_ApplicationSystem : CIM_System {

        [Description (
          "The point in time at which the ServingStatus property was last "
          "updated."),
        ModelCorrespondence { "CIM_ApplicationSystem.ServingStatus"}]
    datetime LastServingStatusUpdate;

        [Description (
          "Distribution describes how the application system is distributed "
          "with respect to its underlying servers. In general, the "
          "application system is distributed or local. This property "
          "indicates whether the application system is running on one or "
          "multiple servers. This can be determined without having to query "
          "for associated servers represented by ComputerSystems. Distributed "
          "systems also introduce a virtual notion to themselves. Note that a "
          "distributed application system is not tangible but virtual. Only "
          "its contained local systems can be found as processes or threads, "
          "and can therefore be regarded as tangible. The distributed system "
          "remains a named, virtual entity, that scopes strongly bound "
          "constituents and allows the application to be managed in its "
          "entirety. \nThe property is needed to help root cause analysis and "
          "operations, especially when these are automated, in order to "
          "clearly know that more than one executed application - most likely "
          "the local application systems - is affected by the management "
          "task. This is particularly true if the contained application "
          "systems provide uniform functionality like webserver or "
          "application server farms. \nTo express constraints between "
          "distributed and local system, this class must be derived and "
          "appropriate associations must be defined. \nThis property should "
          "not be confused with the Roles[] property defined in System. The "
          "latter is reserved for administrator assigned roles."),
        ValueMap { "0", "1", "2", "3..32767", "32768..65535"},
        Values { "Unknown", "Distributed", "Local", "DMTF Reserved",
          "Vendor Specific"}]
    uint16 Distribution;

        [Description (
          "The point in time (date and time) when the application system was "
          "last started. If the application system is in a state other the "
          "state Enabled (i.e., started and running) this value is not "
          "meaningful and the property value MUST be set to all zeros. "
          "\nStartupTime is preferably the point in time when the application "
          "is available to the user. Instead, if the provider and/or the "
          "instrumentation cannot determine the point in time the application "
          "becomes available, the point in time can be used at which the "
          "underlying operating system reports successful launch of the "
          "application. If no value can be provided the property value MUST "
          "be set to all zeros.")]
    datetime StartupTime;

        [Description (
          "EnabledState is an integer enumeration that indicates the "
          "enabled/disabled states of an element. It can also indicate the "
          "transitions between these requested states. For example, shutting "
          "down and starting are transient states between enabled and "
          "disabled. \nIn contrast to the original version defined higher in "
          "the inheritance hierarchy (EnabledLogicalElement), EnabledState is "
          "simplified. It reflects the notion of an execution status tailored "
          "to applications and represents a summary of the original property. "
          "It allows simplified and efficient determination of whether the "
          "application is started, stopped or in transition between either of "
          "these states. The property does not show any errors. Errors MUST "
          "be described in MSE.OperationalStatus, and MAY also be described "
          "in logs or other data sources. \nThe mapping to "
          "MSE.OperationalStatus is as follows: \nExecutionStatus <- "
          "MSE.OperationalStatus \nUnknown <- Unknown, No Contact, Lost "
          "Communication, \nEither of the values <- Other \nEnabled (started) "
          "<- OK, Degraded, Stressed, Predictive Failure, In Service, "
          "Dormant, Supporting Entity in Error, Completed \nEnabled or "
          "Disabled (Started or Stopped) <- Error, Non-Recoverable Error "
          "\nStarting <- Starting \nShutting Down (Stopping) <- Stopping "
          "\nDisabled (Stopped) <- Stopped, Aborted. \nThe mapping to the "
          "original EnabledState property is as follows: \nUnknown <- "
          "Unknown, Not Applicable \nEither of the values <-Other \nEnabled "
          "<- Enabled, Enabled but Offline, In Test, Deferred, Quiesce "
          "\nDisabled <- Disabled \nShuttingDown <- ShuttingDown \nStarting "
          "<- Starting."),
        Override ("EnabledState"),
        ValueMap { "0", "2", "3", "4", "10", "11..32767", "32768..65535"},
        Values { "Unknown", "Enabled", "Disabled", "Shutting Down",
          "Starting", "DMTF Reserved", "Vendor Reserved"}]
    uint16 EnabledState = 0;

        [Description (
          "ServingStatus is a summary of MSE.OperationalStatus. It allows "
          "simplified and efficient determination of whether the application "
          "is providing service or has stopped doing so for various reasons "
          "like errors, shutdown, abort, etc. Therefore, no transitional "
          "values are provided. The property does not show any errors. Errors "
          "MUST be described in MSE.OperationalStatus, and MAY also be "
          "described in logs or other data sources. Therefore, ServingStatus "
          "is suited to provide summary information for monitoring purposes "
          "and service level management. \nThe mapping to "
          "MSE.OperationalStatus is as follows: \nServingStatus <- "
          "MSE.OperationalStatus \nUnknown <- Unknown, No Contact, Lost "
          "Communication \nEither of the values <- Other \nServing <- OK, "
          "Degraded, Stressed, Predictive Failure, Completed \nNot Serving <- "
          "Error, Non-Recoverable Error, Starting, Stopping, Stopped, In "
          "Service, Aborted, Dormant, Supporting Entity in Error."),
        ModelCorrespondence {
          "CIM_ManagedSystemElement.OperationalStatus"},
        ValueMap { "0", "1", "2", "5..4096", "4097..65535"},
        Values { "Unknown", "Serving", "Not Serving", "DMTF Reserved",
          "Vendor Specific"}]
    uint16 ServingStatus;

        [Description (
          "StopApplication() allows for stopping/shutting down an application "
          "system. It is up to the implementation of the method to define "
          "which of the contained or dependent sub-elements are to be stopped "
          "and in which order their stop has to occur. \nSince a system "
          "shutdown can last considerable time (several minutes is not "
          "necessarily unusual for complex distributed applications), the "
          "method can be implemented synchronously or asynchronously. In both "
          "cases EnabledState and RequestedState reflect the current state of "
          "the application and the desired state (Disabled) respectively. The "
          "exact nature of the errors during the stop cannot be determined in "
          "the asynchronous case. The method must return one of the "
          "following: \nUnspecified Error: If no return code can be "
          "identified \nCompleted with No Error: successful invocation \nStop "
          "Already in Process: application is shutting down \nFailed: "
          "Indicates errors upon execution."),
        ModelCorrespondence { "CIM_ApplicationSystem.EnabledState",
          "CIM_ApplicationSystem.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4..4096", "4097..32767",
          "32768..65535"},
        Values { "Unspecified Error", "Completed with No Error",
          "Stop Already in Process", "Failed", "DMTF Reserved",
          "Method Reserved", "Vendor Specific"}]
    uint16 StopApplication();

        [Description (
          "StartApplication() starts an application system. The "
          "ApplicationSystem object must have been created prior to the "
          "invocation of this method. It is up to the implementation of the "
          "method to define which of the contained or dependent sub-elements "
          "are to be started and in which order their startup may occur. "
          "\nSince a system startup can extend over long periods of time "
          "(several minutes is not unusual for complex distributed "
          "applications), the method can be implemented synchronously or "
          "asynchronously. In both cases EnabledState and RequestedState "
          "reflect the current state of the application and the desired state "
          "(Enabled) respectively. The exact nature of the errors during the "
          "startup cannot be determined in the asynchronous case. The method "
          "must return one of the following values: \nUnspecified Error: If "
          "no return code can be identified \nCompleted with No Error: "
          "successful invocation \nStart Already in Progress: application "
          "still being started \nFailed:Indicates errors upon execution."),
        ModelCorrespondence { "CIM_ApplicationSystem.EnabledState",
          "CIM_ApplicationSystem.RequestedState"},
        ValueMap { "0", "1", "2", "3", "4..4096", "4097..32767",
          "32768..65535"},
        Values { "Unspecified Error", "Completed with No Error",
          "Start Already in Progress", "Failed", "DMTF Reserved",
          "Method Reserved", "Vendor Specific"}]
    uint16 StartApplication();
};

    [Description (
      "A class derived from System that is a special collection of "
      "ManagedSystemElements. This collection is related to the providing of "
      "compute capabilities and MAY serve as an aggregation point to "
      "associate one or more of the following elements: FileSystem, "
      "OperatingSystem, Processor and Memory (Volatile and/or NonVolatile "
      "Storage)."),
    UMLPackagePath ("CIM::System::SystemElements"),
    Version ("2.36.0")]
class CIM_ComputerSystem : CIM_System {

        [ArrayType ("Indexed"),
        Description (
          "Enumeration indicating the purpose(s) to which the ComputerSystem "
          "is dedicated, if any, and what functionality is provided. For "
          "example, one could specify that the System is dedicated to "
          "\"Print\" (value=11) or acts as a \"Hub\" (value=8). \nAlso, one "
          "could indicate that this is a general purpose system by indicating "
          "\'Not Dedicated\' (value=0) but that it also hosts \'Print\' "
          "(value=11) or mobile phone \'Mobile User Device\' (value=17) "
          "services. \nA clarification is needed with respect to the value 17 "
          "(\"Mobile User Device\"). An example of a dedicated user device is "
          "a mobile phone or a barcode scanner in a store that communicates "
          "via radio frequency. These systems are quite limited in "
          "functionality and programmability, and are not considered "
          "\'general purpose\' computing platforms. Alternately, an example "
          "of a mobile system that is \'general purpose\' (i.e., is NOT "
          "dedicated) is a hand-held computer. Although limited in its "
          "programmability, new software can be downloaded and its "
          "functionality expanded by the user. \nA value of \"Management\" "
          "indicates this instance is dedicated to hosting system management "
          "software.\nA value of \"Management Controller\" indicates this "
          "instance represents specialized hardware dedicated to systems "
          "management (i.e., a Baseboard Management Controller (BMC) or "
          "service processor).\nThe management scope of a \"Management "
          "Controller\" is typically a single managed system in which it is "
          "contained.\nA value of \"Chassis Manager\" indicates this instance "
          "represents a system dedicated to management of a blade chassis and "
          "its contained devices. This value would be used to represent a "
          "Shelf Controller. A \"Chassis Manager\" is an aggregation point "
          "for management and may rely on subordinate management controllers "
          "for the management of constituent parts. A value of \"Host-based "
          "RAID Controller\" indicates this instance represents a RAID "
          "storage controller contained within a host computer. A value of "
          "\"Storage Device Enclosure\" indicates this instance represents an "
          "enclosure that contains storage devices. A \"Virtual Tape "
          "Library\" is the emulation of a tape library by a Virtual Library "
          "System. A \"Virtual Library System\" uses disk storage to emulate "
          "tape libraries.A \"FC Switch\" indicates this instance is "
          "dedicated to switching layer 2 fibre channel frames. An \"Ethernet "
          "Switch\" indicates this instance is dedicated to switching layer 2 "
          "ethernet frames.\n\"Server\" indicates that the system is an "
          "independent computer system whose primary purpose is to host "
          "services for other systems and devices to access; typically as in "
          "a stand-alone floor or rack-mounted system.\n\"Blade\" indicates "
          "this instance is a computer system that fits into another chassis "
          "and depends on it for services, such as power, cooling, etc."),
        MappingStrings { "MIB.IETF|MIB-II.sysServices",
          "FC-GS.INCITS-T11 | Platform | PlatformType"},
        ModelCorrespondence {
          "CIM_ComputerSystem.OtherDedicatedDescriptions"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
          "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
          "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
          "31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
          "..", "32568..65535"},
        Values { "Not Dedicated", "Unknown", "Other", "Storage", "Router",
          "Switch", "Layer 3 Switch", "Central Office Switch", "Hub",
          "Access Server", "Firewall", "Print", "I/O", "Web Caching",
          "Management", "Block Server", "File Server",
          "Mobile User Device", "Repeater", "Bridge/Extender", "Gateway",
          "Storage Virtualizer", "Media Library", "ExtenderNode",
          "NAS Head", "Self-contained NAS", "UPS", "IP Phone",
          "Management Controller", "Chassis Manager",
          "Host-based RAID controller", "Storage Device Enclosure",
          "Desktop", "Laptop", "Virtual Tape Library",
          "Virtual Library System", "Network PC/Thin Client",
          "FC Switch", "Ethernet Switch", "Server", "Blade",
          "DMTF Reserved", "Vendor Reserved"}]
    uint16 Dedicated[];

        [Description (
          "If enabled (value = 4), the ComputerSystem can be reset via "
          "hardware (e.g. the power and reset buttons). If disabled (value = "
          "3), hardware reset is not allowed. In addition to Enabled and "
          "Disabled, other Values for the property are also defined - \"Not "
          "Implemented\" (5), \"Other\" (1) and \"Unknown\" (2)."),
        MappingStrings { "MIF.DMTF|System Hardware Security|001.4"},
        ValueMap { "1", "2", "3", "4", "5"},
        Values { "Other", "Unknown", "Disabled", "Enabled",
          "Not Implemented"}]
    uint16 ResetCapability;

        [Description (
          "The ComputerSystem object and its derivatives are Top Level "
          "Objects of CIM. They provide the scope for numerous components. "
          "Having unique System keys is required. The NameFormat property "
          "identifies how the ComputerSystem Name is generated. The "
          "NameFormat ValueMap qualifier defines the various mechanisms for "
          "assigning the name. Note that another name can be assigned and "
          "used for the ComputerSystem that better suit a business, using the "
          "inherited ElementName property.\nIf the NameFormat is set to "
          "\"UUID\", then the Name property shall be a UUID in its canonical "
          "form consisting of 32 hexadecimal digits in 5 groups separated by "
          "hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 "
          "digits and 4 hyphens). For the first three fields, the most "
          "significant digit is on the left. The last two fields are treated "
          "as eight separate bytes, each having their most significant digit "
          "on the left, and they follow each other from left to right."),
        Override ("NameFormat"),
        ValueMap { "Other", "IP", "Dial", "HID", "NWA", "HWA", "X25",
          "ISDN", "IPX", "DCC", "ICD", "E.164", "SNA", "OID/OSI", "WWN",
          "NAA", "UUID"}]
    string NameFormat;

        [ArrayType ("Indexed"),
        Description (
          "A string describing how or why the system is dedicated when the "
          "Dedicated array includes the value 2, \"Other\"."),
        ModelCorrespondence { "CIM_ComputerSystem.Dedicated"}]
    string OtherDedicatedDescriptions[];

        [Deprecated { "CIM_PowerManagementCapabilities.PowerCapabilities"},
        Description (
          "An enumerated array describing the power management capabilities "
          "of the ComputerSystem. The use of this property has been "
          "deprecated. Instead, the Power Capabilites property in an "
          "associated PowerManagement Capabilities class should be used."),
        MappingStrings { "MIF.DMTF|System Power Controls|001.2"},
        ValueMap { "0", "1", "2", "3", "4", "5", "6", "7"},
        Values { "Unknown", "Not Supported", "Disabled", "Enabled",
          "Power Saving Modes Entered Automatically",
          "Power State Settable", "Power Cycling Supported",
          "Timed Power On Supported"}]
    uint16 PowerManagementCapabilities[];

        [Deprecated { "CIM_PowerManagementService.SetPowerState"},
        Description (
          "Sets the power state of the computer. The use of this method has "
          "been deprecated. Instead, use the SetPowerState method in the "
          "associated PowerManagementService class.")]
    uint32 SetPowerState(
          [Description ("The Desired state for the COmputerSystem."),
          ValueMap { "1", "2", "3", "4", "5", "6", "7", "8"},
          Values { "Full Power", "Power Save - Low Power Mode",
            "Power Save - Standby", "Power Save - Other", "Power Cycle",
            "Power Off", "Hibernate", "Soft Off"}]
        uint32 PowerState,
          [Description (
            "Time indicates when the power state should be set, either as a "
            "regular date-time value or as an interval value (where the "
            "interval begins when the method invocation is received.")]
        datetime Time);
};

===========================================================
pywbemcli Command: pywbemcli -s http://localhost class enumerate CIM_System --names_only
===== Command Result
CIM_AdminDomain
CIM_StorageLibrary
CIM_ApplicationSystem
CIM_ComputerSystem
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class enumerate CIM_System -o
===== Command Result
CIM_AdminDomain
CIM_StorageLibrary
CIM_ApplicationSystem
CIM_ComputerSystem
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class enumerate CIM_System -o -s
===== Command Result
ERROR: pywbemcli -s http://localhost class enumerate CIM_System -o -s
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class assocators CIM_System
===== Command Result
ERROR: pywbemcli -s http://localhost class assocators CIM_System
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class assocators CIM_System s
===== Command Result
ERROR: pywbemcli -s http://localhost class assocators CIM_System s
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class assocators CIM_System -o
===== Command Result
ERROR: pywbemcli -s http://localhost class assocators CIM_System -o
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class assocators CIM_System -o -s
===== Command Result
ERROR: pywbemcli -s http://localhost class assocators CIM_System -o -s
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class references CIM_System -o
===== Command Result
ERROR: pywbemcli -s http://localhost class references CIM_System -o
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class references CIM_System -o -s
===== Command Result
ERROR: pywbemcli -s http://localhost class references CIM_System -o -s
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class references CIM_System
===== Command Result
ERROR: pywbemcli -s http://localhost class references CIM_System
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class references CIM_System -s
===== Command Result
ERROR: pywbemcli -s http://localhost class references CIM_System -s
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class find CIM_System
===== Command Result
ERROR: pywbemcli -s http://localhost class find CIM_System
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class find PyWBEM
===== Command Result
ERROR: pywbemcli -s http://localhost class find PyWBEM
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class hierarchy CIM_System
===== Command Result
CIM_System
 +-- CIM_ApplicationSystem
 |   +-- CIM_J2eeServer
 |   +-- CIM_J2eeApplication
 |   +-- CIM_DatabaseSystem
 +-- CIM_ComputerSystem
 |   +-- CIM_VirtualComputerSystem
 |   +-- CIM_Cluster
 |   +-- CIM_UnitaryComputerSystem
 |       +-- PG_ComputerSystem
 +-- CIM_AdminDomain
 |   +-- CIM_RoutingProtocolDomain
 |   |   +-- CIM_OSPFArea
 |   +-- CIM_ReusablePolicyContainer
 |   +-- CIM_Network
 |   +-- CIM_PolicyRepository
 |   +-- CIM_J2eeDomain
 |   +-- CIM_AutonomousSystem
 +-- CIM_StorageLibrary
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class hierarchy CIM_System -s
===== Command Result
ERROR: pywbemcli -s http://localhost class hierarchy CIM_System -s
===========================================================
pywbemcli Command: pywbemcli -s http://localhost class hierarchy CIM_ManagedElement -s
===== Command Result
root
 +-- CIM_ManagedElement
